
LCD-ILI9341-F767ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000497c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004b74  08004b74  00014b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b8c  08004b8c  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  08004b8c  08004b8c  00014b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b94  08004b94  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b94  08004b94  00014b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b98  08004b98  00014b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004b9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000010  08004bac  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000b0  08004c4c  000200b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000056c0  20000150  08004cec  00020150  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20005810  08004cec  00025810  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012faf  00000000  00000000  0002017e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002551  00000000  00000000  0003312d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000df0  00000000  00000000  00035680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000d08  00000000  00000000  00036470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028a14  00000000  00000000  00037178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001055a  00000000  00000000  0005fb8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fa4e8  00000000  00000000  000700e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0016a5ce  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003a24  00000000  00000000  0016a620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000150 	.word	0x20000150
 8000214:	00000000 	.word	0x00000000
 8000218:	08004b5c 	.word	0x08004b5c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000154 	.word	0x20000154
 8000234:	08004b5c 	.word	0x08004b5c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <LCD_ILI9341_Init>:
uint8_t bsp_db[DB_SIZE];
uint8_t bsp_wb[DB_SIZE];


void LCD_ILI9341_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	//Initialize the pins
	LCD_GPIO_Init();
 8000540:	f000 f836 	bl	80005b0 <LCD_GPIO_Init>

	// Initialize SPI peripheral
	LCD_SPI_Init();
 8000544:	f000 f8dc 	bl	8000700 <LCD_SPI_Init>

	// Enable SPI peripheral
	LCD_SPI_Enable();
 8000548:	f000 f934 	bl	80007b4 <LCD_SPI_Enable>

	// Reset the LCD
	LCD_Reset();
 800054c:	f000 f946 	bl	80007dc <LCD_Reset>

	// Set display format data
	hlcd->orientation = BSP_LCD_ORIENTATION;
 8000550:	4b16      	ldr	r3, [pc, #88]	; (80005ac <LCD_ILI9341_Init+0x70>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2200      	movs	r2, #0
 8000556:	701a      	strb	r2, [r3, #0]
	hlcd->pixel_format = BSP_LCD_PIXEL_FMT;
 8000558:	4b14      	ldr	r3, [pc, #80]	; (80005ac <LCD_ILI9341_Init+0x70>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2202      	movs	r2, #2
 800055e:	705a      	strb	r2, [r3, #1]
	hlcd->area.x1 = 0;
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <LCD_ILI9341_Init+0x70>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2200      	movs	r2, #0
 8000566:	831a      	strh	r2, [r3, #24]
	hlcd->area.x2 = BSP_LCD_ACTIVE_WIDTH-1;
 8000568:	4b10      	ldr	r3, [pc, #64]	; (80005ac <LCD_ILI9341_Init+0x70>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	22ef      	movs	r2, #239	; 0xef
 800056e:	835a      	strh	r2, [r3, #26]
	hlcd->area.y1 = 0;
 8000570:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <LCD_ILI9341_Init+0x70>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2200      	movs	r2, #0
 8000576:	839a      	strh	r2, [r3, #28]
	hlcd->area.y2 = BSP_LCD_ACTIVE_HEIGHT-1;
 8000578:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <LCD_ILI9341_Init+0x70>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f240 123f 	movw	r2, #319	; 0x13f
 8000580:	83da      	strh	r2, [r3, #30]

	// Configure the LCD
	LCD_Config();
 8000582:	f000 f9c9 	bl	8000918 <LCD_Config>

	// Configure the display
	lcd_set_display_area(&hlcd->area);
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <LCD_ILI9341_Init+0x70>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	3318      	adds	r3, #24
 800058c:	4618      	mov	r0, r3
 800058e:	f000 fb22 	bl	8000bd6 <lcd_set_display_area>
	lcd_set_orientation(hlcd->orientation);
 8000592:	4b06      	ldr	r3, [pc, #24]	; (80005ac <LCD_ILI9341_Init+0x70>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	4618      	mov	r0, r3
 800059a:	f000 fbdb 	bl	8000d54 <lcd_set_orientation>
	lcd_buffer_init(hlcd);
 800059e:	4b03      	ldr	r3, [pc, #12]	; (80005ac <LCD_ILI9341_Init+0x70>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 fbf4 	bl	8000d90 <lcd_buffer_init>
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000000 	.word	0x20000000

080005b0 <LCD_GPIO_Init>:



void LCD_GPIO_Init(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
	RCC_TypeDef *pRCC = RCC;
 80005b6:	4b50      	ldr	r3, [pc, #320]	; (80006f8 <LCD_GPIO_Init+0x148>)
 80005b8:	607b      	str	r3, [r7, #4]
	GPIO_TypeDef *pGPIOC = GPIOC;
 80005ba:	4b50      	ldr	r3, [pc, #320]	; (80006fc <LCD_GPIO_Init+0x14c>)
 80005bc:	603b      	str	r3, [r7, #0]

	// Initialize peripheral clock
	pRCC->AHB1ENR |= (1 << 2);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f043 0204 	orr.w	r2, r3, #4
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	631a      	str	r2, [r3, #48]	; 0x30

	// Set pins mode
	pGPIOC->MODER |= (1 << (LCD_RESX_PIN*2)); // RESX in general purpose mode
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	601a      	str	r2, [r3, #0]
	pGPIOC->MODER |= (1 << (LCD_CSX_PIN*2)); // CSX in general purpose mode
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	601a      	str	r2, [r3, #0]
	pGPIOC->MODER |= (1 << (LCD_DCX_PIN*2)); // DCX in general purpose mode
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	601a      	str	r2, [r3, #0]
	pGPIOC->MODER |= (2 << (LCD_SCL_PIN*2)); // SCL in alternate function mode
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	601a      	str	r2, [r3, #0]
	pGPIOC->MODER |= (2 << (LCD_SDI_PIN*2)); // SDI in alternate function mode
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	601a      	str	r2, [r3, #0]
	pGPIOC->MODER |= (2 << (LCD_SDO_PIN*2)); // SDO in alternate function mode
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	601a      	str	r2, [r3, #0]

	// Set pins output type
	pGPIOC->OTYPER &= ~(1 << LCD_RESX_PIN); // RESX in output push-pull
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	605a      	str	r2, [r3, #4]
	pGPIOC->OTYPER &= ~(1 << LCD_CSX_PIN); // CSX in output push-pull
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	605a      	str	r2, [r3, #4]
	pGPIOC->OTYPER &= ~(1 << LCD_DCX_PIN); // DCX in output push-pull
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	685b      	ldr	r3, [r3, #4]
 800062e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	605a      	str	r2, [r3, #4]
	pGPIOC->OTYPER &= ~(1 << LCD_SCL_PIN); // SCL in output push-pull
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	605a      	str	r2, [r3, #4]
	pGPIOC->OTYPER &= ~(1 << LCD_SDI_PIN); // SDI in output push-pull
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	685b      	ldr	r3, [r3, #4]
 8000646:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	605a      	str	r2, [r3, #4]
	pGPIOC->OTYPER &= ~(1 << LCD_SDO_PIN); // SDO in output push-pull
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	685b      	ldr	r3, [r3, #4]
 8000652:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	605a      	str	r2, [r3, #4]


	// set pins output speed register
	pGPIOC->OSPEEDR |= (2 << (LCD_RESX_PIN*2)); // RESX in high speed
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	689b      	ldr	r3, [r3, #8]
 800065e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	609a      	str	r2, [r3, #8]
	pGPIOC->OSPEEDR |= (2 << (LCD_CSX_PIN*2));  // CSX in high speed
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	689b      	ldr	r3, [r3, #8]
 800066a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	609a      	str	r2, [r3, #8]
	pGPIOC->OSPEEDR |= (2 << (LCD_DCX_PIN*2));  // DCX in high speed
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	689b      	ldr	r3, [r3, #8]
 8000676:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	609a      	str	r2, [r3, #8]
	pGPIOC->OSPEEDR |= (2 << (LCD_SCL_PIN*2));  // SCL in high speed
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	689b      	ldr	r3, [r3, #8]
 8000682:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	609a      	str	r2, [r3, #8]
	pGPIOC->OSPEEDR |= (2 << (LCD_SDI_PIN*2));  // SDI in high speed
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	689b      	ldr	r3, [r3, #8]
 800068e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	609a      	str	r2, [r3, #8]
	pGPIOC->OSPEEDR |= (2 << (LCD_SDO_PIN*2));  // SDO in high speed
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	689b      	ldr	r3, [r3, #8]
 800069a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	609a      	str	r2, [r3, #8]


	// set pins alternate function
	pGPIOC->AFR[1] |= (6 << ((LCD_SCL_PIN*4) - 32)); // SCL in AF6
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a6:	f443 62c0 	orr.w	r2, r3, #1536	; 0x600
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	625a      	str	r2, [r3, #36]	; 0x24
	pGPIOC->AFR[1] |= (6 << ((LCD_SDI_PIN*4) - 32)); // SDI in AF6
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006b2:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	625a      	str	r2, [r3, #36]	; 0x24
	pGPIOC->AFR[1] |= (6 << ((LCD_SDO_PIN*4) - 32)); // SDO in AF6
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006be:	f443 22c0 	orr.w	r2, r3, #393216	; 0x60000
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	625a      	str	r2, [r3, #36]	; 0x24


	// set output value for CSX, DCX and RESX
	pGPIOC->ODR |= (1 << LCD_RESX_PIN);		// CSX output to 1
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	695b      	ldr	r3, [r3, #20]
 80006ca:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	615a      	str	r2, [r3, #20]
	pGPIOC->ODR |= (1 << LCD_CSX_PIN);		// CSX output to 1
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	695b      	ldr	r3, [r3, #20]
 80006d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	615a      	str	r2, [r3, #20]
	pGPIOC->ODR |= (1 << LCD_DCX_PIN);		// CSX output to 1
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	695b      	ldr	r3, [r3, #20]
 80006e2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	615a      	str	r2, [r3, #20]


}
 80006ea:	bf00      	nop
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40020800 	.word	0x40020800

08000700 <LCD_SPI_Init>:


void LCD_SPI_Init(void)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
	RCC_TypeDef *pRCC = RCC;
 8000706:	4b29      	ldr	r3, [pc, #164]	; (80007ac <LCD_SPI_Init+0xac>)
 8000708:	607b      	str	r3, [r7, #4]
	SPI_TypeDef *pSPI = SPI3;
 800070a:	4b29      	ldr	r3, [pc, #164]	; (80007b0 <LCD_SPI_Init+0xb0>)
 800070c:	603b      	str	r3, [r7, #0]

	// Initialize peripheral clock
	pRCC->APB1ENR |= (1 << 15);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000712:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	641a      	str	r2, [r3, #64]	; 0x40

	// Set SPI mode to full duplex
	pSPI->CR1 &= ~(1 << 15);
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	601a      	str	r2, [r3, #0]

	// Set data frame format
	pSPI->CR1 &= ~(1 << 11);
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	601a      	str	r2, [r3, #0]

	// Set software slave management
	pSPI->CR1 |= (1 << 9);
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	601a      	str	r2, [r3, #0]

	// Set internal slave select
	pSPI->CR1 |= (1 << 8);
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	601a      	str	r2, [r3, #0]

	// Set the baudrate ctrl -> 48 / 16 = 3 MHZ
	pSPI->CR1 |= (4 << 3);
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f043 0220 	orr.w	r2, r3, #32
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	601a      	str	r2, [r3, #0]

	// Set configuration to Master
	pSPI->CR1 |= (1 << 2);
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f043 0204 	orr.w	r2, r3, #4
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	601a      	str	r2, [r3, #0]

	// Set clock polarity to 0
	pSPI->CR1 &= ~(1 << 1);
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f023 0202 	bic.w	r2, r3, #2
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	601a      	str	r2, [r3, #0]

	// set clock phase to 0
	pSPI->CR1 &= ~(1 << 0);
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f023 0201 	bic.w	r2, r3, #1
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	601a      	str	r2, [r3, #0]

	// Set frame format
	pSPI->CR2 &= ~(1 << 4);
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	f023 0210 	bic.w	r2, r3, #16
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	605a      	str	r2, [r3, #4]

	// Set data size
	pSPI->CR2 &= ~(0xF << 8);
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	605a      	str	r2, [r3, #4]
	pSPI->CR2 |= (7 << 8);
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	f443 62e0 	orr.w	r2, r3, #1792	; 0x700
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	605a      	str	r2, [r3, #4]
}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40003c00 	.word	0x40003c00

080007b4 <LCD_SPI_Enable>:


void LCD_SPI_Enable(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
	SPI_TypeDef *pSPI = SPI3;
 80007ba:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <LCD_SPI_Enable+0x24>)
 80007bc:	607b      	str	r3, [r7, #4]

	// Enable the peripheral
	pSPI->CR1 |= (1 << 6);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	601a      	str	r2, [r3, #0]
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	40003c00 	.word	0x40003c00

080007dc <LCD_Reset>:


void LCD_Reset()
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
	LCD_RESX_LOW();
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <LCD_Reset+0x2c>)
 80007e2:	695b      	ldr	r3, [r3, #20]
 80007e4:	4a08      	ldr	r2, [pc, #32]	; (8000808 <LCD_Reset+0x2c>)
 80007e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80007ea:	6153      	str	r3, [r2, #20]
	HAL_Delay(50);
 80007ec:	2032      	movs	r0, #50	; 0x32
 80007ee:	f001 f993 	bl	8001b18 <HAL_Delay>
	LCD_RESX_HIGH();
 80007f2:	4b05      	ldr	r3, [pc, #20]	; (8000808 <LCD_Reset+0x2c>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	4a04      	ldr	r2, [pc, #16]	; (8000808 <LCD_Reset+0x2c>)
 80007f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007fc:	6153      	str	r3, [r2, #20]
	HAL_Delay(50);
 80007fe:	2032      	movs	r0, #50	; 0x32
 8000800:	f001 f98a 	bl	8001b18 <HAL_Delay>
}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40020800 	.word	0x40020800

0800080c <LCD_Write_Cmd>:


void LCD_Write_Cmd(uint8_t cmd)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
	SPI_TypeDef *pSPI = SPI3;
 8000816:	4b1c      	ldr	r3, [pc, #112]	; (8000888 <LCD_Write_Cmd+0x7c>)
 8000818:	60fb      	str	r3, [r7, #12]

	// Set CSX and DCX to low for command transmission
	LCD_CSX_LOW();
 800081a:	4b1c      	ldr	r3, [pc, #112]	; (800088c <LCD_Write_Cmd+0x80>)
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	4a1b      	ldr	r2, [pc, #108]	; (800088c <LCD_Write_Cmd+0x80>)
 8000820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000824:	6153      	str	r3, [r2, #20]
	LCD_DCX_LOW();
 8000826:	4b19      	ldr	r3, [pc, #100]	; (800088c <LCD_Write_Cmd+0x80>)
 8000828:	695b      	ldr	r3, [r3, #20]
 800082a:	4a18      	ldr	r2, [pc, #96]	; (800088c <LCD_Write_Cmd+0x80>)
 800082c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000830:	6153      	str	r3, [r2, #20]

	// Wait till the transfer buffer is empty
	while(!(pSPI->SR & (1 << 1)));
 8000832:	bf00      	nop
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	689b      	ldr	r3, [r3, #8]
 8000838:	f003 0302 	and.w	r3, r3, #2
 800083c:	2b00      	cmp	r3, #0
 800083e:	d0f9      	beq.n	8000834 <LCD_Write_Cmd+0x28>

	// Load the command into the peripheral data register
	*((__IO uint8_t *)&pSPI->DR) = cmd;
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	330c      	adds	r3, #12
 8000844:	79fa      	ldrb	r2, [r7, #7]
 8000846:	701a      	strb	r2, [r3, #0]

	// Make sure the command is sent
	while(!(pSPI->SR & (1 << 1)));
 8000848:	bf00      	nop
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	689b      	ldr	r3, [r3, #8]
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	2b00      	cmp	r3, #0
 8000854:	d0f9      	beq.n	800084a <LCD_Write_Cmd+0x3e>
	while((pSPI->SR & (1 << 7)));
 8000856:	bf00      	nop
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	689b      	ldr	r3, [r3, #8]
 800085c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000860:	2b00      	cmp	r3, #0
 8000862:	d1f9      	bne.n	8000858 <LCD_Write_Cmd+0x4c>

	LCD_CSX_HIGH();
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <LCD_Write_Cmd+0x80>)
 8000866:	695b      	ldr	r3, [r3, #20]
 8000868:	4a08      	ldr	r2, [pc, #32]	; (800088c <LCD_Write_Cmd+0x80>)
 800086a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800086e:	6153      	str	r3, [r2, #20]
	LCD_DCX_HIGH();
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <LCD_Write_Cmd+0x80>)
 8000872:	695b      	ldr	r3, [r3, #20]
 8000874:	4a05      	ldr	r2, [pc, #20]	; (800088c <LCD_Write_Cmd+0x80>)
 8000876:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800087a:	6153      	str	r3, [r2, #20]

}
 800087c:	bf00      	nop
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	40003c00 	.word	0x40003c00
 800088c:	40020800 	.word	0x40020800

08000890 <LCD_Write_Data>:
	}
}


void LCD_Write_Data(uint8_t *data, uint32_t len)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	6039      	str	r1, [r7, #0]
	SPI_TypeDef *pSPI = SPI3;
 800089a:	4b1d      	ldr	r3, [pc, #116]	; (8000910 <LCD_Write_Data+0x80>)
 800089c:	60bb      	str	r3, [r7, #8]

	// Set CSX to low for data transmission
	LCD_CSX_LOW();
 800089e:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <LCD_Write_Data+0x84>)
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	4a1c      	ldr	r2, [pc, #112]	; (8000914 <LCD_Write_Data+0x84>)
 80008a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80008a8:	6153      	str	r3, [r2, #20]

	for(uint32_t i=0;i<len;i++)
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	e010      	b.n	80008d2 <LCD_Write_Data+0x42>
	{
		// Wait till the transfer buffer is empty
		while(!(pSPI->SR & (1 << 1)));
 80008b0:	bf00      	nop
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	689b      	ldr	r3, [r3, #8]
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d0f9      	beq.n	80008b2 <LCD_Write_Data+0x22>

		// Load the command into the peripheral data register
		*((__IO uint8_t *)&pSPI->DR) = data[i];
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	441a      	add	r2, r3
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	330c      	adds	r3, #12
 80008c8:	7812      	ldrb	r2, [r2, #0]
 80008ca:	701a      	strb	r2, [r3, #0]
	for(uint32_t i=0;i<len;i++)
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	3301      	adds	r3, #1
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	68fa      	ldr	r2, [r7, #12]
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	d3ea      	bcc.n	80008b0 <LCD_Write_Data+0x20>
	}
	// Make sure the command is sent
	while(!(pSPI->SR & (1 << 1)));
 80008da:	bf00      	nop
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	689b      	ldr	r3, [r3, #8]
 80008e0:	f003 0302 	and.w	r3, r3, #2
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d0f9      	beq.n	80008dc <LCD_Write_Data+0x4c>
	while((pSPI->SR & (1 << 7)));
 80008e8:	bf00      	nop
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	689b      	ldr	r3, [r3, #8]
 80008ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d1f9      	bne.n	80008ea <LCD_Write_Data+0x5a>

	// Reset pins
	LCD_CSX_HIGH();
 80008f6:	4b07      	ldr	r3, [pc, #28]	; (8000914 <LCD_Write_Data+0x84>)
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	4a06      	ldr	r2, [pc, #24]	; (8000914 <LCD_Write_Data+0x84>)
 80008fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000900:	6153      	str	r3, [r2, #20]
}
 8000902:	bf00      	nop
 8000904:	3714      	adds	r7, #20
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	40003c00 	.word	0x40003c00
 8000914:	40020800 	.word	0x40020800

08000918 <LCD_Config>:


void LCD_Config(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
	uint8_t params[15];
	LCD_Write_Cmd(LCD_SW_RESET);
 800091e:	2001      	movs	r0, #1
 8000920:	f7ff ff74 	bl	800080c <LCD_Write_Cmd>

	LCD_Write_Cmd(LCD_PWR_CTRL_B);
 8000924:	20cf      	movs	r0, #207	; 0xcf
 8000926:	f7ff ff71 	bl	800080c <LCD_Write_Cmd>
	params[0] = 0x00;
 800092a:	2300      	movs	r3, #0
 800092c:	703b      	strb	r3, [r7, #0]
	params[1] = 0xD9;
 800092e:	23d9      	movs	r3, #217	; 0xd9
 8000930:	707b      	strb	r3, [r7, #1]
	params[2] = 0x30;
 8000932:	2330      	movs	r3, #48	; 0x30
 8000934:	70bb      	strb	r3, [r7, #2]
	LCD_Write_Data(params, 3);
 8000936:	463b      	mov	r3, r7
 8000938:	2103      	movs	r1, #3
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff ffa8 	bl	8000890 <LCD_Write_Data>

	LCD_Write_Cmd(LCD_PWR_ON_SEQUENCE_CTRL);
 8000940:	20ed      	movs	r0, #237	; 0xed
 8000942:	f7ff ff63 	bl	800080c <LCD_Write_Cmd>
	params[0] = 0x64;
 8000946:	2364      	movs	r3, #100	; 0x64
 8000948:	703b      	strb	r3, [r7, #0]
	params[1] = 0x03;
 800094a:	2303      	movs	r3, #3
 800094c:	707b      	strb	r3, [r7, #1]
	params[2] = 0x12;
 800094e:	2312      	movs	r3, #18
 8000950:	70bb      	strb	r3, [r7, #2]
	params[3] = 0x81;
 8000952:	2381      	movs	r3, #129	; 0x81
 8000954:	70fb      	strb	r3, [r7, #3]
	LCD_Write_Data(params, 4);
 8000956:	463b      	mov	r3, r7
 8000958:	2104      	movs	r1, #4
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff ff98 	bl	8000890 <LCD_Write_Data>

	LCD_Write_Cmd(LCD_DRIVER_TIMING_CTRL_A);
 8000960:	20e8      	movs	r0, #232	; 0xe8
 8000962:	f7ff ff53 	bl	800080c <LCD_Write_Cmd>
	params[0] = 0x85;
 8000966:	2385      	movs	r3, #133	; 0x85
 8000968:	703b      	strb	r3, [r7, #0]
	params[1] = 0x10;
 800096a:	2310      	movs	r3, #16
 800096c:	707b      	strb	r3, [r7, #1]
	params[2] = 0x7A;
 800096e:	237a      	movs	r3, #122	; 0x7a
 8000970:	70bb      	strb	r3, [r7, #2]
	LCD_Write_Data(params, 3);
 8000972:	463b      	mov	r3, r7
 8000974:	2103      	movs	r1, #3
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff ff8a 	bl	8000890 <LCD_Write_Data>

	LCD_Write_Cmd(LCD_PWR_CTRL_A);
 800097c:	20cb      	movs	r0, #203	; 0xcb
 800097e:	f7ff ff45 	bl	800080c <LCD_Write_Cmd>
	params[0] = 0x39;
 8000982:	2339      	movs	r3, #57	; 0x39
 8000984:	703b      	strb	r3, [r7, #0]
	params[1] = 0x2C;
 8000986:	232c      	movs	r3, #44	; 0x2c
 8000988:	707b      	strb	r3, [r7, #1]
	params[2] = 0x00;
 800098a:	2300      	movs	r3, #0
 800098c:	70bb      	strb	r3, [r7, #2]
	params[3] = 0x34;
 800098e:	2334      	movs	r3, #52	; 0x34
 8000990:	70fb      	strb	r3, [r7, #3]
	params[4] = 0x02;
 8000992:	2302      	movs	r3, #2
 8000994:	713b      	strb	r3, [r7, #4]
	LCD_Write_Data(params, 5);
 8000996:	463b      	mov	r3, r7
 8000998:	2105      	movs	r1, #5
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff ff78 	bl	8000890 <LCD_Write_Data>

	LCD_Write_Cmd(LCD_PUMP_RATIO_CTRL);
 80009a0:	20f7      	movs	r0, #247	; 0xf7
 80009a2:	f7ff ff33 	bl	800080c <LCD_Write_Cmd>
	params[0] = 0x20;
 80009a6:	2320      	movs	r3, #32
 80009a8:	703b      	strb	r3, [r7, #0]
	LCD_Write_Data(params, 1);
 80009aa:	463b      	mov	r3, r7
 80009ac:	2101      	movs	r1, #1
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff ff6e 	bl	8000890 <LCD_Write_Data>

	LCD_Write_Cmd(LCD_DRIVER_TIMING_CTRL_B);
 80009b4:	20ea      	movs	r0, #234	; 0xea
 80009b6:	f7ff ff29 	bl	800080c <LCD_Write_Cmd>
	params[0] = 0x00;
 80009ba:	2300      	movs	r3, #0
 80009bc:	703b      	strb	r3, [r7, #0]
	params[1] = 0x00;
 80009be:	2300      	movs	r3, #0
 80009c0:	707b      	strb	r3, [r7, #1]
	LCD_Write_Data(params, 2);
 80009c2:	463b      	mov	r3, r7
 80009c4:	2102      	movs	r1, #2
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff ff62 	bl	8000890 <LCD_Write_Data>

	LCD_Write_Cmd(LCD_PWR_CTRL1);
 80009cc:	20c0      	movs	r0, #192	; 0xc0
 80009ce:	f7ff ff1d 	bl	800080c <LCD_Write_Cmd>
	params[0] = 0x1B;
 80009d2:	231b      	movs	r3, #27
 80009d4:	703b      	strb	r3, [r7, #0]
	LCD_Write_Data(params, 1);
 80009d6:	463b      	mov	r3, r7
 80009d8:	2101      	movs	r1, #1
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff ff58 	bl	8000890 <LCD_Write_Data>

	LCD_Write_Cmd(LCD_PWR_CTRL2);
 80009e0:	20c1      	movs	r0, #193	; 0xc1
 80009e2:	f7ff ff13 	bl	800080c <LCD_Write_Cmd>
	params[0] = 0x12;
 80009e6:	2312      	movs	r3, #18
 80009e8:	703b      	strb	r3, [r7, #0]
	LCD_Write_Data(params, 1);
 80009ea:	463b      	mov	r3, r7
 80009ec:	2101      	movs	r1, #1
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff ff4e 	bl	8000890 <LCD_Write_Data>

	LCD_Write_Cmd(LCD_VCOM_CTRL1);
 80009f4:	20c5      	movs	r0, #197	; 0xc5
 80009f6:	f7ff ff09 	bl	800080c <LCD_Write_Cmd>
	params[0] = 0x08;
 80009fa:	2308      	movs	r3, #8
 80009fc:	703b      	strb	r3, [r7, #0]
	params[1] = 0x26;
 80009fe:	2326      	movs	r3, #38	; 0x26
 8000a00:	707b      	strb	r3, [r7, #1]
	LCD_Write_Data(params, 2);
 8000a02:	463b      	mov	r3, r7
 8000a04:	2102      	movs	r1, #2
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff ff42 	bl	8000890 <LCD_Write_Data>

	LCD_Write_Cmd(LCD_VCOM_CTRL2);
 8000a0c:	20c7      	movs	r0, #199	; 0xc7
 8000a0e:	f7ff fefd 	bl	800080c <LCD_Write_Cmd>
	params[0] = 0xB7;
 8000a12:	23b7      	movs	r3, #183	; 0xb7
 8000a14:	703b      	strb	r3, [r7, #0]
	LCD_Write_Data(params, 1);
 8000a16:	463b      	mov	r3, r7
 8000a18:	2101      	movs	r1, #1
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff ff38 	bl	8000890 <LCD_Write_Data>

	uint8_t m;
	m = MADCTL_MV | MADCTL_MY | MADCTL_BGR;
 8000a20:	23a8      	movs	r3, #168	; 0xa8
 8000a22:	73fb      	strb	r3, [r7, #15]

	LCD_Write_Cmd(LCD_MEM_ACCESS_CTRL);
 8000a24:	2036      	movs	r0, #54	; 0x36
 8000a26:	f7ff fef1 	bl	800080c <LCD_Write_Cmd>
	params[0] = m;
 8000a2a:	7bfb      	ldrb	r3, [r7, #15]
 8000a2c:	703b      	strb	r3, [r7, #0]
	LCD_Write_Data(params, 1);
 8000a2e:	463b      	mov	r3, r7
 8000a30:	2101      	movs	r1, #1
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff ff2c 	bl	8000890 <LCD_Write_Data>

	LCD_Write_Cmd(LCD_PIXEL_FORMAT_SET);
 8000a38:	203a      	movs	r0, #58	; 0x3a
 8000a3a:	f7ff fee7 	bl	800080c <LCD_Write_Cmd>
	params[0] = 0x55;
 8000a3e:	2355      	movs	r3, #85	; 0x55
 8000a40:	703b      	strb	r3, [r7, #0]
	LCD_Write_Data(params, 1);
 8000a42:	463b      	mov	r3, r7
 8000a44:	2101      	movs	r1, #1
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff ff22 	bl	8000890 <LCD_Write_Data>

	LCD_Write_Cmd(LCD_FRAME_CTRL_NORMAL_MODE);
 8000a4c:	20b1      	movs	r0, #177	; 0xb1
 8000a4e:	f7ff fedd 	bl	800080c <LCD_Write_Cmd>
	params[0] = 0x00;
 8000a52:	2300      	movs	r3, #0
 8000a54:	703b      	strb	r3, [r7, #0]
	params[1] = 0x1B;
 8000a56:	231b      	movs	r3, #27
 8000a58:	707b      	strb	r3, [r7, #1]
	LCD_Write_Data(params, 2);
 8000a5a:	463b      	mov	r3, r7
 8000a5c:	2102      	movs	r1, #2
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff ff16 	bl	8000890 <LCD_Write_Data>

	LCD_Write_Cmd(LCD_DISPLAY_FUNC_CTRL);
 8000a64:	20b6      	movs	r0, #182	; 0xb6
 8000a66:	f7ff fed1 	bl	800080c <LCD_Write_Cmd>
	params[0] = 0x0A;
 8000a6a:	230a      	movs	r3, #10
 8000a6c:	703b      	strb	r3, [r7, #0]
	params[1] = 0xA2;
 8000a6e:	23a2      	movs	r3, #162	; 0xa2
 8000a70:	707b      	strb	r3, [r7, #1]
	LCD_Write_Data(params, 2);
 8000a72:	463b      	mov	r3, r7
 8000a74:	2102      	movs	r1, #2
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff ff0a 	bl	8000890 <LCD_Write_Data>

	LCD_Write_Cmd(LCD_ENABLE_3G);
 8000a7c:	20f2      	movs	r0, #242	; 0xf2
 8000a7e:	f7ff fec5 	bl	800080c <LCD_Write_Cmd>
	params[0] = 0x02;
 8000a82:	2302      	movs	r3, #2
 8000a84:	703b      	strb	r3, [r7, #0]
	LCD_Write_Data(params, 1);
 8000a86:	463b      	mov	r3, r7
 8000a88:	2101      	movs	r1, #1
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff ff00 	bl	8000890 <LCD_Write_Data>

	LCD_Write_Cmd(LCD_GAMMA_SET);
 8000a90:	2026      	movs	r0, #38	; 0x26
 8000a92:	f7ff febb 	bl	800080c <LCD_Write_Cmd>
	params[0] = 0x01;
 8000a96:	2301      	movs	r3, #1
 8000a98:	703b      	strb	r3, [r7, #0]
	LCD_Write_Data(params, 1);
 8000a9a:	463b      	mov	r3, r7
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff fef6 	bl	8000890 <LCD_Write_Data>

	LCD_Write_Cmd(LCD_POSITIVE_GAMMA_CORRECTION);
 8000aa4:	20e0      	movs	r0, #224	; 0xe0
 8000aa6:	f7ff feb1 	bl	800080c <LCD_Write_Cmd>
	params[0] = 0x0F;
 8000aaa:	230f      	movs	r3, #15
 8000aac:	703b      	strb	r3, [r7, #0]
	params[1] = 0x1D;
 8000aae:	231d      	movs	r3, #29
 8000ab0:	707b      	strb	r3, [r7, #1]
	params[2] = 0x1A;
 8000ab2:	231a      	movs	r3, #26
 8000ab4:	70bb      	strb	r3, [r7, #2]
	params[3] = 0x0A;
 8000ab6:	230a      	movs	r3, #10
 8000ab8:	70fb      	strb	r3, [r7, #3]
	params[4] = 0x0D;
 8000aba:	230d      	movs	r3, #13
 8000abc:	713b      	strb	r3, [r7, #4]
	params[5] = 0x07;
 8000abe:	2307      	movs	r3, #7
 8000ac0:	717b      	strb	r3, [r7, #5]
	params[6] = 0x49;
 8000ac2:	2349      	movs	r3, #73	; 0x49
 8000ac4:	71bb      	strb	r3, [r7, #6]
	params[7] = 0x66;
 8000ac6:	2366      	movs	r3, #102	; 0x66
 8000ac8:	71fb      	strb	r3, [r7, #7]
	params[8] = 0x3B;
 8000aca:	233b      	movs	r3, #59	; 0x3b
 8000acc:	723b      	strb	r3, [r7, #8]
	params[9] = 0x07;
 8000ace:	2307      	movs	r3, #7
 8000ad0:	727b      	strb	r3, [r7, #9]
	params[10] = 0x11;
 8000ad2:	2311      	movs	r3, #17
 8000ad4:	72bb      	strb	r3, [r7, #10]
	params[11] = 0x01;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	72fb      	strb	r3, [r7, #11]
	params[12] = 0x09;
 8000ada:	2309      	movs	r3, #9
 8000adc:	733b      	strb	r3, [r7, #12]
	params[13] = 0x05;
 8000ade:	2305      	movs	r3, #5
 8000ae0:	737b      	strb	r3, [r7, #13]
	params[14] = 0x04;
 8000ae2:	2304      	movs	r3, #4
 8000ae4:	73bb      	strb	r3, [r7, #14]
	LCD_Write_Data(params, 15);
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	210f      	movs	r1, #15
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fed0 	bl	8000890 <LCD_Write_Data>

	LCD_Write_Cmd(LCD_NEGATIVE_GAMMA_CORRECTION);
 8000af0:	20e1      	movs	r0, #225	; 0xe1
 8000af2:	f7ff fe8b 	bl	800080c <LCD_Write_Cmd>
	params[0] = 0x00;
 8000af6:	2300      	movs	r3, #0
 8000af8:	703b      	strb	r3, [r7, #0]
	params[1] = 0x18;
 8000afa:	2318      	movs	r3, #24
 8000afc:	707b      	strb	r3, [r7, #1]
	params[2] = 0x1D;
 8000afe:	231d      	movs	r3, #29
 8000b00:	70bb      	strb	r3, [r7, #2]
	params[3] = 0x02;
 8000b02:	2302      	movs	r3, #2
 8000b04:	70fb      	strb	r3, [r7, #3]
	params[4] = 0x0F;
 8000b06:	230f      	movs	r3, #15
 8000b08:	713b      	strb	r3, [r7, #4]
	params[5] = 0x04;
 8000b0a:	2304      	movs	r3, #4
 8000b0c:	717b      	strb	r3, [r7, #5]
	params[6] = 0x36;
 8000b0e:	2336      	movs	r3, #54	; 0x36
 8000b10:	71bb      	strb	r3, [r7, #6]
	params[7] = 0x13;
 8000b12:	2313      	movs	r3, #19
 8000b14:	71fb      	strb	r3, [r7, #7]
	params[8] = 0x4C;
 8000b16:	234c      	movs	r3, #76	; 0x4c
 8000b18:	723b      	strb	r3, [r7, #8]
	params[9] = 0x07;
 8000b1a:	2307      	movs	r3, #7
 8000b1c:	727b      	strb	r3, [r7, #9]
	params[10] = 0x13;
 8000b1e:	2313      	movs	r3, #19
 8000b20:	72bb      	strb	r3, [r7, #10]
	params[11] = 0x0F;
 8000b22:	230f      	movs	r3, #15
 8000b24:	72fb      	strb	r3, [r7, #11]
	params[12] = 0x2E;
 8000b26:	232e      	movs	r3, #46	; 0x2e
 8000b28:	733b      	strb	r3, [r7, #12]
	params[13] = 0x2F;
 8000b2a:	232f      	movs	r3, #47	; 0x2f
 8000b2c:	737b      	strb	r3, [r7, #13]
	params[14] = 0x05;
 8000b2e:	2305      	movs	r3, #5
 8000b30:	73bb      	strb	r3, [r7, #14]
	LCD_Write_Data(params, 15);
 8000b32:	463b      	mov	r3, r7
 8000b34:	210f      	movs	r1, #15
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff feaa 	bl	8000890 <LCD_Write_Data>

	LCD_Write_Cmd(LCD_PAGE_ADDR_SET);
 8000b3c:	202b      	movs	r0, #43	; 0x2b
 8000b3e:	f7ff fe65 	bl	800080c <LCD_Write_Cmd>
	params[0] = 0x00;
 8000b42:	2300      	movs	r3, #0
 8000b44:	703b      	strb	r3, [r7, #0]
	params[1] = 0x00;
 8000b46:	2300      	movs	r3, #0
 8000b48:	707b      	strb	r3, [r7, #1]
	params[2] = 0x00;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	70bb      	strb	r3, [r7, #2]
	params[3] = 0xF0;
 8000b4e:	23f0      	movs	r3, #240	; 0xf0
 8000b50:	70fb      	strb	r3, [r7, #3]
	LCD_Write_Data(params, 4);
 8000b52:	463b      	mov	r3, r7
 8000b54:	2104      	movs	r1, #4
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff fe9a 	bl	8000890 <LCD_Write_Data>

	LCD_Write_Cmd(LCD_COLUMN_ADDR_SET);
 8000b5c:	202a      	movs	r0, #42	; 0x2a
 8000b5e:	f7ff fe55 	bl	800080c <LCD_Write_Cmd>
	params[0] = 0x00;
 8000b62:	2300      	movs	r3, #0
 8000b64:	703b      	strb	r3, [r7, #0]
	params[1] = 0x00;
 8000b66:	2300      	movs	r3, #0
 8000b68:	707b      	strb	r3, [r7, #1]
	params[2] = 0x01;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	70bb      	strb	r3, [r7, #2]
	params[3] = 0x40;
 8000b6e:	2340      	movs	r3, #64	; 0x40
 8000b70:	70fb      	strb	r3, [r7, #3]
	LCD_Write_Data(params, 4);
 8000b72:	463b      	mov	r3, r7
 8000b74:	2104      	movs	r1, #4
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff fe8a 	bl	8000890 <LCD_Write_Data>

	LCD_Write_Cmd(LCD_SLEEP_OUT);
 8000b7c:	2011      	movs	r0, #17
 8000b7e:	f7ff fe45 	bl	800080c <LCD_Write_Cmd>
	HAL_Delay(100);
 8000b82:	2064      	movs	r0, #100	; 0x64
 8000b84:	f000 ffc8 	bl	8001b18 <HAL_Delay>
	LCD_Write_Cmd(LCD_DISPLAY_ON);
 8000b88:	2029      	movs	r0, #41	; 0x29
 8000b8a:	f7ff fe3f 	bl	800080c <LCD_Write_Cmd>
}
 8000b8e:	bf00      	nop
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <bsp_lcd_set_display_area>:

void bsp_lcd_set_display_area(uint16_t x1, uint16_t x2, uint16_t y1, uint16_t y2)
{
 8000b96:	b590      	push	{r4, r7, lr}
 8000b98:	b085      	sub	sp, #20
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	4604      	mov	r4, r0
 8000b9e:	4608      	mov	r0, r1
 8000ba0:	4611      	mov	r1, r2
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	4623      	mov	r3, r4
 8000ba6:	80fb      	strh	r3, [r7, #6]
 8000ba8:	4603      	mov	r3, r0
 8000baa:	80bb      	strh	r3, [r7, #4]
 8000bac:	460b      	mov	r3, r1
 8000bae:	807b      	strh	r3, [r7, #2]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	803b      	strh	r3, [r7, #0]
	lcd_area_t area;
	area.x1 = x1;
 8000bb4:	88fb      	ldrh	r3, [r7, #6]
 8000bb6:	813b      	strh	r3, [r7, #8]
	area.x2 = x2;
 8000bb8:	88bb      	ldrh	r3, [r7, #4]
 8000bba:	817b      	strh	r3, [r7, #10]
	area.y1 = y1;
 8000bbc:	887b      	ldrh	r3, [r7, #2]
 8000bbe:	81bb      	strh	r3, [r7, #12]
	area.y2 = y2;
 8000bc0:	883b      	ldrh	r3, [r7, #0]
 8000bc2:	81fb      	strh	r3, [r7, #14]
	lcd_set_display_area(&area);
 8000bc4:	f107 0308 	add.w	r3, r7, #8
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f000 f804 	bl	8000bd6 <lcd_set_display_area>
}
 8000bce:	bf00      	nop
 8000bd0:	3714      	adds	r7, #20
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd90      	pop	{r4, r7, pc}

08000bd6 <lcd_set_display_area>:


void lcd_set_display_area(lcd_area_t *area)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b084      	sub	sp, #16
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
	uint8_t params[4];
	// Column address set(2Ah)
	params[0] = HIGH_16(area->x1);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	0a1b      	lsrs	r3, r3, #8
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	733b      	strb	r3, [r7, #12]
	params[1] = LOW_16(area->x1);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	737b      	strb	r3, [r7, #13]
	params[2] = HIGH_16(area->x2);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	885b      	ldrh	r3, [r3, #2]
 8000bf6:	0a1b      	lsrs	r3, r3, #8
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	73bb      	strb	r3, [r7, #14]
	params[3] = LOW_16(area->x2);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	885b      	ldrh	r3, [r3, #2]
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	73fb      	strb	r3, [r7, #15]
	LCD_Write_Cmd(LCD_COLUMN_ADDR_SET);
 8000c06:	202a      	movs	r0, #42	; 0x2a
 8000c08:	f7ff fe00 	bl	800080c <LCD_Write_Cmd>
	LCD_Write_Data(params,4);
 8000c0c:	f107 030c 	add.w	r3, r7, #12
 8000c10:	2104      	movs	r1, #4
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fe3c 	bl	8000890 <LCD_Write_Data>

	params[0] = HIGH_16(area->y1);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	889b      	ldrh	r3, [r3, #4]
 8000c1c:	0a1b      	lsrs	r3, r3, #8
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	733b      	strb	r3, [r7, #12]
	params[1] = LOW_16(area->y1);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	889b      	ldrh	r3, [r3, #4]
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	737b      	strb	r3, [r7, #13]
	params[2] = HIGH_16(area->y2);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	88db      	ldrh	r3, [r3, #6]
 8000c30:	0a1b      	lsrs	r3, r3, #8
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	73bb      	strb	r3, [r7, #14]
	params[3] = LOW_16(area->y2);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	88db      	ldrh	r3, [r3, #6]
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	73fb      	strb	r3, [r7, #15]
	LCD_Write_Cmd(LCD_PAGE_ADDR_SET);
 8000c40:	202b      	movs	r0, #43	; 0x2b
 8000c42:	f7ff fde3 	bl	800080c <LCD_Write_Cmd>
	LCD_Write_Data(params,4);
 8000c46:	f107 030c 	add.w	r3, r7, #12
 8000c4a:	2104      	movs	r1, #4
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff fe1f 	bl	8000890 <LCD_Write_Data>
}
 8000c52:	bf00      	nop
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <bsp_lcd_write>:
void bsp_lcd_write(uint8_t *buffer, uint32_t nbytes)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
	SPI_TypeDef *pSPI = SPI3;
 8000c66:	4b39      	ldr	r3, [pc, #228]	; (8000d4c <bsp_lcd_write+0xf0>)
 8000c68:	60bb      	str	r3, [r7, #8]
	uint16_t *buff_ptr;

	__disable_spi();
 8000c6a:	bf00      	nop
 8000c6c:	4b37      	ldr	r3, [pc, #220]	; (8000d4c <bsp_lcd_write+0xf0>)
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d1f9      	bne.n	8000c6c <bsp_lcd_write+0x10>
 8000c78:	4b34      	ldr	r3, [pc, #208]	; (8000d4c <bsp_lcd_write+0xf0>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a33      	ldr	r2, [pc, #204]	; (8000d4c <bsp_lcd_write+0xf0>)
 8000c7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000c82:	6013      	str	r3, [r2, #0]
	__spi_set_dff_16bit();
 8000c84:	4b31      	ldr	r3, [pc, #196]	; (8000d4c <bsp_lcd_write+0xf0>)
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	4a30      	ldr	r2, [pc, #192]	; (8000d4c <bsp_lcd_write+0xf0>)
 8000c8a:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8000c8e:	6053      	str	r3, [r2, #4]
	__enable_spi();
 8000c90:	4b2e      	ldr	r3, [pc, #184]	; (8000d4c <bsp_lcd_write+0xf0>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a2d      	ldr	r2, [pc, #180]	; (8000d4c <bsp_lcd_write+0xf0>)
 8000c96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c9a:	6013      	str	r3, [r2, #0]

	LCD_CSX_LOW();
 8000c9c:	4b2c      	ldr	r3, [pc, #176]	; (8000d50 <bsp_lcd_write+0xf4>)
 8000c9e:	695b      	ldr	r3, [r3, #20]
 8000ca0:	4a2b      	ldr	r2, [pc, #172]	; (8000d50 <bsp_lcd_write+0xf4>)
 8000ca2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ca6:	6153      	str	r3, [r2, #20]

	buff_ptr = (uint16_t*)buffer;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	60fb      	str	r3, [r7, #12]
	while(nbytes)
 8000cac:	e01f      	b.n	8000cee <bsp_lcd_write+0x92>
	{
		while(!(pSPI->SR & (1 << 1)));
 8000cae:	bf00      	nop
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	f003 0302 	and.w	r3, r3, #2
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d0f9      	beq.n	8000cb0 <bsp_lcd_write+0x54>
		pSPI->DR = *buff_ptr;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	881b      	ldrh	r3, [r3, #0]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
		++buff_ptr;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	3302      	adds	r3, #2
 8000cca:	60fb      	str	r3, [r7, #12]
		nbytes -= 2;
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	3b02      	subs	r3, #2
 8000cd0:	603b      	str	r3, [r7, #0]

		// Make sure the command is sent
		while(!(pSPI->SR & (1 << 1)));
 8000cd2:	bf00      	nop
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	f003 0302 	and.w	r3, r3, #2
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d0f9      	beq.n	8000cd4 <bsp_lcd_write+0x78>
		while((pSPI->SR & (1 << 7)));
 8000ce0:	bf00      	nop
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d1f9      	bne.n	8000ce2 <bsp_lcd_write+0x86>
	while(nbytes)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d1dc      	bne.n	8000cae <bsp_lcd_write+0x52>
	}

	__disable_spi();
 8000cf4:	bf00      	nop
 8000cf6:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <bsp_lcd_write+0xf0>)
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d1f9      	bne.n	8000cf6 <bsp_lcd_write+0x9a>
 8000d02:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <bsp_lcd_write+0xf0>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a11      	ldr	r2, [pc, #68]	; (8000d4c <bsp_lcd_write+0xf0>)
 8000d08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d0c:	6013      	str	r3, [r2, #0]
	LCD_CSX_HIGH();
 8000d0e:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <bsp_lcd_write+0xf4>)
 8000d10:	695b      	ldr	r3, [r3, #20]
 8000d12:	4a0f      	ldr	r2, [pc, #60]	; (8000d50 <bsp_lcd_write+0xf4>)
 8000d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d18:	6153      	str	r3, [r2, #20]
	__spi_set_dff_8bit();
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <bsp_lcd_write+0xf0>)
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	4a0b      	ldr	r2, [pc, #44]	; (8000d4c <bsp_lcd_write+0xf0>)
 8000d20:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8000d24:	6053      	str	r3, [r2, #4]
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <bsp_lcd_write+0xf0>)
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	4a08      	ldr	r2, [pc, #32]	; (8000d4c <bsp_lcd_write+0xf0>)
 8000d2c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000d30:	6053      	str	r3, [r2, #4]
	__enable_spi();
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <bsp_lcd_write+0xf0>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a05      	ldr	r2, [pc, #20]	; (8000d4c <bsp_lcd_write+0xf0>)
 8000d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d3c:	6013      	str	r3, [r2, #0]
}
 8000d3e:	bf00      	nop
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	40003c00 	.word	0x40003c00
 8000d50:	40020800 	.word	0x40020800

08000d54 <lcd_set_orientation>:


void lcd_set_orientation(uint8_t orientation)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
	uint8_t param;

	if(orientation == LANDSCAPE)
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d102      	bne.n	8000d6a <lcd_set_orientation+0x16>
		param = MADCTL_MV | MADCTL_MY | MADCTL_BGR; // Memory access control <Landscape setting>
 8000d64:	23a8      	movs	r3, #168	; 0xa8
 8000d66:	73fb      	strb	r3, [r7, #15]
 8000d68:	e004      	b.n	8000d74 <lcd_set_orientation+0x20>
	else if(orientation == PORTRAIT)
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d101      	bne.n	8000d74 <lcd_set_orientation+0x20>
		param = MADCTL_MY | MADCTL_MX | MADCTL_BGR; // Memory access control <portrait setting>
 8000d70:	23c8      	movs	r3, #200	; 0xc8
 8000d72:	73fb      	strb	r3, [r7, #15]

	LCD_Write_Cmd(LCD_MEM_ACCESS_CTRL);
 8000d74:	2036      	movs	r0, #54	; 0x36
 8000d76:	f7ff fd49 	bl	800080c <LCD_Write_Cmd>
	LCD_Write_Data(&param, 1);
 8000d7a:	f107 030f 	add.w	r3, r7, #15
 8000d7e:	2101      	movs	r1, #1
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fd85 	bl	8000890 <LCD_Write_Data>
}
 8000d86:	bf00      	nop
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <lcd_buffer_init>:


void lcd_buffer_init(bsp_lcd_t *lcd)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	lcd->draw_buffer1 = bsp_db;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a08      	ldr	r2, [pc, #32]	; (8000dbc <lcd_buffer_init+0x2c>)
 8000d9c:	605a      	str	r2, [r3, #4]
	lcd->draw_buffer2 = bsp_wb;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a07      	ldr	r2, [pc, #28]	; (8000dc0 <lcd_buffer_init+0x30>)
 8000da2:	609a      	str	r2, [r3, #8]
	lcd->buff_to_draw = NULL;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2200      	movs	r2, #0
 8000da8:	611a      	str	r2, [r3, #16]
	lcd->buff_to_flush = NULL;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2200      	movs	r2, #0
 8000dae:	615a      	str	r2, [r3, #20]
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	2000018c 	.word	0x2000018c
 8000dc0:	2000298c 	.word	0x2000298c

08000dc4 <bsp_lcd_set_background_color>:


void bsp_lcd_set_background_color(uint32_t rgb888)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af02      	add	r7, sp, #8
 8000dca:	6078      	str	r0, [r7, #4]
	bsp_lcd_fill_rect(rgb888,0,(BSP_LCD_ACTIVE_WIDTH),0,(BSP_LCD_ACTIVE_HEIGHT));
 8000dcc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	22f0      	movs	r2, #240	; 0xf0
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f000 f82d 	bl	8000e38 <bsp_lcd_fill_rect>
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <bsp_lcd_convert_rgb888_to_rgb565>:


uint16_t bsp_lcd_convert_rgb888_to_rgb565(uint32_t rgb888)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b085      	sub	sp, #20
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
	uint16_t r = (rgb888 >> 19) & 0x1FU;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	0cdb      	lsrs	r3, r3, #19
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	f003 031f 	and.w	r3, r3, #31
 8000df8:	81fb      	strh	r3, [r7, #14]
	uint16_t g = (rgb888 >> 10) & 0x3FU;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	0a9b      	lsrs	r3, r3, #10
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e04:	81bb      	strh	r3, [r7, #12]
	uint16_t b = (rgb888 >> 3)  & 0x1FU;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	08db      	lsrs	r3, r3, #3
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	f003 031f 	and.w	r3, r3, #31
 8000e10:	817b      	strh	r3, [r7, #10]

	return (uint16_t)((r<<11) | (g << 5) | b);
 8000e12:	89fb      	ldrh	r3, [r7, #14]
 8000e14:	02db      	lsls	r3, r3, #11
 8000e16:	b21a      	sxth	r2, r3
 8000e18:	89bb      	ldrh	r3, [r7, #12]
 8000e1a:	015b      	lsls	r3, r3, #5
 8000e1c:	b21b      	sxth	r3, r3
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	b21a      	sxth	r2, r3
 8000e22:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	b21b      	sxth	r3, r3
 8000e2a:	b29b      	uxth	r3, r3
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3714      	adds	r7, #20
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <bsp_lcd_fill_rect>:



void bsp_lcd_fill_rect(uint32_t rgb888, uint32_t x_start, uint32_t x_width, uint32_t y_start, uint32_t y_height)
{
 8000e38:	b590      	push	{r4, r7, lr}
 8000e3a:	b08f      	sub	sp, #60	; 0x3c
 8000e3c:	af02      	add	r7, sp, #8
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
 8000e44:	603b      	str	r3, [r7, #0]
	uint32_t total_bytes_to_write = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
	uint32_t bytes_sent_so_far = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t remaining_bytes = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t npix;
	uint32_t pixels_sent = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	623b      	str	r3, [r7, #32]
	uint32_t x1,y1;
	uint32_t pixel_per_line = x_width;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	61bb      	str	r3, [r7, #24]

	if((x_start+x_width) > BSP_LCD_ACTIVE_WIDTH) return;
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4413      	add	r3, r2
 8000e60:	2bf0      	cmp	r3, #240	; 0xf0
 8000e62:	d863      	bhi.n	8000f2c <bsp_lcd_fill_rect+0xf4>
	if((y_start+y_height) > BSP_LCD_ACTIVE_HEIGHT) return;
 8000e64:	683a      	ldr	r2, [r7, #0]
 8000e66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e68:	4413      	add	r3, r2
 8000e6a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000e6e:	d85f      	bhi.n	8000f30 <bsp_lcd_fill_rect+0xf8>


	//1. Calculate total number of bytes written into DB
	total_bytes_to_write = get_total_bytes(hlcd, x_width, y_height);
 8000e70:	4b31      	ldr	r3, [pc, #196]	; (8000f38 <bsp_lcd_fill_rect+0x100>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000e76:	6879      	ldr	r1, [r7, #4]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f000 f85f 	bl	8000f3c <get_total_bytes>
 8000e7e:	61f8      	str	r0, [r7, #28]
	remaining_bytes = total_bytes_to_write;
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28

	while(remaining_bytes)
 8000e84:	e04e      	b.n	8000f24 <bsp_lcd_fill_rect+0xec>
	{
		x1 = x_start + (pixels_sent % pixel_per_line);
 8000e86:	6a3b      	ldr	r3, [r7, #32]
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	fbb3 f2f2 	udiv	r2, r3, r2
 8000e8e:	69b9      	ldr	r1, [r7, #24]
 8000e90:	fb01 f202 	mul.w	r2, r1, r2
 8000e94:	1a9b      	subs	r3, r3, r2
 8000e96:	68ba      	ldr	r2, [r7, #8]
 8000e98:	4413      	add	r3, r2
 8000e9a:	617b      	str	r3, [r7, #20]
		y1 = y_start + (pixels_sent / pixel_per_line);
 8000e9c:	6a3a      	ldr	r2, [r7, #32]
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea4:	683a      	ldr	r2, [r7, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]

		make_area(&hlcd->area,x1,x_width,y1,y_height);
 8000eaa:	4b23      	ldr	r3, [pc, #140]	; (8000f38 <bsp_lcd_fill_rect+0x100>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f103 0018 	add.w	r0, r3, #24
 8000eb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000eb4:	9300      	str	r3, [sp, #0]
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	6979      	ldr	r1, [r7, #20]
 8000ebc:	f000 f859 	bl	8000f72 <make_area>

		if(x1 != x_start)
 8000ec0:	697a      	ldr	r2, [r7, #20]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d006      	beq.n	8000ed6 <bsp_lcd_fill_rect+0x9e>
			npix = x_start + x_width - x1;
 8000ec8:	68ba      	ldr	r2, [r7, #8]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	441a      	add	r2, r3
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ed4:	e007      	b.n	8000ee6 <bsp_lcd_fill_rect+0xae>
		else
			npix = bytes_to_pixels(remaining_bytes, hlcd->pixel_format);
 8000ed6:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <bsp_lcd_fill_rect+0x100>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	785b      	ldrb	r3, [r3, #1]
 8000edc:	4619      	mov	r1, r3
 8000ede:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000ee0:	f000 f887 	bl	8000ff2 <bytes_to_pixels>
 8000ee4:	6278      	str	r0, [r7, #36]	; 0x24

		bytes_sent_so_far += copy_to_draw_buffer(hlcd,pixels_to_bytes(npix,hlcd->pixel_format),rgb888);
 8000ee6:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <bsp_lcd_fill_rect+0x100>)
 8000ee8:	681c      	ldr	r4, [r3, #0]
 8000eea:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <bsp_lcd_fill_rect+0x100>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	785b      	ldrb	r3, [r3, #1]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000ef4:	f000 f94b 	bl	800118e <pixels_to_bytes>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	4619      	mov	r1, r3
 8000efe:	4620      	mov	r0, r4
 8000f00:	f000 f885 	bl	800100e <copy_to_draw_buffer>
 8000f04:	4602      	mov	r2, r0
 8000f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f08:	4413      	add	r3, r2
 8000f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
		pixels_sent = bytes_to_pixels(bytes_sent_so_far, hlcd->pixel_format);
 8000f0c:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <bsp_lcd_fill_rect+0x100>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	785b      	ldrb	r3, [r3, #1]
 8000f12:	4619      	mov	r1, r3
 8000f14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000f16:	f000 f86c 	bl	8000ff2 <bytes_to_pixels>
 8000f1a:	6238      	str	r0, [r7, #32]
		remaining_bytes = total_bytes_to_write - bytes_sent_so_far;
 8000f1c:	69fa      	ldr	r2, [r7, #28]
 8000f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28
	while(remaining_bytes)
 8000f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d1ad      	bne.n	8000e86 <bsp_lcd_fill_rect+0x4e>
 8000f2a:	e002      	b.n	8000f32 <bsp_lcd_fill_rect+0xfa>
	if((x_start+x_width) > BSP_LCD_ACTIVE_WIDTH) return;
 8000f2c:	bf00      	nop
 8000f2e:	e000      	b.n	8000f32 <bsp_lcd_fill_rect+0xfa>
	if((y_start+y_height) > BSP_LCD_ACTIVE_HEIGHT) return;
 8000f30:	bf00      	nop
	}
}
 8000f32:	3734      	adds	r7, #52	; 0x34
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd90      	pop	{r4, r7, pc}
 8000f38:	20000000 	.word	0x20000000

08000f3c <get_total_bytes>:


uint32_t get_total_bytes(bsp_lcd_t *hlcd, uint32_t width, uint32_t height)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b087      	sub	sp, #28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
	uint8_t bytes_per_pixel = 2;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	75fb      	strb	r3, [r7, #23]
	if(hlcd->pixel_format == BSP_LCD_PIXEL_FMT_RGB565)
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	785b      	ldrb	r3, [r3, #1]
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d101      	bne.n	8000f58 <get_total_bytes+0x1c>
		bytes_per_pixel=2;
 8000f54:	2302      	movs	r3, #2
 8000f56:	75fb      	strb	r3, [r7, #23]
	return (width*height*bytes_per_pixel);
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	fb02 f303 	mul.w	r3, r2, r3
 8000f60:	7dfa      	ldrb	r2, [r7, #23]
 8000f62:	fb02 f303 	mul.w	r3, r2, r3
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	371c      	adds	r7, #28
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <make_area>:

void make_area(lcd_area_t *area, uint32_t x_start, uint32_t x_width, uint32_t y_start, uint32_t y_height)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b087      	sub	sp, #28
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	60f8      	str	r0, [r7, #12]
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
 8000f7e:	603b      	str	r3, [r7, #0]
	uint16_t lcd_total_width = BSP_LCD_ACTIVE_WIDTH-1;
 8000f80:	23ef      	movs	r3, #239	; 0xef
 8000f82:	82fb      	strh	r3, [r7, #22]
	uint16_t lcd_total_height = BSP_LCD_ACTIVE_HEIGHT-1;
 8000f84:	f240 133f 	movw	r3, #319	; 0x13f
 8000f88:	82bb      	strh	r3, [r7, #20]

	area->x1 = x_start;
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	801a      	strh	r2, [r3, #0]
	area->x2 = x_start + x_width - 1;
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	4413      	add	r3, r2
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	805a      	strh	r2, [r3, #2]
	area->y1 = y_start;
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	809a      	strh	r2, [r3, #4]
	area->y2 = y_start + y_height - 1;
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	6a3b      	ldr	r3, [r7, #32]
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	4413      	add	r3, r2
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	80da      	strh	r2, [r3, #6]

	area->x2 = (area->x2 > lcd_total_width) ? lcd_total_width : area->x2;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	885b      	ldrh	r3, [r3, #2]
 8000fc6:	8afa      	ldrh	r2, [r7, #22]
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	bf28      	it	cs
 8000fcc:	4613      	movcs	r3, r2
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	805a      	strh	r2, [r3, #2]
	area->y2 = (area->y2 > lcd_total_height) ? lcd_total_height : area->y2;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	88db      	ldrh	r3, [r3, #6]
 8000fd8:	8aba      	ldrh	r2, [r7, #20]
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	bf28      	it	cs
 8000fde:	4613      	movcs	r3, r2
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	80da      	strh	r2, [r3, #6]
}
 8000fe6:	bf00      	nop
 8000fe8:	371c      	adds	r7, #28
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <bytes_to_pixels>:

uint32_t bytes_to_pixels(uint32_t nbytes, uint8_t pixel_format)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	70fb      	strb	r3, [r7, #3]
	(void)pixel_format;
	return nbytes/2;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	085b      	lsrs	r3, r3, #1
}
 8001002:	4618      	mov	r0, r3
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <copy_to_draw_buffer>:

uint32_t copy_to_draw_buffer(bsp_lcd_t *hlcd, uint32_t nbytes, uint32_t rgb888)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b088      	sub	sp, #32
 8001012:	af00      	add	r7, sp, #0
 8001014:	60f8      	str	r0, [r7, #12]
 8001016:	60b9      	str	r1, [r7, #8]
 8001018:	607a      	str	r2, [r7, #4]
	uint16_t *fb_ptr = NULL;
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
	uint32_t npixels;
	hlcd->buff_to_draw = get_buff(hlcd);
 800101e:	68f8      	ldr	r0, [r7, #12]
 8001020:	f000 f853 	bl	80010ca <get_buff>
 8001024:	4602      	mov	r2, r0
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	611a      	str	r2, [r3, #16]
	fb_ptr = (uint16_t*)hlcd->buff_to_draw;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	691b      	ldr	r3, [r3, #16]
 800102e:	61fb      	str	r3, [r7, #28]
	nbytes = ((nbytes > DB_SIZE)? DB_SIZE : nbytes);
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8001036:	bf28      	it	cs
 8001038:	f44f 5320 	movcs.w	r3, #10240	; 0x2800
 800103c:	60bb      	str	r3, [r7, #8]
	npixels = bytes_to_pixels(nbytes, hlcd->pixel_format);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	785b      	ldrb	r3, [r3, #1]
 8001042:	4619      	mov	r1, r3
 8001044:	68b8      	ldr	r0, [r7, #8]
 8001046:	f7ff ffd4 	bl	8000ff2 <bytes_to_pixels>
 800104a:	6178      	str	r0, [r7, #20]

	if(hlcd->buff_to_draw != NULL)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d035      	beq.n	80010c0 <copy_to_draw_buffer+0xb2>
	{
		for(uint32_t i=0;i < npixels; i++)
 8001054:	2300      	movs	r3, #0
 8001056:	61bb      	str	r3, [r7, #24]
 8001058:	e00c      	b.n	8001074 <copy_to_draw_buffer+0x66>
		{
			*fb_ptr = bsp_lcd_convert_rgb888_to_rgb565(rgb888);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff fec3 	bl	8000de6 <bsp_lcd_convert_rgb888_to_rgb565>
 8001060:	4603      	mov	r3, r0
 8001062:	461a      	mov	r2, r3
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	801a      	strh	r2, [r3, #0]
			fb_ptr++;
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	3302      	adds	r3, #2
 800106c:	61fb      	str	r3, [r7, #28]
		for(uint32_t i=0;i < npixels; i++)
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	3301      	adds	r3, #1
 8001072:	61bb      	str	r3, [r7, #24]
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	429a      	cmp	r2, r3
 800107a:	d3ee      	bcc.n	800105a <copy_to_draw_buffer+0x4c>
		}

		hlcd->write_lenght = pixels_to_bytes(npixels,hlcd->pixel_format);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	785b      	ldrb	r3, [r3, #1]
 8001080:	4619      	mov	r1, r3
 8001082:	6978      	ldr	r0, [r7, #20]
 8001084:	f000 f883 	bl	800118e <pixels_to_bytes>
 8001088:	4602      	mov	r2, r0
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	60da      	str	r2, [r3, #12]
		while(!is_lcd_write_allowed(hlcd));
 800108e:	bf00      	nop
 8001090:	68f8      	ldr	r0, [r7, #12]
 8001092:	f000 f850 	bl	8001136 <is_lcd_write_allowed>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d0f9      	beq.n	8001090 <copy_to_draw_buffer+0x82>
		hlcd->buff_to_flush = hlcd->buff_to_draw;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	691a      	ldr	r2, [r3, #16]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	615a      	str	r2, [r3, #20]
		hlcd->buff_to_draw = NULL;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2200      	movs	r2, #0
 80010a8:	611a      	str	r2, [r3, #16]
		hlcd_flush(hlcd);
 80010aa:	68f8      	ldr	r0, [r7, #12]
 80010ac:	f000 f854 	bl	8001158 <hlcd_flush>

		return pixels_to_bytes(npixels,hlcd->pixel_format);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	785b      	ldrb	r3, [r3, #1]
 80010b4:	4619      	mov	r1, r3
 80010b6:	6978      	ldr	r0, [r7, #20]
 80010b8:	f000 f869 	bl	800118e <pixels_to_bytes>
 80010bc:	4603      	mov	r3, r0
 80010be:	e000      	b.n	80010c2 <copy_to_draw_buffer+0xb4>
	}

	return 0;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3720      	adds	r7, #32
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <get_buff>:

uint8_t *get_buff(bsp_lcd_t *hlcd)
{
 80010ca:	b480      	push	{r7}
 80010cc:	b085      	sub	sp, #20
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
	uint32_t buf1 = (uint32_t)hlcd->draw_buffer1;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	60fb      	str	r3, [r7, #12]
	uint32_t buf2 = (uint32_t)hlcd->draw_buffer2;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	60bb      	str	r3, [r7, #8]

	//__disable_irq();

	if(hlcd->buff_to_draw == NULL && hlcd->buff_to_flush == NULL)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	691b      	ldr	r3, [r3, #16]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d106      	bne.n	80010f4 <get_buff+0x2a>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d102      	bne.n	80010f4 <get_buff+0x2a>
		return hlcd->draw_buffer1;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	e01a      	b.n	800112a <get_buff+0x60>
	else if((uint32_t)hlcd->buff_to_flush == buf1 && hlcd->buff_to_draw == NULL)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	695b      	ldr	r3, [r3, #20]
 80010f8:	461a      	mov	r2, r3
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d106      	bne.n	800110e <get_buff+0x44>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d102      	bne.n	800110e <get_buff+0x44>
		return hlcd->draw_buffer2;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	e00d      	b.n	800112a <get_buff+0x60>
	else if((uint32_t)hlcd->buff_to_flush==buf2 && hlcd->buff_to_draw==NULL)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	461a      	mov	r2, r3
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	4293      	cmp	r3, r2
 8001118:	d106      	bne.n	8001128 <get_buff+0x5e>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	691b      	ldr	r3, [r3, #16]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d102      	bne.n	8001128 <get_buff+0x5e>
		return hlcd->draw_buffer1;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	e000      	b.n	800112a <get_buff+0x60>

	//__enable_irq()

	return NULL;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <is_lcd_write_allowed>:


uint8_t is_lcd_write_allowed(bsp_lcd_t *hlcd)
{
 8001136:	b480      	push	{r7}
 8001138:	b083      	sub	sp, #12
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
	//__disable_irq();
	if(!hlcd->buff_to_flush)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d101      	bne.n	800114a <is_lcd_write_allowed+0x14>
		return 1;
 8001146:	2301      	movs	r3, #1
 8001148:	e000      	b.n	800114c <is_lcd_write_allowed+0x16>

	//__enable_irq();

	return 0;
 800114a:	2300      	movs	r3, #0
}
 800114c:	4618      	mov	r0, r3
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <hlcd_flush>:

void hlcd_flush(bsp_lcd_t *hlcd)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	lcd_set_display_area(&hlcd->area);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3318      	adds	r3, #24
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff fd36 	bl	8000bd6 <lcd_set_display_area>

	LCD_Write_Cmd(LCD_MEM_WRITE);
 800116a:	202c      	movs	r0, #44	; 0x2c
 800116c:	f7ff fb4e 	bl	800080c <LCD_Write_Cmd>
	bsp_lcd_write(hlcd->buff_to_flush,hlcd->write_lenght);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	695a      	ldr	r2, [r3, #20]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	4619      	mov	r1, r3
 800117a:	4610      	mov	r0, r2
 800117c:	f7ff fd6e 	bl	8000c5c <bsp_lcd_write>
	hlcd->buff_to_flush = NULL;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	615a      	str	r2, [r3, #20]
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <pixels_to_bytes>:

uint32_t pixels_to_bytes(uint32_t pixels,uint8_t pixel_format)
{
 800118e:	b480      	push	{r7}
 8001190:	b083      	sub	sp, #12
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
 8001196:	460b      	mov	r3, r1
 8001198:	70fb      	strb	r3, [r7, #3]
	(void)pixel_format;
	return pixels * 2UL;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	005b      	lsls	r3, r3, #1
}
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	f5ad 5d7a 	sub.w	sp, sp, #16000	; 0x3e80
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b6:	f000 fc52 	bl	8001a5e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ba:	f000 f86f 	bl	800129c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011be:	f000 f98b 	bl	80014d8 <MX_GPIO_Init>
  MX_ETH_Init();
 80011c2:	f000 f8dd 	bl	8001380 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80011c6:	f000 f929 	bl	800141c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80011ca:	f000 f957 	bl	800147c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  LCD_ILI9341_Init();
 80011ce:	f7ff f9b5 	bl	800053c <LCD_ILI9341_Init>



	bsp_lcd_set_background_color(RED);  		// Displays RED
 80011d2:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
 80011d6:	f7ff fdf5 	bl	8000dc4 <bsp_lcd_set_background_color>
	bsp_lcd_set_background_color(BLUE);			// Displays GREEN
 80011da:	20ff      	movs	r0, #255	; 0xff
 80011dc:	f7ff fdf2 	bl	8000dc4 <bsp_lcd_set_background_color>
	bsp_lcd_set_background_color(GREEN);		// Displays BLUE
 80011e0:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 80011e4:	f7ff fdee 	bl	8000dc4 <bsp_lcd_set_background_color>
	bsp_lcd_set_background_color(BLACK);		// Displays BLACK
 80011e8:	2000      	movs	r0, #0
 80011ea:	f7ff fdeb 	bl	8000dc4 <bsp_lcd_set_background_color>
	bsp_lcd_set_background_color(WHITE);		// Displays WHITE
 80011ee:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80011f2:	f7ff fde7 	bl	8000dc4 <bsp_lcd_set_background_color>
	bsp_lcd_set_background_color(ORANGE);		// Displays VIOLET
 80011f6:	4824      	ldr	r0, [pc, #144]	; (8001288 <main+0xdc>)
 80011f8:	f7ff fde4 	bl	8000dc4 <bsp_lcd_set_background_color>
	bsp_lcd_set_background_color(YELLOW);		// Displays VIOLET
 80011fc:	4823      	ldr	r0, [pc, #140]	; (800128c <main+0xe0>)
 80011fe:	f7ff fde1 	bl	8000dc4 <bsp_lcd_set_background_color>
	bsp_lcd_set_background_color(INDIGO);		// Displays dark red
 8001202:	4823      	ldr	r0, [pc, #140]	; (8001290 <main+0xe4>)
 8001204:	f7ff fdde 	bl	8000dc4 <bsp_lcd_set_background_color>
	bsp_lcd_set_background_color(VIOLET);		// Displays brown
 8001208:	4822      	ldr	r0, [pc, #136]	; (8001294 <main+0xe8>)
 800120a:	f7ff fddb 	bl	8000dc4 <bsp_lcd_set_background_color>


	//bsp_lcd_set_display_area(60, 259,100,139);
	bsp_lcd_set_display_area(100,139,60, 259);
 800120e:	f240 1303 	movw	r3, #259	; 0x103
 8001212:	223c      	movs	r2, #60	; 0x3c
 8001214:	218b      	movs	r1, #139	; 0x8b
 8001216:	2064      	movs	r0, #100	; 0x64
 8001218:	f7ff fcbd 	bl	8000b96 <bsp_lcd_set_display_area>
	uint16_t data[200ul*40ul];
	for(uint32_t i = 0; i< (200ul*40ul); i++)
 800121c:	2300      	movs	r3, #0
 800121e:	f643 6284 	movw	r2, #16004	; 0x3e84
 8001222:	443a      	add	r2, r7
 8001224:	6013      	str	r3, [r2, #0]
 8001226:	e018      	b.n	800125a <main+0xae>
	{
		data[i] = bsp_lcd_convert_rgb888_to_rgb565(RED);
 8001228:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
 800122c:	f7ff fddb 	bl	8000de6 <bsp_lcd_convert_rgb888_to_rgb565>
 8001230:	4603      	mov	r3, r0
 8001232:	4619      	mov	r1, r3
 8001234:	f607 6388 	addw	r3, r7, #3720	; 0xe88
 8001238:	f6a3 6384 	subw	r3, r3, #3716	; 0xe84
 800123c:	f643 6284 	movw	r2, #16004	; 0x3e84
 8001240:	443a      	add	r2, r7
 8001242:	6812      	ldr	r2, [r2, #0]
 8001244:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(uint32_t i = 0; i< (200ul*40ul); i++)
 8001248:	f643 6384 	movw	r3, #16004	; 0x3e84
 800124c:	443b      	add	r3, r7
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	3301      	adds	r3, #1
 8001252:	f643 6284 	movw	r2, #16004	; 0x3e84
 8001256:	443a      	add	r2, r7
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	f643 6384 	movw	r3, #16004	; 0x3e84
 800125e:	443b      	add	r3, r7
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001266:	d3df      	bcc.n	8001228 <main+0x7c>
	}
	LCD_Write_Cmd(LCD_MEM_WRITE);
 8001268:	202c      	movs	r0, #44	; 0x2c
 800126a:	f7ff facf 	bl	800080c <LCD_Write_Cmd>
	bsp_lcd_write((uint8_t*)data, (200ul*40ul*2ul));
 800126e:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <main+0xec>)
 8001270:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
 8001274:	f103 0308 	add.w	r3, r3, #8
 8001278:	443b      	add	r3, r7
 800127a:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fcec 	bl	8000c5c <bsp_lcd_write>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001284:	e7fe      	b.n	8001284 <main+0xd8>
 8001286:	bf00      	nop
 8001288:	00ff7f00 	.word	0x00ff7f00
 800128c:	00ffff00 	.word	0x00ffff00
 8001290:	004b0082 	.word	0x004b0082
 8001294:	009400d3 	.word	0x009400d3
 8001298:	ffffc17c 	.word	0xffffc17c

0800129c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b094      	sub	sp, #80	; 0x50
 80012a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012a2:	f107 031c 	add.w	r3, r7, #28
 80012a6:	2234      	movs	r2, #52	; 0x34
 80012a8:	2100      	movs	r1, #0
 80012aa:	4618      	mov	r0, r3
 80012ac:	f003 fc4e 	bl	8004b4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b0:	f107 0308 	add.w	r3, r7, #8
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80012c0:	f001 fb68 	bl	8002994 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c4:	4b2c      	ldr	r3, [pc, #176]	; (8001378 <SystemClock_Config+0xdc>)
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	4a2b      	ldr	r2, [pc, #172]	; (8001378 <SystemClock_Config+0xdc>)
 80012ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ce:	6413      	str	r3, [r2, #64]	; 0x40
 80012d0:	4b29      	ldr	r3, [pc, #164]	; (8001378 <SystemClock_Config+0xdc>)
 80012d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d8:	607b      	str	r3, [r7, #4]
 80012da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012dc:	4b27      	ldr	r3, [pc, #156]	; (800137c <SystemClock_Config+0xe0>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012e4:	4a25      	ldr	r2, [pc, #148]	; (800137c <SystemClock_Config+0xe0>)
 80012e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ea:	6013      	str	r3, [r2, #0]
 80012ec:	4b23      	ldr	r3, [pc, #140]	; (800137c <SystemClock_Config+0xe0>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012f4:	603b      	str	r3, [r7, #0]
 80012f6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012f8:	2301      	movs	r3, #1
 80012fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80012fc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001300:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001302:	2302      	movs	r3, #2
 8001304:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001306:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800130a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800130c:	2304      	movs	r3, #4
 800130e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001310:	2360      	movs	r3, #96	; 0x60
 8001312:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001314:	2302      	movs	r3, #2
 8001316:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001318:	2304      	movs	r3, #4
 800131a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800131c:	2302      	movs	r3, #2
 800131e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	4618      	mov	r0, r3
 8001326:	f001 fb95 	bl	8002a54 <HAL_RCC_OscConfig>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001330:	f000 f974 	bl	800161c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001334:	f001 fb3e 	bl	80029b4 <HAL_PWREx_EnableOverDrive>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800133e:	f000 f96d 	bl	800161c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001342:	230f      	movs	r3, #15
 8001344:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001346:	2302      	movs	r3, #2
 8001348:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800134e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001352:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001354:	2300      	movs	r3, #0
 8001356:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001358:	f107 0308 	add.w	r3, r7, #8
 800135c:	2103      	movs	r1, #3
 800135e:	4618      	mov	r0, r3
 8001360:	f001 fe26 	bl	8002fb0 <HAL_RCC_ClockConfig>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800136a:	f000 f957 	bl	800161c <Error_Handler>
  }
}
 800136e:	bf00      	nop
 8001370:	3750      	adds	r7, #80	; 0x50
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40023800 	.word	0x40023800
 800137c:	40007000 	.word	0x40007000

08001380 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001384:	4b1f      	ldr	r3, [pc, #124]	; (8001404 <MX_ETH_Init+0x84>)
 8001386:	4a20      	ldr	r2, [pc, #128]	; (8001408 <MX_ETH_Init+0x88>)
 8001388:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800138a:	4b20      	ldr	r3, [pc, #128]	; (800140c <MX_ETH_Init+0x8c>)
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001390:	4b1e      	ldr	r3, [pc, #120]	; (800140c <MX_ETH_Init+0x8c>)
 8001392:	2280      	movs	r2, #128	; 0x80
 8001394:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001396:	4b1d      	ldr	r3, [pc, #116]	; (800140c <MX_ETH_Init+0x8c>)
 8001398:	22e1      	movs	r2, #225	; 0xe1
 800139a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800139c:	4b1b      	ldr	r3, [pc, #108]	; (800140c <MX_ETH_Init+0x8c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80013a2:	4b1a      	ldr	r3, [pc, #104]	; (800140c <MX_ETH_Init+0x8c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80013a8:	4b18      	ldr	r3, [pc, #96]	; (800140c <MX_ETH_Init+0x8c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <MX_ETH_Init+0x84>)
 80013b0:	4a16      	ldr	r2, [pc, #88]	; (800140c <MX_ETH_Init+0x8c>)
 80013b2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80013b4:	4b13      	ldr	r3, [pc, #76]	; (8001404 <MX_ETH_Init+0x84>)
 80013b6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80013ba:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <MX_ETH_Init+0x84>)
 80013be:	4a14      	ldr	r2, [pc, #80]	; (8001410 <MX_ETH_Init+0x90>)
 80013c0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80013c2:	4b10      	ldr	r3, [pc, #64]	; (8001404 <MX_ETH_Init+0x84>)
 80013c4:	4a13      	ldr	r2, [pc, #76]	; (8001414 <MX_ETH_Init+0x94>)
 80013c6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80013c8:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <MX_ETH_Init+0x84>)
 80013ca:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80013ce:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80013d0:	480c      	ldr	r0, [pc, #48]	; (8001404 <MX_ETH_Init+0x84>)
 80013d2:	f000 fcab 	bl	8001d2c <HAL_ETH_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80013dc:	f000 f91e 	bl	800161c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80013e0:	2238      	movs	r2, #56	; 0x38
 80013e2:	2100      	movs	r1, #0
 80013e4:	480c      	ldr	r0, [pc, #48]	; (8001418 <MX_ETH_Init+0x98>)
 80013e6:	f003 fbb1 	bl	8004b4c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <MX_ETH_Init+0x98>)
 80013ec:	2221      	movs	r2, #33	; 0x21
 80013ee:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <MX_ETH_Init+0x98>)
 80013f2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80013f6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80013f8:	4b07      	ldr	r3, [pc, #28]	; (8001418 <MX_ETH_Init+0x98>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	200051c4 	.word	0x200051c4
 8001408:	40028000 	.word	0x40028000
 800140c:	20005804 	.word	0x20005804
 8001410:	200000b0 	.word	0x200000b0
 8001414:	20000010 	.word	0x20000010
 8001418:	2000518c 	.word	0x2000518c

0800141c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001420:	4b14      	ldr	r3, [pc, #80]	; (8001474 <MX_USART3_UART_Init+0x58>)
 8001422:	4a15      	ldr	r2, [pc, #84]	; (8001478 <MX_USART3_UART_Init+0x5c>)
 8001424:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001426:	4b13      	ldr	r3, [pc, #76]	; (8001474 <MX_USART3_UART_Init+0x58>)
 8001428:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800142c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800142e:	4b11      	ldr	r3, [pc, #68]	; (8001474 <MX_USART3_UART_Init+0x58>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <MX_USART3_UART_Init+0x58>)
 8001436:	2200      	movs	r2, #0
 8001438:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <MX_USART3_UART_Init+0x58>)
 800143c:	2200      	movs	r2, #0
 800143e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <MX_USART3_UART_Init+0x58>)
 8001442:	220c      	movs	r2, #12
 8001444:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <MX_USART3_UART_Init+0x58>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800144c:	4b09      	ldr	r3, [pc, #36]	; (8001474 <MX_USART3_UART_Init+0x58>)
 800144e:	2200      	movs	r2, #0
 8001450:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001452:	4b08      	ldr	r3, [pc, #32]	; (8001474 <MX_USART3_UART_Init+0x58>)
 8001454:	2200      	movs	r2, #0
 8001456:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <MX_USART3_UART_Init+0x58>)
 800145a:	2200      	movs	r2, #0
 800145c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800145e:	4805      	ldr	r0, [pc, #20]	; (8001474 <MX_USART3_UART_Init+0x58>)
 8001460:	f002 fbf4 	bl	8003c4c <HAL_UART_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800146a:	f000 f8d7 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20005274 	.word	0x20005274
 8001478:	40004800 	.word	0x40004800

0800147c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001480:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001482:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001486:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001488:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800148a:	2206      	movs	r2, #6
 800148c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800148e:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001490:	2202      	movs	r2, #2
 8001492:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001494:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001496:	2200      	movs	r2, #0
 8001498:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800149c:	2202      	movs	r2, #2
 800149e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80014a6:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80014b2:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80014be:	4805      	ldr	r0, [pc, #20]	; (80014d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014c0:	f001 f91f 	bl	8002702 <HAL_PCD_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80014ca:	f000 f8a7 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200052fc 	.word	0x200052fc

080014d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08c      	sub	sp, #48	; 0x30
 80014dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014de:	f107 031c 	add.w	r3, r7, #28
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
 80014ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ee:	4b47      	ldr	r3, [pc, #284]	; (800160c <MX_GPIO_Init+0x134>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a46      	ldr	r2, [pc, #280]	; (800160c <MX_GPIO_Init+0x134>)
 80014f4:	f043 0304 	orr.w	r3, r3, #4
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b44      	ldr	r3, [pc, #272]	; (800160c <MX_GPIO_Init+0x134>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0304 	and.w	r3, r3, #4
 8001502:	61bb      	str	r3, [r7, #24]
 8001504:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001506:	4b41      	ldr	r3, [pc, #260]	; (800160c <MX_GPIO_Init+0x134>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	4a40      	ldr	r2, [pc, #256]	; (800160c <MX_GPIO_Init+0x134>)
 800150c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
 8001512:	4b3e      	ldr	r3, [pc, #248]	; (800160c <MX_GPIO_Init+0x134>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800151a:	617b      	str	r3, [r7, #20]
 800151c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800151e:	4b3b      	ldr	r3, [pc, #236]	; (800160c <MX_GPIO_Init+0x134>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a3a      	ldr	r2, [pc, #232]	; (800160c <MX_GPIO_Init+0x134>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b38      	ldr	r3, [pc, #224]	; (800160c <MX_GPIO_Init+0x134>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001536:	4b35      	ldr	r3, [pc, #212]	; (800160c <MX_GPIO_Init+0x134>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a34      	ldr	r2, [pc, #208]	; (800160c <MX_GPIO_Init+0x134>)
 800153c:	f043 0302 	orr.w	r3, r3, #2
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b32      	ldr	r3, [pc, #200]	; (800160c <MX_GPIO_Init+0x134>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800154e:	4b2f      	ldr	r3, [pc, #188]	; (800160c <MX_GPIO_Init+0x134>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a2e      	ldr	r2, [pc, #184]	; (800160c <MX_GPIO_Init+0x134>)
 8001554:	f043 0308 	orr.w	r3, r3, #8
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b2c      	ldr	r3, [pc, #176]	; (800160c <MX_GPIO_Init+0x134>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001566:	4b29      	ldr	r3, [pc, #164]	; (800160c <MX_GPIO_Init+0x134>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	4a28      	ldr	r2, [pc, #160]	; (800160c <MX_GPIO_Init+0x134>)
 800156c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001570:	6313      	str	r3, [r2, #48]	; 0x30
 8001572:	4b26      	ldr	r3, [pc, #152]	; (800160c <MX_GPIO_Init+0x134>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800157e:	2200      	movs	r2, #0
 8001580:	f244 0181 	movw	r1, #16513	; 0x4081
 8001584:	4822      	ldr	r0, [pc, #136]	; (8001610 <MX_GPIO_Init+0x138>)
 8001586:	f001 f8a3 	bl	80026d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800158a:	2200      	movs	r2, #0
 800158c:	2140      	movs	r1, #64	; 0x40
 800158e:	4821      	ldr	r0, [pc, #132]	; (8001614 <MX_GPIO_Init+0x13c>)
 8001590:	f001 f89e 	bl	80026d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001594:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800159a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800159e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80015a4:	f107 031c 	add.w	r3, r7, #28
 80015a8:	4619      	mov	r1, r3
 80015aa:	481b      	ldr	r0, [pc, #108]	; (8001618 <MX_GPIO_Init+0x140>)
 80015ac:	f000 fee4 	bl	8002378 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80015b0:	f244 0381 	movw	r3, #16513	; 0x4081
 80015b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b6:	2301      	movs	r3, #1
 80015b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c2:	f107 031c 	add.w	r3, r7, #28
 80015c6:	4619      	mov	r1, r3
 80015c8:	4811      	ldr	r0, [pc, #68]	; (8001610 <MX_GPIO_Init+0x138>)
 80015ca:	f000 fed5 	bl	8002378 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80015ce:	2340      	movs	r3, #64	; 0x40
 80015d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d2:	2301      	movs	r3, #1
 80015d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015da:	2300      	movs	r3, #0
 80015dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80015de:	f107 031c 	add.w	r3, r7, #28
 80015e2:	4619      	mov	r1, r3
 80015e4:	480b      	ldr	r0, [pc, #44]	; (8001614 <MX_GPIO_Init+0x13c>)
 80015e6:	f000 fec7 	bl	8002378 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80015ea:	2380      	movs	r3, #128	; 0x80
 80015ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ee:	2300      	movs	r3, #0
 80015f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80015f6:	f107 031c 	add.w	r3, r7, #28
 80015fa:	4619      	mov	r1, r3
 80015fc:	4805      	ldr	r0, [pc, #20]	; (8001614 <MX_GPIO_Init+0x13c>)
 80015fe:	f000 febb 	bl	8002378 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001602:	bf00      	nop
 8001604:	3730      	adds	r7, #48	; 0x30
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40023800 	.word	0x40023800
 8001610:	40020400 	.word	0x40020400
 8001614:	40021800 	.word	0x40021800
 8001618:	40020800 	.word	0x40020800

0800161c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001620:	b672      	cpsid	i
}
 8001622:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001624:	e7fe      	b.n	8001624 <Error_Handler+0x8>
	...

08001628 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800162e:	4b0f      	ldr	r3, [pc, #60]	; (800166c <HAL_MspInit+0x44>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	4a0e      	ldr	r2, [pc, #56]	; (800166c <HAL_MspInit+0x44>)
 8001634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001638:	6413      	str	r3, [r2, #64]	; 0x40
 800163a:	4b0c      	ldr	r3, [pc, #48]	; (800166c <HAL_MspInit+0x44>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <HAL_MspInit+0x44>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	4a08      	ldr	r2, [pc, #32]	; (800166c <HAL_MspInit+0x44>)
 800164c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001650:	6453      	str	r3, [r2, #68]	; 0x44
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_MspInit+0x44>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800165a:	603b      	str	r3, [r7, #0]
 800165c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	40023800 	.word	0x40023800

08001670 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08e      	sub	sp, #56	; 0x38
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a4e      	ldr	r2, [pc, #312]	; (80017c8 <HAL_ETH_MspInit+0x158>)
 800168e:	4293      	cmp	r3, r2
 8001690:	f040 8096 	bne.w	80017c0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001694:	4b4d      	ldr	r3, [pc, #308]	; (80017cc <HAL_ETH_MspInit+0x15c>)
 8001696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001698:	4a4c      	ldr	r2, [pc, #304]	; (80017cc <HAL_ETH_MspInit+0x15c>)
 800169a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800169e:	6313      	str	r3, [r2, #48]	; 0x30
 80016a0:	4b4a      	ldr	r3, [pc, #296]	; (80017cc <HAL_ETH_MspInit+0x15c>)
 80016a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a8:	623b      	str	r3, [r7, #32]
 80016aa:	6a3b      	ldr	r3, [r7, #32]
 80016ac:	4b47      	ldr	r3, [pc, #284]	; (80017cc <HAL_ETH_MspInit+0x15c>)
 80016ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b0:	4a46      	ldr	r2, [pc, #280]	; (80017cc <HAL_ETH_MspInit+0x15c>)
 80016b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80016b6:	6313      	str	r3, [r2, #48]	; 0x30
 80016b8:	4b44      	ldr	r3, [pc, #272]	; (80017cc <HAL_ETH_MspInit+0x15c>)
 80016ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016c0:	61fb      	str	r3, [r7, #28]
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	4b41      	ldr	r3, [pc, #260]	; (80017cc <HAL_ETH_MspInit+0x15c>)
 80016c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c8:	4a40      	ldr	r2, [pc, #256]	; (80017cc <HAL_ETH_MspInit+0x15c>)
 80016ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80016ce:	6313      	str	r3, [r2, #48]	; 0x30
 80016d0:	4b3e      	ldr	r3, [pc, #248]	; (80017cc <HAL_ETH_MspInit+0x15c>)
 80016d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80016d8:	61bb      	str	r3, [r7, #24]
 80016da:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016dc:	4b3b      	ldr	r3, [pc, #236]	; (80017cc <HAL_ETH_MspInit+0x15c>)
 80016de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e0:	4a3a      	ldr	r2, [pc, #232]	; (80017cc <HAL_ETH_MspInit+0x15c>)
 80016e2:	f043 0304 	orr.w	r3, r3, #4
 80016e6:	6313      	str	r3, [r2, #48]	; 0x30
 80016e8:	4b38      	ldr	r3, [pc, #224]	; (80017cc <HAL_ETH_MspInit+0x15c>)
 80016ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f4:	4b35      	ldr	r3, [pc, #212]	; (80017cc <HAL_ETH_MspInit+0x15c>)
 80016f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f8:	4a34      	ldr	r2, [pc, #208]	; (80017cc <HAL_ETH_MspInit+0x15c>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001700:	4b32      	ldr	r3, [pc, #200]	; (80017cc <HAL_ETH_MspInit+0x15c>)
 8001702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800170c:	4b2f      	ldr	r3, [pc, #188]	; (80017cc <HAL_ETH_MspInit+0x15c>)
 800170e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001710:	4a2e      	ldr	r2, [pc, #184]	; (80017cc <HAL_ETH_MspInit+0x15c>)
 8001712:	f043 0302 	orr.w	r3, r3, #2
 8001716:	6313      	str	r3, [r2, #48]	; 0x30
 8001718:	4b2c      	ldr	r3, [pc, #176]	; (80017cc <HAL_ETH_MspInit+0x15c>)
 800171a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001724:	4b29      	ldr	r3, [pc, #164]	; (80017cc <HAL_ETH_MspInit+0x15c>)
 8001726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001728:	4a28      	ldr	r2, [pc, #160]	; (80017cc <HAL_ETH_MspInit+0x15c>)
 800172a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800172e:	6313      	str	r3, [r2, #48]	; 0x30
 8001730:	4b26      	ldr	r3, [pc, #152]	; (80017cc <HAL_ETH_MspInit+0x15c>)
 8001732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800173c:	2332      	movs	r3, #50	; 0x32
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001740:	2302      	movs	r3, #2
 8001742:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001748:	2303      	movs	r3, #3
 800174a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800174c:	230b      	movs	r3, #11
 800174e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001754:	4619      	mov	r1, r3
 8001756:	481e      	ldr	r0, [pc, #120]	; (80017d0 <HAL_ETH_MspInit+0x160>)
 8001758:	f000 fe0e 	bl	8002378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800175c:	2386      	movs	r3, #134	; 0x86
 800175e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001760:	2302      	movs	r3, #2
 8001762:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001768:	2303      	movs	r3, #3
 800176a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800176c:	230b      	movs	r3, #11
 800176e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001774:	4619      	mov	r1, r3
 8001776:	4817      	ldr	r0, [pc, #92]	; (80017d4 <HAL_ETH_MspInit+0x164>)
 8001778:	f000 fdfe 	bl	8002378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800177c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178a:	2303      	movs	r3, #3
 800178c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800178e:	230b      	movs	r3, #11
 8001790:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001796:	4619      	mov	r1, r3
 8001798:	480f      	ldr	r0, [pc, #60]	; (80017d8 <HAL_ETH_MspInit+0x168>)
 800179a:	f000 fded 	bl	8002378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800179e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a4:	2302      	movs	r3, #2
 80017a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ac:	2303      	movs	r3, #3
 80017ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017b0:	230b      	movs	r3, #11
 80017b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b8:	4619      	mov	r1, r3
 80017ba:	4808      	ldr	r0, [pc, #32]	; (80017dc <HAL_ETH_MspInit+0x16c>)
 80017bc:	f000 fddc 	bl	8002378 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80017c0:	bf00      	nop
 80017c2:	3738      	adds	r7, #56	; 0x38
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40028000 	.word	0x40028000
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40020800 	.word	0x40020800
 80017d4:	40020000 	.word	0x40020000
 80017d8:	40020400 	.word	0x40020400
 80017dc:	40021800 	.word	0x40021800

080017e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b0ae      	sub	sp, #184	; 0xb8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017f8:	f107 0314 	add.w	r3, r7, #20
 80017fc:	2290      	movs	r2, #144	; 0x90
 80017fe:	2100      	movs	r1, #0
 8001800:	4618      	mov	r0, r3
 8001802:	f003 f9a3 	bl	8004b4c <memset>
  if(huart->Instance==USART3)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a22      	ldr	r2, [pc, #136]	; (8001894 <HAL_UART_MspInit+0xb4>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d13c      	bne.n	800188a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001810:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001814:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001816:	2300      	movs	r3, #0
 8001818:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800181a:	f107 0314 	add.w	r3, r7, #20
 800181e:	4618      	mov	r0, r3
 8001820:	f001 fdec 	bl	80033fc <HAL_RCCEx_PeriphCLKConfig>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800182a:	f7ff fef7 	bl	800161c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800182e:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <HAL_UART_MspInit+0xb8>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	4a19      	ldr	r2, [pc, #100]	; (8001898 <HAL_UART_MspInit+0xb8>)
 8001834:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001838:	6413      	str	r3, [r2, #64]	; 0x40
 800183a:	4b17      	ldr	r3, [pc, #92]	; (8001898 <HAL_UART_MspInit+0xb8>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001842:	613b      	str	r3, [r7, #16]
 8001844:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001846:	4b14      	ldr	r3, [pc, #80]	; (8001898 <HAL_UART_MspInit+0xb8>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4a13      	ldr	r2, [pc, #76]	; (8001898 <HAL_UART_MspInit+0xb8>)
 800184c:	f043 0308 	orr.w	r3, r3, #8
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b11      	ldr	r3, [pc, #68]	; (8001898 <HAL_UART_MspInit+0xb8>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f003 0308 	and.w	r3, r3, #8
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800185e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001862:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001866:	2302      	movs	r3, #2
 8001868:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001872:	2303      	movs	r3, #3
 8001874:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001878:	2307      	movs	r3, #7
 800187a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800187e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001882:	4619      	mov	r1, r3
 8001884:	4805      	ldr	r0, [pc, #20]	; (800189c <HAL_UART_MspInit+0xbc>)
 8001886:	f000 fd77 	bl	8002378 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800188a:	bf00      	nop
 800188c:	37b8      	adds	r7, #184	; 0xb8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40004800 	.word	0x40004800
 8001898:	40023800 	.word	0x40023800
 800189c:	40020c00 	.word	0x40020c00

080018a0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b0ae      	sub	sp, #184	; 0xb8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	2290      	movs	r2, #144	; 0x90
 80018be:	2100      	movs	r1, #0
 80018c0:	4618      	mov	r0, r3
 80018c2:	f003 f943 	bl	8004b4c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018ce:	d159      	bne.n	8001984 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80018d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80018d4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	4618      	mov	r0, r3
 80018e2:	f001 fd8b 	bl	80033fc <HAL_RCCEx_PeriphCLKConfig>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80018ec:	f7ff fe96 	bl	800161c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f0:	4b26      	ldr	r3, [pc, #152]	; (800198c <HAL_PCD_MspInit+0xec>)
 80018f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f4:	4a25      	ldr	r2, [pc, #148]	; (800198c <HAL_PCD_MspInit+0xec>)
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	6313      	str	r3, [r2, #48]	; 0x30
 80018fc:	4b23      	ldr	r3, [pc, #140]	; (800198c <HAL_PCD_MspInit+0xec>)
 80018fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001908:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800190c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001910:	2302      	movs	r3, #2
 8001912:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191c:	2303      	movs	r3, #3
 800191e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001922:	230a      	movs	r3, #10
 8001924:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001928:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800192c:	4619      	mov	r1, r3
 800192e:	4818      	ldr	r0, [pc, #96]	; (8001990 <HAL_PCD_MspInit+0xf0>)
 8001930:	f000 fd22 	bl	8002378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001934:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001938:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800193c:	2300      	movs	r3, #0
 800193e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001948:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800194c:	4619      	mov	r1, r3
 800194e:	4810      	ldr	r0, [pc, #64]	; (8001990 <HAL_PCD_MspInit+0xf0>)
 8001950:	f000 fd12 	bl	8002378 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001954:	4b0d      	ldr	r3, [pc, #52]	; (800198c <HAL_PCD_MspInit+0xec>)
 8001956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001958:	4a0c      	ldr	r2, [pc, #48]	; (800198c <HAL_PCD_MspInit+0xec>)
 800195a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800195e:	6353      	str	r3, [r2, #52]	; 0x34
 8001960:	4b0a      	ldr	r3, [pc, #40]	; (800198c <HAL_PCD_MspInit+0xec>)
 8001962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	4b07      	ldr	r3, [pc, #28]	; (800198c <HAL_PCD_MspInit+0xec>)
 800196e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001970:	4a06      	ldr	r2, [pc, #24]	; (800198c <HAL_PCD_MspInit+0xec>)
 8001972:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001976:	6453      	str	r3, [r2, #68]	; 0x44
 8001978:	4b04      	ldr	r3, [pc, #16]	; (800198c <HAL_PCD_MspInit+0xec>)
 800197a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001984:	bf00      	nop
 8001986:	37b8      	adds	r7, #184	; 0xb8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40023800 	.word	0x40023800
 8001990:	40020000 	.word	0x40020000

08001994 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001998:	e7fe      	b.n	8001998 <NMI_Handler+0x4>

0800199a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800199e:	e7fe      	b.n	800199e <HardFault_Handler+0x4>

080019a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <MemManage_Handler+0x4>

080019a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019aa:	e7fe      	b.n	80019aa <BusFault_Handler+0x4>

080019ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019b0:	e7fe      	b.n	80019b0 <UsageFault_Handler+0x4>

080019b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019e0:	f000 f87a 	bl	8001ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <SystemInit+0x20>)
 80019ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019f2:	4a05      	ldr	r2, [pc, #20]	; (8001a08 <SystemInit+0x20>)
 80019f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a10:	480d      	ldr	r0, [pc, #52]	; (8001a48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a12:	490e      	ldr	r1, [pc, #56]	; (8001a4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a14:	4a0e      	ldr	r2, [pc, #56]	; (8001a50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a18:	e002      	b.n	8001a20 <LoopCopyDataInit>

08001a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a1e:	3304      	adds	r3, #4

08001a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a24:	d3f9      	bcc.n	8001a1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a26:	4a0b      	ldr	r2, [pc, #44]	; (8001a54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a28:	4c0b      	ldr	r4, [pc, #44]	; (8001a58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a2c:	e001      	b.n	8001a32 <LoopFillZerobss>

08001a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a30:	3204      	adds	r2, #4

08001a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a34:	d3fb      	bcc.n	8001a2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a36:	f7ff ffd7 	bl	80019e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a3a:	f003 f863 	bl	8004b04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a3e:	f7ff fbb5 	bl	80011ac <main>
  bx  lr    
 8001a42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a44:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a4c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001a50:	08004b9c 	.word	0x08004b9c
  ldr r2, =_sbss
 8001a54:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8001a58:	20005810 	.word	0x20005810

08001a5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a5c:	e7fe      	b.n	8001a5c <ADC_IRQHandler>

08001a5e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a62:	2003      	movs	r0, #3
 8001a64:	f000 f92e 	bl	8001cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a68:	2000      	movs	r0, #0
 8001a6a:	f000 f805 	bl	8001a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a6e:	f7ff fddb 	bl	8001628 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a80:	4b12      	ldr	r3, [pc, #72]	; (8001acc <HAL_InitTick+0x54>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <HAL_InitTick+0x58>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 f93b 	bl	8001d12 <HAL_SYSTICK_Config>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e00e      	b.n	8001ac4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b0f      	cmp	r3, #15
 8001aaa:	d80a      	bhi.n	8001ac2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aac:	2200      	movs	r2, #0
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab4:	f000 f911 	bl	8001cda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ab8:	4a06      	ldr	r2, [pc, #24]	; (8001ad4 <HAL_InitTick+0x5c>)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	e000      	b.n	8001ac4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20000004 	.word	0x20000004
 8001ad0:	2000000c 	.word	0x2000000c
 8001ad4:	20000008 	.word	0x20000008

08001ad8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <HAL_IncTick+0x20>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4b06      	ldr	r3, [pc, #24]	; (8001afc <HAL_IncTick+0x24>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	4a04      	ldr	r2, [pc, #16]	; (8001afc <HAL_IncTick+0x24>)
 8001aea:	6013      	str	r3, [r2, #0]
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	2000000c 	.word	0x2000000c
 8001afc:	2000580c 	.word	0x2000580c

08001b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return uwTick;
 8001b04:	4b03      	ldr	r3, [pc, #12]	; (8001b14 <HAL_GetTick+0x14>)
 8001b06:	681b      	ldr	r3, [r3, #0]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	2000580c 	.word	0x2000580c

08001b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b20:	f7ff ffee 	bl	8001b00 <HAL_GetTick>
 8001b24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b30:	d005      	beq.n	8001b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b32:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <HAL_Delay+0x44>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	461a      	mov	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b3e:	bf00      	nop
 8001b40:	f7ff ffde 	bl	8001b00 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d8f7      	bhi.n	8001b40 <HAL_Delay+0x28>
  {
  }
}
 8001b50:	bf00      	nop
 8001b52:	bf00      	nop
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	2000000c 	.word	0x2000000c

08001b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b70:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <__NVIC_SetPriorityGrouping+0x40>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b76:	68ba      	ldr	r2, [r7, #8]
 8001b78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b8e:	4a04      	ldr	r2, [pc, #16]	; (8001ba0 <__NVIC_SetPriorityGrouping+0x40>)
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	60d3      	str	r3, [r2, #12]
}
 8001b94:	bf00      	nop
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e000ed00 	.word	0xe000ed00
 8001ba4:	05fa0000 	.word	0x05fa0000

08001ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bac:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	0a1b      	lsrs	r3, r3, #8
 8001bb2:	f003 0307 	and.w	r3, r3, #7
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	6039      	str	r1, [r7, #0]
 8001bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	db0a      	blt.n	8001bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	490c      	ldr	r1, [pc, #48]	; (8001c10 <__NVIC_SetPriority+0x4c>)
 8001bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be2:	0112      	lsls	r2, r2, #4
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	440b      	add	r3, r1
 8001be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bec:	e00a      	b.n	8001c04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4908      	ldr	r1, [pc, #32]	; (8001c14 <__NVIC_SetPriority+0x50>)
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	3b04      	subs	r3, #4
 8001bfc:	0112      	lsls	r2, r2, #4
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	440b      	add	r3, r1
 8001c02:	761a      	strb	r2, [r3, #24]
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	e000e100 	.word	0xe000e100
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b089      	sub	sp, #36	; 0x24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f1c3 0307 	rsb	r3, r3, #7
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	bf28      	it	cs
 8001c36:	2304      	movcs	r3, #4
 8001c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	2b06      	cmp	r3, #6
 8001c40:	d902      	bls.n	8001c48 <NVIC_EncodePriority+0x30>
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3b03      	subs	r3, #3
 8001c46:	e000      	b.n	8001c4a <NVIC_EncodePriority+0x32>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43da      	mvns	r2, r3
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c60:	f04f 31ff 	mov.w	r1, #4294967295
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6a:	43d9      	mvns	r1, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c70:	4313      	orrs	r3, r2
         );
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3724      	adds	r7, #36	; 0x24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
	...

08001c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c90:	d301      	bcc.n	8001c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c92:	2301      	movs	r3, #1
 8001c94:	e00f      	b.n	8001cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c96:	4a0a      	ldr	r2, [pc, #40]	; (8001cc0 <SysTick_Config+0x40>)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c9e:	210f      	movs	r1, #15
 8001ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca4:	f7ff ff8e 	bl	8001bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca8:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <SysTick_Config+0x40>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cae:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <SysTick_Config+0x40>)
 8001cb0:	2207      	movs	r2, #7
 8001cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	e000e010 	.word	0xe000e010

08001cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff ff47 	bl	8001b60 <__NVIC_SetPriorityGrouping>
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b086      	sub	sp, #24
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	60b9      	str	r1, [r7, #8]
 8001ce4:	607a      	str	r2, [r7, #4]
 8001ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cec:	f7ff ff5c 	bl	8001ba8 <__NVIC_GetPriorityGrouping>
 8001cf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	68b9      	ldr	r1, [r7, #8]
 8001cf6:	6978      	ldr	r0, [r7, #20]
 8001cf8:	f7ff ff8e 	bl	8001c18 <NVIC_EncodePriority>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d02:	4611      	mov	r1, r2
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff ff5d 	bl	8001bc4 <__NVIC_SetPriority>
}
 8001d0a:	bf00      	nop
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7ff ffb0 	bl	8001c80 <SysTick_Config>
 8001d20:	4603      	mov	r3, r0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e06a      	b.n	8001e14 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d106      	bne.n	8001d56 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2223      	movs	r2, #35	; 0x23
 8001d4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff fc8d 	bl	8001670 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d56:	4b31      	ldr	r3, [pc, #196]	; (8001e1c <HAL_ETH_Init+0xf0>)
 8001d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5a:	4a30      	ldr	r2, [pc, #192]	; (8001e1c <HAL_ETH_Init+0xf0>)
 8001d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d60:	6453      	str	r3, [r2, #68]	; 0x44
 8001d62:	4b2e      	ldr	r3, [pc, #184]	; (8001e1c <HAL_ETH_Init+0xf0>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d6a:	60bb      	str	r3, [r7, #8]
 8001d6c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001d6e:	4b2c      	ldr	r3, [pc, #176]	; (8001e20 <HAL_ETH_Init+0xf4>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	4a2b      	ldr	r2, [pc, #172]	; (8001e20 <HAL_ETH_Init+0xf4>)
 8001d74:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001d78:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001d7a:	4b29      	ldr	r3, [pc, #164]	; (8001e20 <HAL_ETH_Init+0xf4>)
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	4927      	ldr	r1, [pc, #156]	; (8001e20 <HAL_ETH_Init+0xf4>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001d88:	4b25      	ldr	r3, [pc, #148]	; (8001e20 <HAL_ETH_Init+0xf4>)
 8001d8a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6812      	ldr	r2, [r2, #0]
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001da2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001da4:	f7ff feac 	bl	8001b00 <HAL_GetTick>
 8001da8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001daa:	e011      	b.n	8001dd0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001dac:	f7ff fea8 	bl	8001b00 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001dba:	d909      	bls.n	8001dd0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2204      	movs	r2, #4
 8001dc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	22e0      	movs	r2, #224	; 0xe0
 8001dc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e021      	b.n	8001e14 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1e4      	bne.n	8001dac <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f958 	bl	8002098 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 f9ff 	bl	80021ec <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 fa55 	bl	800229e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 f9bd 	bl	800217c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2210      	movs	r2, #16
 8001e0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40013800 	.word	0x40013800

08001e24 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	4b51      	ldr	r3, [pc, #324]	; (8001f80 <ETH_SetMACConfig+0x15c>)
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	7c1b      	ldrb	r3, [r3, #16]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d102      	bne.n	8001e4c <ETH_SetMACConfig+0x28>
 8001e46:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001e4a:	e000      	b.n	8001e4e <ETH_SetMACConfig+0x2a>
 8001e4c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	7c5b      	ldrb	r3, [r3, #17]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d102      	bne.n	8001e5c <ETH_SetMACConfig+0x38>
 8001e56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e5a:	e000      	b.n	8001e5e <ETH_SetMACConfig+0x3a>
 8001e5c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e5e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001e64:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	7fdb      	ldrb	r3, [r3, #31]
 8001e6a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001e6c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001e72:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	7f92      	ldrb	r2, [r2, #30]
 8001e78:	2a00      	cmp	r2, #0
 8001e7a:	d102      	bne.n	8001e82 <ETH_SetMACConfig+0x5e>
 8001e7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e80:	e000      	b.n	8001e84 <ETH_SetMACConfig+0x60>
 8001e82:	2200      	movs	r2, #0
                        macconf->Speed |
 8001e84:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	7f1b      	ldrb	r3, [r3, #28]
 8001e8a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001e8c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001e92:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	791b      	ldrb	r3, [r3, #4]
 8001e98:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001e9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001ea2:	2a00      	cmp	r2, #0
 8001ea4:	d102      	bne.n	8001eac <ETH_SetMACConfig+0x88>
 8001ea6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eaa:	e000      	b.n	8001eae <ETH_SetMACConfig+0x8a>
 8001eac:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001eae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	7bdb      	ldrb	r3, [r3, #15]
 8001eb4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001eb6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001ebc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ec4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ede:	2001      	movs	r0, #1
 8001ee0:	f7ff fe1a 	bl	8001b18 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001efa:	4013      	ands	r3, r2
 8001efc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f02:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001f0a:	2a00      	cmp	r2, #0
 8001f0c:	d101      	bne.n	8001f12 <ETH_SetMACConfig+0xee>
 8001f0e:	2280      	movs	r2, #128	; 0x80
 8001f10:	e000      	b.n	8001f14 <ETH_SetMACConfig+0xf0>
 8001f12:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f14:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f1a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001f22:	2a01      	cmp	r2, #1
 8001f24:	d101      	bne.n	8001f2a <ETH_SetMACConfig+0x106>
 8001f26:	2208      	movs	r2, #8
 8001f28:	e000      	b.n	8001f2c <ETH_SetMACConfig+0x108>
 8001f2a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001f2c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001f34:	2a01      	cmp	r2, #1
 8001f36:	d101      	bne.n	8001f3c <ETH_SetMACConfig+0x118>
 8001f38:	2204      	movs	r2, #4
 8001f3a:	e000      	b.n	8001f3e <ETH_SetMACConfig+0x11a>
 8001f3c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f3e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001f46:	2a01      	cmp	r2, #1
 8001f48:	d101      	bne.n	8001f4e <ETH_SetMACConfig+0x12a>
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	e000      	b.n	8001f50 <ETH_SetMACConfig+0x12c>
 8001f4e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f50:	4313      	orrs	r3, r2
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f68:	2001      	movs	r0, #1
 8001f6a:	f7ff fdd5 	bl	8001b18 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	619a      	str	r2, [r3, #24]
}
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	ff20810f 	.word	0xff20810f

08001f84 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	4b3d      	ldr	r3, [pc, #244]	; (8002094 <ETH_SetDMAConfig+0x110>)
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	7b1b      	ldrb	r3, [r3, #12]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d102      	bne.n	8001fb0 <ETH_SetDMAConfig+0x2c>
 8001faa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001fae:	e000      	b.n	8001fb2 <ETH_SetDMAConfig+0x2e>
 8001fb0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	7b5b      	ldrb	r3, [r3, #13]
 8001fb6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001fb8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	7f52      	ldrb	r2, [r2, #29]
 8001fbe:	2a00      	cmp	r2, #0
 8001fc0:	d102      	bne.n	8001fc8 <ETH_SetDMAConfig+0x44>
 8001fc2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001fc6:	e000      	b.n	8001fca <ETH_SetDMAConfig+0x46>
 8001fc8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001fca:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	7b9b      	ldrb	r3, [r3, #14]
 8001fd0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001fd2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001fd8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	7f1b      	ldrb	r3, [r3, #28]
 8001fde:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001fe0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	7f9b      	ldrb	r3, [r3, #30]
 8001fe6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001fe8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001fee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ff6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002008:	461a      	mov	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800201a:	2001      	movs	r0, #1
 800201c:	f7ff fd7c 	bl	8001b18 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002028:	461a      	mov	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	791b      	ldrb	r3, [r3, #4]
 8002032:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002038:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800203e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002044:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800204c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800204e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002054:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002056:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800205c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6812      	ldr	r2, [r2, #0]
 8002062:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002066:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800206a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002078:	2001      	movs	r0, #1
 800207a:	f7ff fd4d 	bl	8001b18 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002086:	461a      	mov	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6013      	str	r3, [r2, #0]
}
 800208c:	bf00      	nop
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	f8de3f23 	.word	0xf8de3f23

08002098 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b0a6      	sub	sp, #152	; 0x98
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80020a0:	2301      	movs	r3, #1
 80020a2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80020a6:	2301      	movs	r3, #1
 80020a8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80020ac:	2300      	movs	r3, #0
 80020ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80020b0:	2300      	movs	r3, #0
 80020b2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80020b6:	2301      	movs	r3, #1
 80020b8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80020bc:	2300      	movs	r3, #0
 80020be:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80020c2:	2301      	movs	r3, #1
 80020c4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80020c8:	2300      	movs	r3, #0
 80020ca:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80020ce:	2300      	movs	r3, #0
 80020d0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80020d4:	2300      	movs	r3, #0
 80020d6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80020d8:	2300      	movs	r3, #0
 80020da:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80020de:	2300      	movs	r3, #0
 80020e0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80020e2:	2300      	movs	r3, #0
 80020e4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80020e8:	2300      	movs	r3, #0
 80020ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80020ee:	2300      	movs	r3, #0
 80020f0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80020f4:	2300      	movs	r3, #0
 80020f6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80020fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020fe:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002100:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002104:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002106:	2300      	movs	r3, #0
 8002108:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800210c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002110:	4619      	mov	r1, r3
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff fe86 	bl	8001e24 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002118:	2301      	movs	r3, #1
 800211a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800211c:	2301      	movs	r3, #1
 800211e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002120:	2301      	movs	r3, #1
 8002122:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002126:	2301      	movs	r3, #1
 8002128:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800212a:	2300      	movs	r3, #0
 800212c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800212e:	2300      	movs	r3, #0
 8002130:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002134:	2300      	movs	r3, #0
 8002136:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800213a:	2300      	movs	r3, #0
 800213c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800213e:	2301      	movs	r3, #1
 8002140:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002144:	2301      	movs	r3, #1
 8002146:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002148:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800214c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800214e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002152:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002154:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002158:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800215a:	2301      	movs	r3, #1
 800215c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002160:	2300      	movs	r3, #0
 8002162:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002164:	2300      	movs	r3, #0
 8002166:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002168:	f107 0308 	add.w	r3, r7, #8
 800216c:	4619      	mov	r1, r3
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff ff08 	bl	8001f84 <ETH_SetDMAConfig>
}
 8002174:	bf00      	nop
 8002176:	3798      	adds	r7, #152	; 0x98
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800217c:	b480      	push	{r7}
 800217e:	b087      	sub	sp, #28
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3305      	adds	r3, #5
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	021b      	lsls	r3, r3, #8
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	3204      	adds	r2, #4
 8002194:	7812      	ldrb	r2, [r2, #0]
 8002196:	4313      	orrs	r3, r2
 8002198:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <ETH_MACAddressConfig+0x68>)
 800219e:	4413      	add	r3, r2
 80021a0:	461a      	mov	r2, r3
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	3303      	adds	r3, #3
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	061a      	lsls	r2, r3, #24
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3302      	adds	r3, #2
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	041b      	lsls	r3, r3, #16
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3301      	adds	r3, #1
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	021b      	lsls	r3, r3, #8
 80021c0:	4313      	orrs	r3, r2
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	7812      	ldrb	r2, [r2, #0]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <ETH_MACAddressConfig+0x6c>)
 80021ce:	4413      	add	r3, r2
 80021d0:	461a      	mov	r2, r3
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	6013      	str	r3, [r2, #0]
}
 80021d6:	bf00      	nop
 80021d8:	371c      	adds	r7, #28
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	40028040 	.word	0x40028040
 80021e8:	40028044 	.word	0x40028044

080021ec <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80021f4:	2300      	movs	r3, #0
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	e03e      	b.n	8002278 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68d9      	ldr	r1, [r3, #12]
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	440b      	add	r3, r1
 800220a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	2200      	movs	r2, #0
 8002216:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2200      	movs	r2, #0
 800221c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2200      	movs	r2, #0
 8002222:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002224:	68b9      	ldr	r1, [r7, #8]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	3206      	adds	r2, #6
 800222c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2b02      	cmp	r3, #2
 8002240:	d80c      	bhi.n	800225c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68d9      	ldr	r1, [r3, #12]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1c5a      	adds	r2, r3, #1
 800224a:	4613      	mov	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	440b      	add	r3, r1
 8002254:	461a      	mov	r2, r3
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	e004      	b.n	8002266 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	461a      	mov	r2, r3
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	3301      	adds	r3, #1
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2b03      	cmp	r3, #3
 800227c:	d9bd      	bls.n	80021fa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68da      	ldr	r2, [r3, #12]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002290:	611a      	str	r2, [r3, #16]
}
 8002292:	bf00      	nop
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800229e:	b480      	push	{r7}
 80022a0:	b085      	sub	sp, #20
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	e046      	b.n	800233a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6919      	ldr	r1, [r3, #16]
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	440b      	add	r3, r1
 80022bc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	2200      	movs	r2, #0
 80022c8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	2200      	movs	r2, #0
 80022ce:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2200      	movs	r2, #0
 80022d4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	2200      	movs	r2, #0
 80022da:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	2200      	movs	r2, #0
 80022e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80022e8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80022f0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80022fe:	68b9      	ldr	r1, [r7, #8]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	3212      	adds	r2, #18
 8002306:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2b02      	cmp	r3, #2
 800230e:	d80c      	bhi.n	800232a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6919      	ldr	r1, [r3, #16]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	1c5a      	adds	r2, r3, #1
 8002318:	4613      	mov	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	440b      	add	r3, r1
 8002322:	461a      	mov	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	60da      	str	r2, [r3, #12]
 8002328:	e004      	b.n	8002334 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	461a      	mov	r2, r3
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	3301      	adds	r3, #1
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2b03      	cmp	r3, #3
 800233e:	d9b5      	bls.n	80022ac <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	691a      	ldr	r2, [r3, #16]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800236a:	60da      	str	r2, [r3, #12]
}
 800236c:	bf00      	nop
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002378:	b480      	push	{r7}
 800237a:	b089      	sub	sp, #36	; 0x24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002386:	2300      	movs	r3, #0
 8002388:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800238a:	2300      	movs	r3, #0
 800238c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800238e:	2300      	movs	r3, #0
 8002390:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
 8002396:	e175      	b.n	8002684 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002398:	2201      	movs	r2, #1
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	4013      	ands	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	f040 8164 	bne.w	800267e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d005      	beq.n	80023ce <HAL_GPIO_Init+0x56>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d130      	bne.n	8002430 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	2203      	movs	r2, #3
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43db      	mvns	r3, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4013      	ands	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002404:	2201      	movs	r2, #1
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	091b      	lsrs	r3, r3, #4
 800241a:	f003 0201 	and.w	r2, r3, #1
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 0303 	and.w	r3, r3, #3
 8002438:	2b03      	cmp	r3, #3
 800243a:	d017      	beq.n	800246c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	2203      	movs	r2, #3
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4313      	orrs	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d123      	bne.n	80024c0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	08da      	lsrs	r2, r3, #3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3208      	adds	r2, #8
 8002480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	220f      	movs	r2, #15
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	691a      	ldr	r2, [r3, #16]
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	08da      	lsrs	r2, r3, #3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	3208      	adds	r2, #8
 80024ba:	69b9      	ldr	r1, [r7, #24]
 80024bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	2203      	movs	r2, #3
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 0203 	and.w	r2, r3, #3
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 80be 	beq.w	800267e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002502:	4b66      	ldr	r3, [pc, #408]	; (800269c <HAL_GPIO_Init+0x324>)
 8002504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002506:	4a65      	ldr	r2, [pc, #404]	; (800269c <HAL_GPIO_Init+0x324>)
 8002508:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800250c:	6453      	str	r3, [r2, #68]	; 0x44
 800250e:	4b63      	ldr	r3, [pc, #396]	; (800269c <HAL_GPIO_Init+0x324>)
 8002510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800251a:	4a61      	ldr	r2, [pc, #388]	; (80026a0 <HAL_GPIO_Init+0x328>)
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	089b      	lsrs	r3, r3, #2
 8002520:	3302      	adds	r3, #2
 8002522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002526:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	220f      	movs	r2, #15
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4013      	ands	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a58      	ldr	r2, [pc, #352]	; (80026a4 <HAL_GPIO_Init+0x32c>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d037      	beq.n	80025b6 <HAL_GPIO_Init+0x23e>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a57      	ldr	r2, [pc, #348]	; (80026a8 <HAL_GPIO_Init+0x330>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d031      	beq.n	80025b2 <HAL_GPIO_Init+0x23a>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a56      	ldr	r2, [pc, #344]	; (80026ac <HAL_GPIO_Init+0x334>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d02b      	beq.n	80025ae <HAL_GPIO_Init+0x236>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a55      	ldr	r2, [pc, #340]	; (80026b0 <HAL_GPIO_Init+0x338>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d025      	beq.n	80025aa <HAL_GPIO_Init+0x232>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a54      	ldr	r2, [pc, #336]	; (80026b4 <HAL_GPIO_Init+0x33c>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d01f      	beq.n	80025a6 <HAL_GPIO_Init+0x22e>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a53      	ldr	r2, [pc, #332]	; (80026b8 <HAL_GPIO_Init+0x340>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d019      	beq.n	80025a2 <HAL_GPIO_Init+0x22a>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a52      	ldr	r2, [pc, #328]	; (80026bc <HAL_GPIO_Init+0x344>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d013      	beq.n	800259e <HAL_GPIO_Init+0x226>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a51      	ldr	r2, [pc, #324]	; (80026c0 <HAL_GPIO_Init+0x348>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d00d      	beq.n	800259a <HAL_GPIO_Init+0x222>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a50      	ldr	r2, [pc, #320]	; (80026c4 <HAL_GPIO_Init+0x34c>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d007      	beq.n	8002596 <HAL_GPIO_Init+0x21e>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a4f      	ldr	r2, [pc, #316]	; (80026c8 <HAL_GPIO_Init+0x350>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d101      	bne.n	8002592 <HAL_GPIO_Init+0x21a>
 800258e:	2309      	movs	r3, #9
 8002590:	e012      	b.n	80025b8 <HAL_GPIO_Init+0x240>
 8002592:	230a      	movs	r3, #10
 8002594:	e010      	b.n	80025b8 <HAL_GPIO_Init+0x240>
 8002596:	2308      	movs	r3, #8
 8002598:	e00e      	b.n	80025b8 <HAL_GPIO_Init+0x240>
 800259a:	2307      	movs	r3, #7
 800259c:	e00c      	b.n	80025b8 <HAL_GPIO_Init+0x240>
 800259e:	2306      	movs	r3, #6
 80025a0:	e00a      	b.n	80025b8 <HAL_GPIO_Init+0x240>
 80025a2:	2305      	movs	r3, #5
 80025a4:	e008      	b.n	80025b8 <HAL_GPIO_Init+0x240>
 80025a6:	2304      	movs	r3, #4
 80025a8:	e006      	b.n	80025b8 <HAL_GPIO_Init+0x240>
 80025aa:	2303      	movs	r3, #3
 80025ac:	e004      	b.n	80025b8 <HAL_GPIO_Init+0x240>
 80025ae:	2302      	movs	r3, #2
 80025b0:	e002      	b.n	80025b8 <HAL_GPIO_Init+0x240>
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <HAL_GPIO_Init+0x240>
 80025b6:	2300      	movs	r3, #0
 80025b8:	69fa      	ldr	r2, [r7, #28]
 80025ba:	f002 0203 	and.w	r2, r2, #3
 80025be:	0092      	lsls	r2, r2, #2
 80025c0:	4093      	lsls	r3, r2
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80025c8:	4935      	ldr	r1, [pc, #212]	; (80026a0 <HAL_GPIO_Init+0x328>)
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	089b      	lsrs	r3, r3, #2
 80025ce:	3302      	adds	r3, #2
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025d6:	4b3d      	ldr	r3, [pc, #244]	; (80026cc <HAL_GPIO_Init+0x354>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	43db      	mvns	r3, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4013      	ands	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025fa:	4a34      	ldr	r2, [pc, #208]	; (80026cc <HAL_GPIO_Init+0x354>)
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002600:	4b32      	ldr	r3, [pc, #200]	; (80026cc <HAL_GPIO_Init+0x354>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	43db      	mvns	r3, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d003      	beq.n	8002624 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	4313      	orrs	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002624:	4a29      	ldr	r2, [pc, #164]	; (80026cc <HAL_GPIO_Init+0x354>)
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800262a:	4b28      	ldr	r3, [pc, #160]	; (80026cc <HAL_GPIO_Init+0x354>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	43db      	mvns	r3, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4013      	ands	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800264e:	4a1f      	ldr	r2, [pc, #124]	; (80026cc <HAL_GPIO_Init+0x354>)
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002654:	4b1d      	ldr	r3, [pc, #116]	; (80026cc <HAL_GPIO_Init+0x354>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d003      	beq.n	8002678 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	4313      	orrs	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002678:	4a14      	ldr	r2, [pc, #80]	; (80026cc <HAL_GPIO_Init+0x354>)
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	3301      	adds	r3, #1
 8002682:	61fb      	str	r3, [r7, #28]
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	2b0f      	cmp	r3, #15
 8002688:	f67f ae86 	bls.w	8002398 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800268c:	bf00      	nop
 800268e:	bf00      	nop
 8002690:	3724      	adds	r7, #36	; 0x24
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	40023800 	.word	0x40023800
 80026a0:	40013800 	.word	0x40013800
 80026a4:	40020000 	.word	0x40020000
 80026a8:	40020400 	.word	0x40020400
 80026ac:	40020800 	.word	0x40020800
 80026b0:	40020c00 	.word	0x40020c00
 80026b4:	40021000 	.word	0x40021000
 80026b8:	40021400 	.word	0x40021400
 80026bc:	40021800 	.word	0x40021800
 80026c0:	40021c00 	.word	0x40021c00
 80026c4:	40022000 	.word	0x40022000
 80026c8:	40022400 	.word	0x40022400
 80026cc:	40013c00 	.word	0x40013c00

080026d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	460b      	mov	r3, r1
 80026da:	807b      	strh	r3, [r7, #2]
 80026dc:	4613      	mov	r3, r2
 80026de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026e0:	787b      	ldrb	r3, [r7, #1]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026e6:	887a      	ldrh	r2, [r7, #2]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80026ec:	e003      	b.n	80026f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80026ee:	887b      	ldrh	r3, [r7, #2]
 80026f0:	041a      	lsls	r2, r3, #16
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	619a      	str	r2, [r3, #24]
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002702:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002704:	b08f      	sub	sp, #60	; 0x3c
 8002706:	af0a      	add	r7, sp, #40	; 0x28
 8002708:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e116      	b.n	8002942 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d106      	bne.n	8002734 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7ff f8b6 	bl	80018a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2203      	movs	r2, #3
 8002738:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002744:	2b00      	cmp	r3, #0
 8002746:	d102      	bne.n	800274e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f001 ff3a 	bl	80045cc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	603b      	str	r3, [r7, #0]
 800275e:	687e      	ldr	r6, [r7, #4]
 8002760:	466d      	mov	r5, sp
 8002762:	f106 0410 	add.w	r4, r6, #16
 8002766:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002768:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800276a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800276c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800276e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002772:	e885 0003 	stmia.w	r5, {r0, r1}
 8002776:	1d33      	adds	r3, r6, #4
 8002778:	cb0e      	ldmia	r3, {r1, r2, r3}
 800277a:	6838      	ldr	r0, [r7, #0]
 800277c:	f001 fece 	bl	800451c <USB_CoreInit>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d005      	beq.n	8002792 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2202      	movs	r2, #2
 800278a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e0d7      	b.n	8002942 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2100      	movs	r1, #0
 8002798:	4618      	mov	r0, r3
 800279a:	f001 ff28 	bl	80045ee <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800279e:	2300      	movs	r3, #0
 80027a0:	73fb      	strb	r3, [r7, #15]
 80027a2:	e04a      	b.n	800283a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80027a4:	7bfa      	ldrb	r2, [r7, #15]
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	4613      	mov	r3, r2
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	4413      	add	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	440b      	add	r3, r1
 80027b2:	333d      	adds	r3, #61	; 0x3d
 80027b4:	2201      	movs	r2, #1
 80027b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027b8:	7bfa      	ldrb	r2, [r7, #15]
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	4413      	add	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	333c      	adds	r3, #60	; 0x3c
 80027c8:	7bfa      	ldrb	r2, [r7, #15]
 80027ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80027cc:	7bfa      	ldrb	r2, [r7, #15]
 80027ce:	7bfb      	ldrb	r3, [r7, #15]
 80027d0:	b298      	uxth	r0, r3
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	4413      	add	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	3344      	adds	r3, #68	; 0x44
 80027e0:	4602      	mov	r2, r0
 80027e2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027e4:	7bfa      	ldrb	r2, [r7, #15]
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	4613      	mov	r3, r2
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	4413      	add	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	440b      	add	r3, r1
 80027f2:	3340      	adds	r3, #64	; 0x40
 80027f4:	2200      	movs	r2, #0
 80027f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80027f8:	7bfa      	ldrb	r2, [r7, #15]
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4413      	add	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	3348      	adds	r3, #72	; 0x48
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800280c:	7bfa      	ldrb	r2, [r7, #15]
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4413      	add	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	334c      	adds	r3, #76	; 0x4c
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002820:	7bfa      	ldrb	r2, [r7, #15]
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	4613      	mov	r3, r2
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	4413      	add	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	440b      	add	r3, r1
 800282e:	3354      	adds	r3, #84	; 0x54
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002834:	7bfb      	ldrb	r3, [r7, #15]
 8002836:	3301      	adds	r3, #1
 8002838:	73fb      	strb	r3, [r7, #15]
 800283a:	7bfa      	ldrb	r2, [r7, #15]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	429a      	cmp	r2, r3
 8002842:	d3af      	bcc.n	80027a4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002844:	2300      	movs	r3, #0
 8002846:	73fb      	strb	r3, [r7, #15]
 8002848:	e044      	b.n	80028d4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800284a:	7bfa      	ldrb	r2, [r7, #15]
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	4613      	mov	r3, r2
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	4413      	add	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	440b      	add	r3, r1
 8002858:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800285c:	2200      	movs	r2, #0
 800285e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002860:	7bfa      	ldrb	r2, [r7, #15]
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	4613      	mov	r3, r2
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	4413      	add	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	440b      	add	r3, r1
 800286e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002872:	7bfa      	ldrb	r2, [r7, #15]
 8002874:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002876:	7bfa      	ldrb	r2, [r7, #15]
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	4613      	mov	r3, r2
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	4413      	add	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	440b      	add	r3, r1
 8002884:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002888:	2200      	movs	r2, #0
 800288a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800288c:	7bfa      	ldrb	r2, [r7, #15]
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	4413      	add	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028a2:	7bfa      	ldrb	r2, [r7, #15]
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	4613      	mov	r3, r2
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	4413      	add	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	440b      	add	r3, r1
 80028b0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028b8:	7bfa      	ldrb	r2, [r7, #15]
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	4613      	mov	r3, r2
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	4413      	add	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
 80028d0:	3301      	adds	r3, #1
 80028d2:	73fb      	strb	r3, [r7, #15]
 80028d4:	7bfa      	ldrb	r2, [r7, #15]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d3b5      	bcc.n	800284a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	603b      	str	r3, [r7, #0]
 80028e4:	687e      	ldr	r6, [r7, #4]
 80028e6:	466d      	mov	r5, sp
 80028e8:	f106 0410 	add.w	r4, r6, #16
 80028ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80028fc:	1d33      	adds	r3, r6, #4
 80028fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002900:	6838      	ldr	r0, [r7, #0]
 8002902:	f001 fec1 	bl	8004688 <USB_DevInit>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d005      	beq.n	8002918 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2202      	movs	r2, #2
 8002910:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e014      	b.n	8002942 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	2b01      	cmp	r3, #1
 800292e:	d102      	bne.n	8002936 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f80b 	bl	800294c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f002 f87f 	bl	8004a3e <USB_DevDisconnect>

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800294c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800297a:	4b05      	ldr	r3, [pc, #20]	; (8002990 <HAL_PCDEx_ActivateLPM+0x44>)
 800297c:	4313      	orrs	r3, r2
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	10000003 	.word	0x10000003

08002994 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002998:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a04      	ldr	r2, [pc, #16]	; (80029b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800299e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a2:	6013      	str	r3, [r2, #0]
}
 80029a4:	bf00      	nop
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40007000 	.word	0x40007000

080029b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80029ba:	2300      	movs	r3, #0
 80029bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80029be:	4b23      	ldr	r3, [pc, #140]	; (8002a4c <HAL_PWREx_EnableOverDrive+0x98>)
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	4a22      	ldr	r2, [pc, #136]	; (8002a4c <HAL_PWREx_EnableOverDrive+0x98>)
 80029c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c8:	6413      	str	r3, [r2, #64]	; 0x40
 80029ca:	4b20      	ldr	r3, [pc, #128]	; (8002a4c <HAL_PWREx_EnableOverDrive+0x98>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d2:	603b      	str	r3, [r7, #0]
 80029d4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80029d6:	4b1e      	ldr	r3, [pc, #120]	; (8002a50 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a1d      	ldr	r2, [pc, #116]	; (8002a50 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029e2:	f7ff f88d 	bl	8001b00 <HAL_GetTick>
 80029e6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80029e8:	e009      	b.n	80029fe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80029ea:	f7ff f889 	bl	8001b00 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029f8:	d901      	bls.n	80029fe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e022      	b.n	8002a44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80029fe:	4b14      	ldr	r3, [pc, #80]	; (8002a50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a0a:	d1ee      	bne.n	80029ea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002a0c:	4b10      	ldr	r3, [pc, #64]	; (8002a50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a0f      	ldr	r2, [pc, #60]	; (8002a50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a16:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a18:	f7ff f872 	bl	8001b00 <HAL_GetTick>
 8002a1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a1e:	e009      	b.n	8002a34 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a20:	f7ff f86e 	bl	8001b00 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a2e:	d901      	bls.n	8002a34 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e007      	b.n	8002a44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a34:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a40:	d1ee      	bne.n	8002a20 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	40007000 	.word	0x40007000

08002a54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e29b      	b.n	8002fa2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 8087 	beq.w	8002b86 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a78:	4b96      	ldr	r3, [pc, #600]	; (8002cd4 <HAL_RCC_OscConfig+0x280>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 030c 	and.w	r3, r3, #12
 8002a80:	2b04      	cmp	r3, #4
 8002a82:	d00c      	beq.n	8002a9e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a84:	4b93      	ldr	r3, [pc, #588]	; (8002cd4 <HAL_RCC_OscConfig+0x280>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 030c 	and.w	r3, r3, #12
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	d112      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x62>
 8002a90:	4b90      	ldr	r3, [pc, #576]	; (8002cd4 <HAL_RCC_OscConfig+0x280>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a9c:	d10b      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a9e:	4b8d      	ldr	r3, [pc, #564]	; (8002cd4 <HAL_RCC_OscConfig+0x280>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d06c      	beq.n	8002b84 <HAL_RCC_OscConfig+0x130>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d168      	bne.n	8002b84 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e275      	b.n	8002fa2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002abe:	d106      	bne.n	8002ace <HAL_RCC_OscConfig+0x7a>
 8002ac0:	4b84      	ldr	r3, [pc, #528]	; (8002cd4 <HAL_RCC_OscConfig+0x280>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a83      	ldr	r2, [pc, #524]	; (8002cd4 <HAL_RCC_OscConfig+0x280>)
 8002ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	e02e      	b.n	8002b2c <HAL_RCC_OscConfig+0xd8>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10c      	bne.n	8002af0 <HAL_RCC_OscConfig+0x9c>
 8002ad6:	4b7f      	ldr	r3, [pc, #508]	; (8002cd4 <HAL_RCC_OscConfig+0x280>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a7e      	ldr	r2, [pc, #504]	; (8002cd4 <HAL_RCC_OscConfig+0x280>)
 8002adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ae0:	6013      	str	r3, [r2, #0]
 8002ae2:	4b7c      	ldr	r3, [pc, #496]	; (8002cd4 <HAL_RCC_OscConfig+0x280>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a7b      	ldr	r2, [pc, #492]	; (8002cd4 <HAL_RCC_OscConfig+0x280>)
 8002ae8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aec:	6013      	str	r3, [r2, #0]
 8002aee:	e01d      	b.n	8002b2c <HAL_RCC_OscConfig+0xd8>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002af8:	d10c      	bne.n	8002b14 <HAL_RCC_OscConfig+0xc0>
 8002afa:	4b76      	ldr	r3, [pc, #472]	; (8002cd4 <HAL_RCC_OscConfig+0x280>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a75      	ldr	r2, [pc, #468]	; (8002cd4 <HAL_RCC_OscConfig+0x280>)
 8002b00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	4b73      	ldr	r3, [pc, #460]	; (8002cd4 <HAL_RCC_OscConfig+0x280>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a72      	ldr	r2, [pc, #456]	; (8002cd4 <HAL_RCC_OscConfig+0x280>)
 8002b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	e00b      	b.n	8002b2c <HAL_RCC_OscConfig+0xd8>
 8002b14:	4b6f      	ldr	r3, [pc, #444]	; (8002cd4 <HAL_RCC_OscConfig+0x280>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a6e      	ldr	r2, [pc, #440]	; (8002cd4 <HAL_RCC_OscConfig+0x280>)
 8002b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b1e:	6013      	str	r3, [r2, #0]
 8002b20:	4b6c      	ldr	r3, [pc, #432]	; (8002cd4 <HAL_RCC_OscConfig+0x280>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a6b      	ldr	r2, [pc, #428]	; (8002cd4 <HAL_RCC_OscConfig+0x280>)
 8002b26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d013      	beq.n	8002b5c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b34:	f7fe ffe4 	bl	8001b00 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b3c:	f7fe ffe0 	bl	8001b00 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b64      	cmp	r3, #100	; 0x64
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e229      	b.n	8002fa2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b4e:	4b61      	ldr	r3, [pc, #388]	; (8002cd4 <HAL_RCC_OscConfig+0x280>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0f0      	beq.n	8002b3c <HAL_RCC_OscConfig+0xe8>
 8002b5a:	e014      	b.n	8002b86 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5c:	f7fe ffd0 	bl	8001b00 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b64:	f7fe ffcc 	bl	8001b00 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b64      	cmp	r3, #100	; 0x64
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e215      	b.n	8002fa2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b76:	4b57      	ldr	r3, [pc, #348]	; (8002cd4 <HAL_RCC_OscConfig+0x280>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f0      	bne.n	8002b64 <HAL_RCC_OscConfig+0x110>
 8002b82:	e000      	b.n	8002b86 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d069      	beq.n	8002c66 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b92:	4b50      	ldr	r3, [pc, #320]	; (8002cd4 <HAL_RCC_OscConfig+0x280>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 030c 	and.w	r3, r3, #12
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00b      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b9e:	4b4d      	ldr	r3, [pc, #308]	; (8002cd4 <HAL_RCC_OscConfig+0x280>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 030c 	and.w	r3, r3, #12
 8002ba6:	2b08      	cmp	r3, #8
 8002ba8:	d11c      	bne.n	8002be4 <HAL_RCC_OscConfig+0x190>
 8002baa:	4b4a      	ldr	r3, [pc, #296]	; (8002cd4 <HAL_RCC_OscConfig+0x280>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d116      	bne.n	8002be4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb6:	4b47      	ldr	r3, [pc, #284]	; (8002cd4 <HAL_RCC_OscConfig+0x280>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d005      	beq.n	8002bce <HAL_RCC_OscConfig+0x17a>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d001      	beq.n	8002bce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e1e9      	b.n	8002fa2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bce:	4b41      	ldr	r3, [pc, #260]	; (8002cd4 <HAL_RCC_OscConfig+0x280>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	493d      	ldr	r1, [pc, #244]	; (8002cd4 <HAL_RCC_OscConfig+0x280>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002be2:	e040      	b.n	8002c66 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d023      	beq.n	8002c34 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bec:	4b39      	ldr	r3, [pc, #228]	; (8002cd4 <HAL_RCC_OscConfig+0x280>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a38      	ldr	r2, [pc, #224]	; (8002cd4 <HAL_RCC_OscConfig+0x280>)
 8002bf2:	f043 0301 	orr.w	r3, r3, #1
 8002bf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf8:	f7fe ff82 	bl	8001b00 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c00:	f7fe ff7e 	bl	8001b00 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e1c7      	b.n	8002fa2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c12:	4b30      	ldr	r3, [pc, #192]	; (8002cd4 <HAL_RCC_OscConfig+0x280>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0f0      	beq.n	8002c00 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c1e:	4b2d      	ldr	r3, [pc, #180]	; (8002cd4 <HAL_RCC_OscConfig+0x280>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4929      	ldr	r1, [pc, #164]	; (8002cd4 <HAL_RCC_OscConfig+0x280>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	600b      	str	r3, [r1, #0]
 8002c32:	e018      	b.n	8002c66 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c34:	4b27      	ldr	r3, [pc, #156]	; (8002cd4 <HAL_RCC_OscConfig+0x280>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a26      	ldr	r2, [pc, #152]	; (8002cd4 <HAL_RCC_OscConfig+0x280>)
 8002c3a:	f023 0301 	bic.w	r3, r3, #1
 8002c3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c40:	f7fe ff5e 	bl	8001b00 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c48:	f7fe ff5a 	bl	8001b00 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e1a3      	b.n	8002fa2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c5a:	4b1e      	ldr	r3, [pc, #120]	; (8002cd4 <HAL_RCC_OscConfig+0x280>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1f0      	bne.n	8002c48 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d038      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d019      	beq.n	8002cae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c7a:	4b16      	ldr	r3, [pc, #88]	; (8002cd4 <HAL_RCC_OscConfig+0x280>)
 8002c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c7e:	4a15      	ldr	r2, [pc, #84]	; (8002cd4 <HAL_RCC_OscConfig+0x280>)
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c86:	f7fe ff3b 	bl	8001b00 <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c8c:	e008      	b.n	8002ca0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c8e:	f7fe ff37 	bl	8001b00 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e180      	b.n	8002fa2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ca0:	4b0c      	ldr	r3, [pc, #48]	; (8002cd4 <HAL_RCC_OscConfig+0x280>)
 8002ca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0f0      	beq.n	8002c8e <HAL_RCC_OscConfig+0x23a>
 8002cac:	e01a      	b.n	8002ce4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cae:	4b09      	ldr	r3, [pc, #36]	; (8002cd4 <HAL_RCC_OscConfig+0x280>)
 8002cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cb2:	4a08      	ldr	r2, [pc, #32]	; (8002cd4 <HAL_RCC_OscConfig+0x280>)
 8002cb4:	f023 0301 	bic.w	r3, r3, #1
 8002cb8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cba:	f7fe ff21 	bl	8001b00 <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc0:	e00a      	b.n	8002cd8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cc2:	f7fe ff1d 	bl	8001b00 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d903      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e166      	b.n	8002fa2 <HAL_RCC_OscConfig+0x54e>
 8002cd4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cd8:	4b92      	ldr	r3, [pc, #584]	; (8002f24 <HAL_RCC_OscConfig+0x4d0>)
 8002cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1ee      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 80a4 	beq.w	8002e3a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cf2:	4b8c      	ldr	r3, [pc, #560]	; (8002f24 <HAL_RCC_OscConfig+0x4d0>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10d      	bne.n	8002d1a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cfe:	4b89      	ldr	r3, [pc, #548]	; (8002f24 <HAL_RCC_OscConfig+0x4d0>)
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	4a88      	ldr	r2, [pc, #544]	; (8002f24 <HAL_RCC_OscConfig+0x4d0>)
 8002d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d08:	6413      	str	r3, [r2, #64]	; 0x40
 8002d0a:	4b86      	ldr	r3, [pc, #536]	; (8002f24 <HAL_RCC_OscConfig+0x4d0>)
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d12:	60bb      	str	r3, [r7, #8]
 8002d14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d16:	2301      	movs	r3, #1
 8002d18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d1a:	4b83      	ldr	r3, [pc, #524]	; (8002f28 <HAL_RCC_OscConfig+0x4d4>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d118      	bne.n	8002d58 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002d26:	4b80      	ldr	r3, [pc, #512]	; (8002f28 <HAL_RCC_OscConfig+0x4d4>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a7f      	ldr	r2, [pc, #508]	; (8002f28 <HAL_RCC_OscConfig+0x4d4>)
 8002d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d32:	f7fe fee5 	bl	8001b00 <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d3a:	f7fe fee1 	bl	8001b00 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b64      	cmp	r3, #100	; 0x64
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e12a      	b.n	8002fa2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d4c:	4b76      	ldr	r3, [pc, #472]	; (8002f28 <HAL_RCC_OscConfig+0x4d4>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0f0      	beq.n	8002d3a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d106      	bne.n	8002d6e <HAL_RCC_OscConfig+0x31a>
 8002d60:	4b70      	ldr	r3, [pc, #448]	; (8002f24 <HAL_RCC_OscConfig+0x4d0>)
 8002d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d64:	4a6f      	ldr	r2, [pc, #444]	; (8002f24 <HAL_RCC_OscConfig+0x4d0>)
 8002d66:	f043 0301 	orr.w	r3, r3, #1
 8002d6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d6c:	e02d      	b.n	8002dca <HAL_RCC_OscConfig+0x376>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10c      	bne.n	8002d90 <HAL_RCC_OscConfig+0x33c>
 8002d76:	4b6b      	ldr	r3, [pc, #428]	; (8002f24 <HAL_RCC_OscConfig+0x4d0>)
 8002d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7a:	4a6a      	ldr	r2, [pc, #424]	; (8002f24 <HAL_RCC_OscConfig+0x4d0>)
 8002d7c:	f023 0301 	bic.w	r3, r3, #1
 8002d80:	6713      	str	r3, [r2, #112]	; 0x70
 8002d82:	4b68      	ldr	r3, [pc, #416]	; (8002f24 <HAL_RCC_OscConfig+0x4d0>)
 8002d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d86:	4a67      	ldr	r2, [pc, #412]	; (8002f24 <HAL_RCC_OscConfig+0x4d0>)
 8002d88:	f023 0304 	bic.w	r3, r3, #4
 8002d8c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d8e:	e01c      	b.n	8002dca <HAL_RCC_OscConfig+0x376>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	2b05      	cmp	r3, #5
 8002d96:	d10c      	bne.n	8002db2 <HAL_RCC_OscConfig+0x35e>
 8002d98:	4b62      	ldr	r3, [pc, #392]	; (8002f24 <HAL_RCC_OscConfig+0x4d0>)
 8002d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9c:	4a61      	ldr	r2, [pc, #388]	; (8002f24 <HAL_RCC_OscConfig+0x4d0>)
 8002d9e:	f043 0304 	orr.w	r3, r3, #4
 8002da2:	6713      	str	r3, [r2, #112]	; 0x70
 8002da4:	4b5f      	ldr	r3, [pc, #380]	; (8002f24 <HAL_RCC_OscConfig+0x4d0>)
 8002da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da8:	4a5e      	ldr	r2, [pc, #376]	; (8002f24 <HAL_RCC_OscConfig+0x4d0>)
 8002daa:	f043 0301 	orr.w	r3, r3, #1
 8002dae:	6713      	str	r3, [r2, #112]	; 0x70
 8002db0:	e00b      	b.n	8002dca <HAL_RCC_OscConfig+0x376>
 8002db2:	4b5c      	ldr	r3, [pc, #368]	; (8002f24 <HAL_RCC_OscConfig+0x4d0>)
 8002db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db6:	4a5b      	ldr	r2, [pc, #364]	; (8002f24 <HAL_RCC_OscConfig+0x4d0>)
 8002db8:	f023 0301 	bic.w	r3, r3, #1
 8002dbc:	6713      	str	r3, [r2, #112]	; 0x70
 8002dbe:	4b59      	ldr	r3, [pc, #356]	; (8002f24 <HAL_RCC_OscConfig+0x4d0>)
 8002dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc2:	4a58      	ldr	r2, [pc, #352]	; (8002f24 <HAL_RCC_OscConfig+0x4d0>)
 8002dc4:	f023 0304 	bic.w	r3, r3, #4
 8002dc8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d015      	beq.n	8002dfe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd2:	f7fe fe95 	bl	8001b00 <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd8:	e00a      	b.n	8002df0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dda:	f7fe fe91 	bl	8001b00 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e0d8      	b.n	8002fa2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df0:	4b4c      	ldr	r3, [pc, #304]	; (8002f24 <HAL_RCC_OscConfig+0x4d0>)
 8002df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0ee      	beq.n	8002dda <HAL_RCC_OscConfig+0x386>
 8002dfc:	e014      	b.n	8002e28 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfe:	f7fe fe7f 	bl	8001b00 <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e04:	e00a      	b.n	8002e1c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e06:	f7fe fe7b 	bl	8001b00 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e0c2      	b.n	8002fa2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e1c:	4b41      	ldr	r3, [pc, #260]	; (8002f24 <HAL_RCC_OscConfig+0x4d0>)
 8002e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1ee      	bne.n	8002e06 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e28:	7dfb      	ldrb	r3, [r7, #23]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d105      	bne.n	8002e3a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e2e:	4b3d      	ldr	r3, [pc, #244]	; (8002f24 <HAL_RCC_OscConfig+0x4d0>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	4a3c      	ldr	r2, [pc, #240]	; (8002f24 <HAL_RCC_OscConfig+0x4d0>)
 8002e34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 80ae 	beq.w	8002fa0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e44:	4b37      	ldr	r3, [pc, #220]	; (8002f24 <HAL_RCC_OscConfig+0x4d0>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f003 030c 	and.w	r3, r3, #12
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d06d      	beq.n	8002f2c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d14b      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e58:	4b32      	ldr	r3, [pc, #200]	; (8002f24 <HAL_RCC_OscConfig+0x4d0>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a31      	ldr	r2, [pc, #196]	; (8002f24 <HAL_RCC_OscConfig+0x4d0>)
 8002e5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e64:	f7fe fe4c 	bl	8001b00 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e6c:	f7fe fe48 	bl	8001b00 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e091      	b.n	8002fa2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e7e:	4b29      	ldr	r3, [pc, #164]	; (8002f24 <HAL_RCC_OscConfig+0x4d0>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69da      	ldr	r2, [r3, #28]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	019b      	lsls	r3, r3, #6
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea0:	085b      	lsrs	r3, r3, #1
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	041b      	lsls	r3, r3, #16
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eac:	061b      	lsls	r3, r3, #24
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb4:	071b      	lsls	r3, r3, #28
 8002eb6:	491b      	ldr	r1, [pc, #108]	; (8002f24 <HAL_RCC_OscConfig+0x4d0>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ebc:	4b19      	ldr	r3, [pc, #100]	; (8002f24 <HAL_RCC_OscConfig+0x4d0>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a18      	ldr	r2, [pc, #96]	; (8002f24 <HAL_RCC_OscConfig+0x4d0>)
 8002ec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec8:	f7fe fe1a 	bl	8001b00 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed0:	f7fe fe16 	bl	8001b00 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e05f      	b.n	8002fa2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ee2:	4b10      	ldr	r3, [pc, #64]	; (8002f24 <HAL_RCC_OscConfig+0x4d0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0f0      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x47c>
 8002eee:	e057      	b.n	8002fa0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef0:	4b0c      	ldr	r3, [pc, #48]	; (8002f24 <HAL_RCC_OscConfig+0x4d0>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a0b      	ldr	r2, [pc, #44]	; (8002f24 <HAL_RCC_OscConfig+0x4d0>)
 8002ef6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efc:	f7fe fe00 	bl	8001b00 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f04:	f7fe fdfc 	bl	8001b00 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e045      	b.n	8002fa2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f16:	4b03      	ldr	r3, [pc, #12]	; (8002f24 <HAL_RCC_OscConfig+0x4d0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f0      	bne.n	8002f04 <HAL_RCC_OscConfig+0x4b0>
 8002f22:	e03d      	b.n	8002fa0 <HAL_RCC_OscConfig+0x54c>
 8002f24:	40023800 	.word	0x40023800
 8002f28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002f2c:	4b1f      	ldr	r3, [pc, #124]	; (8002fac <HAL_RCC_OscConfig+0x558>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d030      	beq.n	8002f9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d129      	bne.n	8002f9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d122      	bne.n	8002f9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f62:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d119      	bne.n	8002f9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f72:	085b      	lsrs	r3, r3, #1
 8002f74:	3b01      	subs	r3, #1
 8002f76:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d10f      	bne.n	8002f9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f86:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d107      	bne.n	8002f9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d001      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e000      	b.n	8002fa2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40023800 	.word	0x40023800

08002fb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e0d0      	b.n	800316a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fc8:	4b6a      	ldr	r3, [pc, #424]	; (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 030f 	and.w	r3, r3, #15
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d910      	bls.n	8002ff8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd6:	4b67      	ldr	r3, [pc, #412]	; (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f023 020f 	bic.w	r2, r3, #15
 8002fde:	4965      	ldr	r1, [pc, #404]	; (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe6:	4b63      	ldr	r3, [pc, #396]	; (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d001      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e0b8      	b.n	800316a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d020      	beq.n	8003046 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b00      	cmp	r3, #0
 800300e:	d005      	beq.n	800301c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003010:	4b59      	ldr	r3, [pc, #356]	; (8003178 <HAL_RCC_ClockConfig+0x1c8>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	4a58      	ldr	r2, [pc, #352]	; (8003178 <HAL_RCC_ClockConfig+0x1c8>)
 8003016:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800301a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0308 	and.w	r3, r3, #8
 8003024:	2b00      	cmp	r3, #0
 8003026:	d005      	beq.n	8003034 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003028:	4b53      	ldr	r3, [pc, #332]	; (8003178 <HAL_RCC_ClockConfig+0x1c8>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	4a52      	ldr	r2, [pc, #328]	; (8003178 <HAL_RCC_ClockConfig+0x1c8>)
 800302e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003032:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003034:	4b50      	ldr	r3, [pc, #320]	; (8003178 <HAL_RCC_ClockConfig+0x1c8>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	494d      	ldr	r1, [pc, #308]	; (8003178 <HAL_RCC_ClockConfig+0x1c8>)
 8003042:	4313      	orrs	r3, r2
 8003044:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d040      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d107      	bne.n	800306a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800305a:	4b47      	ldr	r3, [pc, #284]	; (8003178 <HAL_RCC_ClockConfig+0x1c8>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d115      	bne.n	8003092 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e07f      	b.n	800316a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2b02      	cmp	r3, #2
 8003070:	d107      	bne.n	8003082 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003072:	4b41      	ldr	r3, [pc, #260]	; (8003178 <HAL_RCC_ClockConfig+0x1c8>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d109      	bne.n	8003092 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e073      	b.n	800316a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003082:	4b3d      	ldr	r3, [pc, #244]	; (8003178 <HAL_RCC_ClockConfig+0x1c8>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e06b      	b.n	800316a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003092:	4b39      	ldr	r3, [pc, #228]	; (8003178 <HAL_RCC_ClockConfig+0x1c8>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f023 0203 	bic.w	r2, r3, #3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	4936      	ldr	r1, [pc, #216]	; (8003178 <HAL_RCC_ClockConfig+0x1c8>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030a4:	f7fe fd2c 	bl	8001b00 <HAL_GetTick>
 80030a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030aa:	e00a      	b.n	80030c2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ac:	f7fe fd28 	bl	8001b00 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e053      	b.n	800316a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c2:	4b2d      	ldr	r3, [pc, #180]	; (8003178 <HAL_RCC_ClockConfig+0x1c8>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 020c 	and.w	r2, r3, #12
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d1eb      	bne.n	80030ac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030d4:	4b27      	ldr	r3, [pc, #156]	; (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 030f 	and.w	r3, r3, #15
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d210      	bcs.n	8003104 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e2:	4b24      	ldr	r3, [pc, #144]	; (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f023 020f 	bic.w	r2, r3, #15
 80030ea:	4922      	ldr	r1, [pc, #136]	; (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f2:	4b20      	ldr	r3, [pc, #128]	; (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d001      	beq.n	8003104 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e032      	b.n	800316a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b00      	cmp	r3, #0
 800310e:	d008      	beq.n	8003122 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003110:	4b19      	ldr	r3, [pc, #100]	; (8003178 <HAL_RCC_ClockConfig+0x1c8>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	4916      	ldr	r1, [pc, #88]	; (8003178 <HAL_RCC_ClockConfig+0x1c8>)
 800311e:	4313      	orrs	r3, r2
 8003120:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0308 	and.w	r3, r3, #8
 800312a:	2b00      	cmp	r3, #0
 800312c:	d009      	beq.n	8003142 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800312e:	4b12      	ldr	r3, [pc, #72]	; (8003178 <HAL_RCC_ClockConfig+0x1c8>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	490e      	ldr	r1, [pc, #56]	; (8003178 <HAL_RCC_ClockConfig+0x1c8>)
 800313e:	4313      	orrs	r3, r2
 8003140:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003142:	f000 f821 	bl	8003188 <HAL_RCC_GetSysClockFreq>
 8003146:	4602      	mov	r2, r0
 8003148:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <HAL_RCC_ClockConfig+0x1c8>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	091b      	lsrs	r3, r3, #4
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	490a      	ldr	r1, [pc, #40]	; (800317c <HAL_RCC_ClockConfig+0x1cc>)
 8003154:	5ccb      	ldrb	r3, [r1, r3]
 8003156:	fa22 f303 	lsr.w	r3, r2, r3
 800315a:	4a09      	ldr	r2, [pc, #36]	; (8003180 <HAL_RCC_ClockConfig+0x1d0>)
 800315c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800315e:	4b09      	ldr	r3, [pc, #36]	; (8003184 <HAL_RCC_ClockConfig+0x1d4>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f7fe fc88 	bl	8001a78 <HAL_InitTick>

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	40023c00 	.word	0x40023c00
 8003178:	40023800 	.word	0x40023800
 800317c:	08004b74 	.word	0x08004b74
 8003180:	20000004 	.word	0x20000004
 8003184:	20000008 	.word	0x20000008

08003188 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800318c:	b094      	sub	sp, #80	; 0x50
 800318e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003190:	2300      	movs	r3, #0
 8003192:	647b      	str	r3, [r7, #68]	; 0x44
 8003194:	2300      	movs	r3, #0
 8003196:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003198:	2300      	movs	r3, #0
 800319a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800319c:	2300      	movs	r3, #0
 800319e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031a0:	4b79      	ldr	r3, [pc, #484]	; (8003388 <HAL_RCC_GetSysClockFreq+0x200>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f003 030c 	and.w	r3, r3, #12
 80031a8:	2b08      	cmp	r3, #8
 80031aa:	d00d      	beq.n	80031c8 <HAL_RCC_GetSysClockFreq+0x40>
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	f200 80e1 	bhi.w	8003374 <HAL_RCC_GetSysClockFreq+0x1ec>
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d002      	beq.n	80031bc <HAL_RCC_GetSysClockFreq+0x34>
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d003      	beq.n	80031c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80031ba:	e0db      	b.n	8003374 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031bc:	4b73      	ldr	r3, [pc, #460]	; (800338c <HAL_RCC_GetSysClockFreq+0x204>)
 80031be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031c0:	e0db      	b.n	800337a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031c2:	4b73      	ldr	r3, [pc, #460]	; (8003390 <HAL_RCC_GetSysClockFreq+0x208>)
 80031c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031c6:	e0d8      	b.n	800337a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031c8:	4b6f      	ldr	r3, [pc, #444]	; (8003388 <HAL_RCC_GetSysClockFreq+0x200>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031d0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80031d2:	4b6d      	ldr	r3, [pc, #436]	; (8003388 <HAL_RCC_GetSysClockFreq+0x200>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d063      	beq.n	80032a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031de:	4b6a      	ldr	r3, [pc, #424]	; (8003388 <HAL_RCC_GetSysClockFreq+0x200>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	099b      	lsrs	r3, r3, #6
 80031e4:	2200      	movs	r2, #0
 80031e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80031e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80031ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031f0:	633b      	str	r3, [r7, #48]	; 0x30
 80031f2:	2300      	movs	r3, #0
 80031f4:	637b      	str	r3, [r7, #52]	; 0x34
 80031f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80031fa:	4622      	mov	r2, r4
 80031fc:	462b      	mov	r3, r5
 80031fe:	f04f 0000 	mov.w	r0, #0
 8003202:	f04f 0100 	mov.w	r1, #0
 8003206:	0159      	lsls	r1, r3, #5
 8003208:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800320c:	0150      	lsls	r0, r2, #5
 800320e:	4602      	mov	r2, r0
 8003210:	460b      	mov	r3, r1
 8003212:	4621      	mov	r1, r4
 8003214:	1a51      	subs	r1, r2, r1
 8003216:	6139      	str	r1, [r7, #16]
 8003218:	4629      	mov	r1, r5
 800321a:	eb63 0301 	sbc.w	r3, r3, r1
 800321e:	617b      	str	r3, [r7, #20]
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	f04f 0300 	mov.w	r3, #0
 8003228:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800322c:	4659      	mov	r1, fp
 800322e:	018b      	lsls	r3, r1, #6
 8003230:	4651      	mov	r1, sl
 8003232:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003236:	4651      	mov	r1, sl
 8003238:	018a      	lsls	r2, r1, #6
 800323a:	4651      	mov	r1, sl
 800323c:	ebb2 0801 	subs.w	r8, r2, r1
 8003240:	4659      	mov	r1, fp
 8003242:	eb63 0901 	sbc.w	r9, r3, r1
 8003246:	f04f 0200 	mov.w	r2, #0
 800324a:	f04f 0300 	mov.w	r3, #0
 800324e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003252:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003256:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800325a:	4690      	mov	r8, r2
 800325c:	4699      	mov	r9, r3
 800325e:	4623      	mov	r3, r4
 8003260:	eb18 0303 	adds.w	r3, r8, r3
 8003264:	60bb      	str	r3, [r7, #8]
 8003266:	462b      	mov	r3, r5
 8003268:	eb49 0303 	adc.w	r3, r9, r3
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	f04f 0200 	mov.w	r2, #0
 8003272:	f04f 0300 	mov.w	r3, #0
 8003276:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800327a:	4629      	mov	r1, r5
 800327c:	024b      	lsls	r3, r1, #9
 800327e:	4621      	mov	r1, r4
 8003280:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003284:	4621      	mov	r1, r4
 8003286:	024a      	lsls	r2, r1, #9
 8003288:	4610      	mov	r0, r2
 800328a:	4619      	mov	r1, r3
 800328c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800328e:	2200      	movs	r2, #0
 8003290:	62bb      	str	r3, [r7, #40]	; 0x28
 8003292:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003294:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003298:	f7fc ffce 	bl	8000238 <__aeabi_uldivmod>
 800329c:	4602      	mov	r2, r0
 800329e:	460b      	mov	r3, r1
 80032a0:	4613      	mov	r3, r2
 80032a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032a4:	e058      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032a6:	4b38      	ldr	r3, [pc, #224]	; (8003388 <HAL_RCC_GetSysClockFreq+0x200>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	099b      	lsrs	r3, r3, #6
 80032ac:	2200      	movs	r2, #0
 80032ae:	4618      	mov	r0, r3
 80032b0:	4611      	mov	r1, r2
 80032b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032b6:	623b      	str	r3, [r7, #32]
 80032b8:	2300      	movs	r3, #0
 80032ba:	627b      	str	r3, [r7, #36]	; 0x24
 80032bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032c0:	4642      	mov	r2, r8
 80032c2:	464b      	mov	r3, r9
 80032c4:	f04f 0000 	mov.w	r0, #0
 80032c8:	f04f 0100 	mov.w	r1, #0
 80032cc:	0159      	lsls	r1, r3, #5
 80032ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032d2:	0150      	lsls	r0, r2, #5
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	4641      	mov	r1, r8
 80032da:	ebb2 0a01 	subs.w	sl, r2, r1
 80032de:	4649      	mov	r1, r9
 80032e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80032e4:	f04f 0200 	mov.w	r2, #0
 80032e8:	f04f 0300 	mov.w	r3, #0
 80032ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80032f8:	ebb2 040a 	subs.w	r4, r2, sl
 80032fc:	eb63 050b 	sbc.w	r5, r3, fp
 8003300:	f04f 0200 	mov.w	r2, #0
 8003304:	f04f 0300 	mov.w	r3, #0
 8003308:	00eb      	lsls	r3, r5, #3
 800330a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800330e:	00e2      	lsls	r2, r4, #3
 8003310:	4614      	mov	r4, r2
 8003312:	461d      	mov	r5, r3
 8003314:	4643      	mov	r3, r8
 8003316:	18e3      	adds	r3, r4, r3
 8003318:	603b      	str	r3, [r7, #0]
 800331a:	464b      	mov	r3, r9
 800331c:	eb45 0303 	adc.w	r3, r5, r3
 8003320:	607b      	str	r3, [r7, #4]
 8003322:	f04f 0200 	mov.w	r2, #0
 8003326:	f04f 0300 	mov.w	r3, #0
 800332a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800332e:	4629      	mov	r1, r5
 8003330:	028b      	lsls	r3, r1, #10
 8003332:	4621      	mov	r1, r4
 8003334:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003338:	4621      	mov	r1, r4
 800333a:	028a      	lsls	r2, r1, #10
 800333c:	4610      	mov	r0, r2
 800333e:	4619      	mov	r1, r3
 8003340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003342:	2200      	movs	r2, #0
 8003344:	61bb      	str	r3, [r7, #24]
 8003346:	61fa      	str	r2, [r7, #28]
 8003348:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800334c:	f7fc ff74 	bl	8000238 <__aeabi_uldivmod>
 8003350:	4602      	mov	r2, r0
 8003352:	460b      	mov	r3, r1
 8003354:	4613      	mov	r3, r2
 8003356:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003358:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <HAL_RCC_GetSysClockFreq+0x200>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	0c1b      	lsrs	r3, r3, #16
 800335e:	f003 0303 	and.w	r3, r3, #3
 8003362:	3301      	adds	r3, #1
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003368:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800336a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800336c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003370:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003372:	e002      	b.n	800337a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003374:	4b05      	ldr	r3, [pc, #20]	; (800338c <HAL_RCC_GetSysClockFreq+0x204>)
 8003376:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003378:	bf00      	nop
    }
  }
  return sysclockfreq;
 800337a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800337c:	4618      	mov	r0, r3
 800337e:	3750      	adds	r7, #80	; 0x50
 8003380:	46bd      	mov	sp, r7
 8003382:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003386:	bf00      	nop
 8003388:	40023800 	.word	0x40023800
 800338c:	00f42400 	.word	0x00f42400
 8003390:	007a1200 	.word	0x007a1200

08003394 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003398:	4b03      	ldr	r3, [pc, #12]	; (80033a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800339a:	681b      	ldr	r3, [r3, #0]
}
 800339c:	4618      	mov	r0, r3
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	20000004 	.word	0x20000004

080033ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033b0:	f7ff fff0 	bl	8003394 <HAL_RCC_GetHCLKFreq>
 80033b4:	4602      	mov	r2, r0
 80033b6:	4b05      	ldr	r3, [pc, #20]	; (80033cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	0a9b      	lsrs	r3, r3, #10
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	4903      	ldr	r1, [pc, #12]	; (80033d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033c2:	5ccb      	ldrb	r3, [r1, r3]
 80033c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40023800 	.word	0x40023800
 80033d0:	08004b84 	.word	0x08004b84

080033d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033d8:	f7ff ffdc 	bl	8003394 <HAL_RCC_GetHCLKFreq>
 80033dc:	4602      	mov	r2, r0
 80033de:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	0b5b      	lsrs	r3, r3, #13
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	4903      	ldr	r1, [pc, #12]	; (80033f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033ea:	5ccb      	ldrb	r3, [r1, r3]
 80033ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40023800 	.word	0x40023800
 80033f8:	08004b84 	.word	0x08004b84

080033fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b088      	sub	sp, #32
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003404:	2300      	movs	r3, #0
 8003406:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003408:	2300      	movs	r3, #0
 800340a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800340c:	2300      	movs	r3, #0
 800340e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003410:	2300      	movs	r3, #0
 8003412:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003414:	2300      	movs	r3, #0
 8003416:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b00      	cmp	r3, #0
 8003422:	d012      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003424:	4b69      	ldr	r3, [pc, #420]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	4a68      	ldr	r2, [pc, #416]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800342a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800342e:	6093      	str	r3, [r2, #8]
 8003430:	4b66      	ldr	r3, [pc, #408]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003438:	4964      	ldr	r1, [pc, #400]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800343a:	4313      	orrs	r3, r2
 800343c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003446:	2301      	movs	r3, #1
 8003448:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d017      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003456:	4b5d      	ldr	r3, [pc, #372]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003458:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800345c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003464:	4959      	ldr	r1, [pc, #356]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003470:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003474:	d101      	bne.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003476:	2301      	movs	r3, #1
 8003478:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003482:	2301      	movs	r3, #1
 8003484:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d017      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003492:	4b4e      	ldr	r3, [pc, #312]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003494:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003498:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a0:	494a      	ldr	r1, [pc, #296]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034b0:	d101      	bne.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80034b2:	2301      	movs	r3, #1
 80034b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80034be:	2301      	movs	r3, #1
 80034c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80034ce:	2301      	movs	r3, #1
 80034d0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0320 	and.w	r3, r3, #32
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 808b 	beq.w	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80034e0:	4b3a      	ldr	r3, [pc, #232]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e4:	4a39      	ldr	r2, [pc, #228]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ea:	6413      	str	r3, [r2, #64]	; 0x40
 80034ec:	4b37      	ldr	r3, [pc, #220]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f4:	60bb      	str	r3, [r7, #8]
 80034f6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80034f8:	4b35      	ldr	r3, [pc, #212]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a34      	ldr	r2, [pc, #208]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003502:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003504:	f7fe fafc 	bl	8001b00 <HAL_GetTick>
 8003508:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800350a:	e008      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800350c:	f7fe faf8 	bl	8001b00 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b64      	cmp	r3, #100	; 0x64
 8003518:	d901      	bls.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e38f      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800351e:	4b2c      	ldr	r3, [pc, #176]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0f0      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800352a:	4b28      	ldr	r3, [pc, #160]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800352c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003532:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d035      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	429a      	cmp	r2, r3
 8003546:	d02e      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003548:	4b20      	ldr	r3, [pc, #128]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800354a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003550:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003552:	4b1e      	ldr	r3, [pc, #120]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003556:	4a1d      	ldr	r2, [pc, #116]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800355c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800355e:	4b1b      	ldr	r3, [pc, #108]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003562:	4a1a      	ldr	r2, [pc, #104]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003564:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003568:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800356a:	4a18      	ldr	r2, [pc, #96]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003570:	4b16      	ldr	r3, [pc, #88]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b01      	cmp	r3, #1
 800357a:	d114      	bne.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357c:	f7fe fac0 	bl	8001b00 <HAL_GetTick>
 8003580:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003582:	e00a      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003584:	f7fe fabc 	bl	8001b00 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003592:	4293      	cmp	r3, r2
 8003594:	d901      	bls.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e351      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800359a:	4b0c      	ldr	r3, [pc, #48]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800359c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0ee      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035b2:	d111      	bne.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80035b4:	4b05      	ldr	r3, [pc, #20]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035c0:	4b04      	ldr	r3, [pc, #16]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80035c2:	400b      	ands	r3, r1
 80035c4:	4901      	ldr	r1, [pc, #4]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	608b      	str	r3, [r1, #8]
 80035ca:	e00b      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80035cc:	40023800 	.word	0x40023800
 80035d0:	40007000 	.word	0x40007000
 80035d4:	0ffffcff 	.word	0x0ffffcff
 80035d8:	4bac      	ldr	r3, [pc, #688]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	4aab      	ldr	r2, [pc, #684]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035de:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80035e2:	6093      	str	r3, [r2, #8]
 80035e4:	4ba9      	ldr	r3, [pc, #676]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035f0:	49a6      	ldr	r1, [pc, #664]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0310 	and.w	r3, r3, #16
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d010      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003602:	4ba2      	ldr	r3, [pc, #648]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003604:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003608:	4aa0      	ldr	r2, [pc, #640]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800360a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800360e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003612:	4b9e      	ldr	r3, [pc, #632]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003614:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361c:	499b      	ldr	r1, [pc, #620]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800361e:	4313      	orrs	r3, r2
 8003620:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00a      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003630:	4b96      	ldr	r3, [pc, #600]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003636:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800363e:	4993      	ldr	r1, [pc, #588]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003640:	4313      	orrs	r3, r2
 8003642:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00a      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003652:	4b8e      	ldr	r3, [pc, #568]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003658:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003660:	498a      	ldr	r1, [pc, #552]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003662:	4313      	orrs	r3, r2
 8003664:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00a      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003674:	4b85      	ldr	r3, [pc, #532]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003682:	4982      	ldr	r1, [pc, #520]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003684:	4313      	orrs	r3, r2
 8003686:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00a      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003696:	4b7d      	ldr	r3, [pc, #500]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a4:	4979      	ldr	r1, [pc, #484]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00a      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036b8:	4b74      	ldr	r3, [pc, #464]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036be:	f023 0203 	bic.w	r2, r3, #3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c6:	4971      	ldr	r1, [pc, #452]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00a      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036da:	4b6c      	ldr	r3, [pc, #432]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e0:	f023 020c 	bic.w	r2, r3, #12
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036e8:	4968      	ldr	r1, [pc, #416]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00a      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036fc:	4b63      	ldr	r3, [pc, #396]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003702:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800370a:	4960      	ldr	r1, [pc, #384]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800370c:	4313      	orrs	r3, r2
 800370e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00a      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800371e:	4b5b      	ldr	r3, [pc, #364]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003724:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800372c:	4957      	ldr	r1, [pc, #348]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800372e:	4313      	orrs	r3, r2
 8003730:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00a      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003740:	4b52      	ldr	r3, [pc, #328]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003746:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800374e:	494f      	ldr	r1, [pc, #316]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003750:	4313      	orrs	r3, r2
 8003752:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003762:	4b4a      	ldr	r3, [pc, #296]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003768:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003770:	4946      	ldr	r1, [pc, #280]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003772:	4313      	orrs	r3, r2
 8003774:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00a      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003784:	4b41      	ldr	r3, [pc, #260]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003792:	493e      	ldr	r1, [pc, #248]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003794:	4313      	orrs	r3, r2
 8003796:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00a      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80037a6:	4b39      	ldr	r3, [pc, #228]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037b4:	4935      	ldr	r1, [pc, #212]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00a      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80037c8:	4b30      	ldr	r3, [pc, #192]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037d6:	492d      	ldr	r1, [pc, #180]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d011      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80037ea:	4b28      	ldr	r3, [pc, #160]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037f8:	4924      	ldr	r1, [pc, #144]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003804:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003808:	d101      	bne.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800380a:	2301      	movs	r3, #1
 800380c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0308 	and.w	r3, r3, #8
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800381a:	2301      	movs	r3, #1
 800381c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00a      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800382a:	4b18      	ldr	r3, [pc, #96]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800382c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003830:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003838:	4914      	ldr	r1, [pc, #80]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800383a:	4313      	orrs	r3, r2
 800383c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00b      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800384c:	4b0f      	ldr	r3, [pc, #60]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800384e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003852:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800385c:	490b      	ldr	r1, [pc, #44]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800385e:	4313      	orrs	r3, r2
 8003860:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00f      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003870:	4b06      	ldr	r3, [pc, #24]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003876:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003880:	4902      	ldr	r1, [pc, #8]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003882:	4313      	orrs	r3, r2
 8003884:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003888:	e002      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800388a:	bf00      	nop
 800388c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00b      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800389c:	4b8a      	ldr	r3, [pc, #552]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800389e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038a2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ac:	4986      	ldr	r1, [pc, #536]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00b      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80038c0:	4b81      	ldr	r3, [pc, #516]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038c6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038d0:	497d      	ldr	r1, [pc, #500]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d006      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 80d6 	beq.w	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80038ec:	4b76      	ldr	r3, [pc, #472]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a75      	ldr	r2, [pc, #468]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038f8:	f7fe f902 	bl	8001b00 <HAL_GetTick>
 80038fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038fe:	e008      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003900:	f7fe f8fe 	bl	8001b00 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b64      	cmp	r3, #100	; 0x64
 800390c:	d901      	bls.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e195      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003912:	4b6d      	ldr	r3, [pc, #436]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1f0      	bne.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d021      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800392e:	2b00      	cmp	r3, #0
 8003930:	d11d      	bne.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003932:	4b65      	ldr	r3, [pc, #404]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003934:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003938:	0c1b      	lsrs	r3, r3, #16
 800393a:	f003 0303 	and.w	r3, r3, #3
 800393e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003940:	4b61      	ldr	r3, [pc, #388]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003942:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003946:	0e1b      	lsrs	r3, r3, #24
 8003948:	f003 030f 	and.w	r3, r3, #15
 800394c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	019a      	lsls	r2, r3, #6
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	041b      	lsls	r3, r3, #16
 8003958:	431a      	orrs	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	061b      	lsls	r3, r3, #24
 800395e:	431a      	orrs	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	071b      	lsls	r3, r3, #28
 8003966:	4958      	ldr	r1, [pc, #352]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003968:	4313      	orrs	r3, r2
 800396a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d004      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800397e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003982:	d00a      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800398c:	2b00      	cmp	r3, #0
 800398e:	d02e      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003994:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003998:	d129      	bne.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800399a:	4b4b      	ldr	r3, [pc, #300]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800399c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039a0:	0c1b      	lsrs	r3, r3, #16
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80039a8:	4b47      	ldr	r3, [pc, #284]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039ae:	0f1b      	lsrs	r3, r3, #28
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	019a      	lsls	r2, r3, #6
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	041b      	lsls	r3, r3, #16
 80039c0:	431a      	orrs	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	061b      	lsls	r3, r3, #24
 80039c8:	431a      	orrs	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	071b      	lsls	r3, r3, #28
 80039ce:	493e      	ldr	r1, [pc, #248]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80039d6:	4b3c      	ldr	r3, [pc, #240]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039dc:	f023 021f 	bic.w	r2, r3, #31
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e4:	3b01      	subs	r3, #1
 80039e6:	4938      	ldr	r1, [pc, #224]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d01d      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80039fa:	4b33      	ldr	r3, [pc, #204]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a00:	0e1b      	lsrs	r3, r3, #24
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a08:	4b2f      	ldr	r3, [pc, #188]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a0e:	0f1b      	lsrs	r3, r3, #28
 8003a10:	f003 0307 	and.w	r3, r3, #7
 8003a14:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	019a      	lsls	r2, r3, #6
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	041b      	lsls	r3, r3, #16
 8003a22:	431a      	orrs	r2, r3
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	061b      	lsls	r3, r3, #24
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	071b      	lsls	r3, r3, #28
 8003a2e:	4926      	ldr	r1, [pc, #152]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d011      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	019a      	lsls	r2, r3, #6
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	041b      	lsls	r3, r3, #16
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	061b      	lsls	r3, r3, #24
 8003a56:	431a      	orrs	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	071b      	lsls	r3, r3, #28
 8003a5e:	491a      	ldr	r1, [pc, #104]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003a66:	4b18      	ldr	r3, [pc, #96]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a17      	ldr	r2, [pc, #92]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a72:	f7fe f845 	bl	8001b00 <HAL_GetTick>
 8003a76:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a78:	e008      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a7a:	f7fe f841 	bl	8001b00 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b64      	cmp	r3, #100	; 0x64
 8003a86:	d901      	bls.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e0d8      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a8c:	4b0e      	ldr	r3, [pc, #56]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d0f0      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	f040 80ce 	bne.w	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003aa0:	4b09      	ldr	r3, [pc, #36]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a08      	ldr	r2, [pc, #32]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aaa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aac:	f7fe f828 	bl	8001b00 <HAL_GetTick>
 8003ab0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ab2:	e00b      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ab4:	f7fe f824 	bl	8001b00 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b64      	cmp	r3, #100	; 0x64
 8003ac0:	d904      	bls.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e0bb      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003ac6:	bf00      	nop
 8003ac8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003acc:	4b5e      	ldr	r3, [pc, #376]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ad4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ad8:	d0ec      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d009      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d02e      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d12a      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b02:	4b51      	ldr	r3, [pc, #324]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b08:	0c1b      	lsrs	r3, r3, #16
 8003b0a:	f003 0303 	and.w	r3, r3, #3
 8003b0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b10:	4b4d      	ldr	r3, [pc, #308]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b16:	0f1b      	lsrs	r3, r3, #28
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	019a      	lsls	r2, r3, #6
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	041b      	lsls	r3, r3, #16
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	061b      	lsls	r3, r3, #24
 8003b30:	431a      	orrs	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	071b      	lsls	r3, r3, #28
 8003b36:	4944      	ldr	r1, [pc, #272]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003b3e:	4b42      	ldr	r3, [pc, #264]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b44:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	021b      	lsls	r3, r3, #8
 8003b50:	493d      	ldr	r1, [pc, #244]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d022      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b6c:	d11d      	bne.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b6e:	4b36      	ldr	r3, [pc, #216]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b74:	0e1b      	lsrs	r3, r3, #24
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b7c:	4b32      	ldr	r3, [pc, #200]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b82:	0f1b      	lsrs	r3, r3, #28
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	019a      	lsls	r2, r3, #6
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	041b      	lsls	r3, r3, #16
 8003b96:	431a      	orrs	r2, r3
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	061b      	lsls	r3, r3, #24
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	071b      	lsls	r3, r3, #28
 8003ba2:	4929      	ldr	r1, [pc, #164]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0308 	and.w	r3, r3, #8
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d028      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003bb6:	4b24      	ldr	r3, [pc, #144]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbc:	0e1b      	lsrs	r3, r3, #24
 8003bbe:	f003 030f 	and.w	r3, r3, #15
 8003bc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003bc4:	4b20      	ldr	r3, [pc, #128]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bca:	0c1b      	lsrs	r3, r3, #16
 8003bcc:	f003 0303 	and.w	r3, r3, #3
 8003bd0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	019a      	lsls	r2, r3, #6
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	041b      	lsls	r3, r3, #16
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	061b      	lsls	r3, r3, #24
 8003be2:	431a      	orrs	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	69db      	ldr	r3, [r3, #28]
 8003be8:	071b      	lsls	r3, r3, #28
 8003bea:	4917      	ldr	r1, [pc, #92]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003bf2:	4b15      	ldr	r3, [pc, #84]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bf8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c00:	4911      	ldr	r1, [pc, #68]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003c08:	4b0f      	ldr	r3, [pc, #60]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a0e      	ldr	r2, [pc, #56]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c14:	f7fd ff74 	bl	8001b00 <HAL_GetTick>
 8003c18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c1a:	e008      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c1c:	f7fd ff70 	bl	8001b00 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b64      	cmp	r3, #100	; 0x64
 8003c28:	d901      	bls.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e007      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c2e:	4b06      	ldr	r3, [pc, #24]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c3a:	d1ef      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3720      	adds	r7, #32
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	40023800 	.word	0x40023800

08003c4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e040      	b.n	8003ce0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d106      	bne.n	8003c74 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7fd fdb6 	bl	80017e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2224      	movs	r2, #36	; 0x24
 8003c78:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0201 	bic.w	r2, r2, #1
 8003c88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f82c 	bl	8003ce8 <UART_SetConfig>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d101      	bne.n	8003c9a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e022      	b.n	8003ce0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d002      	beq.n	8003ca8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 fa84 	bl	80041b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689a      	ldr	r2, [r3, #8]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f042 0201 	orr.w	r2, r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 fb0b 	bl	80042f4 <UART_CheckIdleState>
 8003cde:	4603      	mov	r3, r0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b088      	sub	sp, #32
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	69db      	ldr	r3, [r3, #28]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	4ba6      	ldr	r3, [pc, #664]	; (8003fac <UART_SetConfig+0x2c4>)
 8003d14:	4013      	ands	r3, r2
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6812      	ldr	r2, [r2, #0]
 8003d1a:	6979      	ldr	r1, [r7, #20]
 8003d1c:	430b      	orrs	r3, r1
 8003d1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68da      	ldr	r2, [r3, #12]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a94      	ldr	r2, [pc, #592]	; (8003fb0 <UART_SetConfig+0x2c8>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d120      	bne.n	8003da6 <UART_SetConfig+0xbe>
 8003d64:	4b93      	ldr	r3, [pc, #588]	; (8003fb4 <UART_SetConfig+0x2cc>)
 8003d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6a:	f003 0303 	and.w	r3, r3, #3
 8003d6e:	2b03      	cmp	r3, #3
 8003d70:	d816      	bhi.n	8003da0 <UART_SetConfig+0xb8>
 8003d72:	a201      	add	r2, pc, #4	; (adr r2, 8003d78 <UART_SetConfig+0x90>)
 8003d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d78:	08003d89 	.word	0x08003d89
 8003d7c:	08003d95 	.word	0x08003d95
 8003d80:	08003d8f 	.word	0x08003d8f
 8003d84:	08003d9b 	.word	0x08003d9b
 8003d88:	2301      	movs	r3, #1
 8003d8a:	77fb      	strb	r3, [r7, #31]
 8003d8c:	e150      	b.n	8004030 <UART_SetConfig+0x348>
 8003d8e:	2302      	movs	r3, #2
 8003d90:	77fb      	strb	r3, [r7, #31]
 8003d92:	e14d      	b.n	8004030 <UART_SetConfig+0x348>
 8003d94:	2304      	movs	r3, #4
 8003d96:	77fb      	strb	r3, [r7, #31]
 8003d98:	e14a      	b.n	8004030 <UART_SetConfig+0x348>
 8003d9a:	2308      	movs	r3, #8
 8003d9c:	77fb      	strb	r3, [r7, #31]
 8003d9e:	e147      	b.n	8004030 <UART_SetConfig+0x348>
 8003da0:	2310      	movs	r3, #16
 8003da2:	77fb      	strb	r3, [r7, #31]
 8003da4:	e144      	b.n	8004030 <UART_SetConfig+0x348>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a83      	ldr	r2, [pc, #524]	; (8003fb8 <UART_SetConfig+0x2d0>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d132      	bne.n	8003e16 <UART_SetConfig+0x12e>
 8003db0:	4b80      	ldr	r3, [pc, #512]	; (8003fb4 <UART_SetConfig+0x2cc>)
 8003db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db6:	f003 030c 	and.w	r3, r3, #12
 8003dba:	2b0c      	cmp	r3, #12
 8003dbc:	d828      	bhi.n	8003e10 <UART_SetConfig+0x128>
 8003dbe:	a201      	add	r2, pc, #4	; (adr r2, 8003dc4 <UART_SetConfig+0xdc>)
 8003dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc4:	08003df9 	.word	0x08003df9
 8003dc8:	08003e11 	.word	0x08003e11
 8003dcc:	08003e11 	.word	0x08003e11
 8003dd0:	08003e11 	.word	0x08003e11
 8003dd4:	08003e05 	.word	0x08003e05
 8003dd8:	08003e11 	.word	0x08003e11
 8003ddc:	08003e11 	.word	0x08003e11
 8003de0:	08003e11 	.word	0x08003e11
 8003de4:	08003dff 	.word	0x08003dff
 8003de8:	08003e11 	.word	0x08003e11
 8003dec:	08003e11 	.word	0x08003e11
 8003df0:	08003e11 	.word	0x08003e11
 8003df4:	08003e0b 	.word	0x08003e0b
 8003df8:	2300      	movs	r3, #0
 8003dfa:	77fb      	strb	r3, [r7, #31]
 8003dfc:	e118      	b.n	8004030 <UART_SetConfig+0x348>
 8003dfe:	2302      	movs	r3, #2
 8003e00:	77fb      	strb	r3, [r7, #31]
 8003e02:	e115      	b.n	8004030 <UART_SetConfig+0x348>
 8003e04:	2304      	movs	r3, #4
 8003e06:	77fb      	strb	r3, [r7, #31]
 8003e08:	e112      	b.n	8004030 <UART_SetConfig+0x348>
 8003e0a:	2308      	movs	r3, #8
 8003e0c:	77fb      	strb	r3, [r7, #31]
 8003e0e:	e10f      	b.n	8004030 <UART_SetConfig+0x348>
 8003e10:	2310      	movs	r3, #16
 8003e12:	77fb      	strb	r3, [r7, #31]
 8003e14:	e10c      	b.n	8004030 <UART_SetConfig+0x348>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a68      	ldr	r2, [pc, #416]	; (8003fbc <UART_SetConfig+0x2d4>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d120      	bne.n	8003e62 <UART_SetConfig+0x17a>
 8003e20:	4b64      	ldr	r3, [pc, #400]	; (8003fb4 <UART_SetConfig+0x2cc>)
 8003e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e26:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e2a:	2b30      	cmp	r3, #48	; 0x30
 8003e2c:	d013      	beq.n	8003e56 <UART_SetConfig+0x16e>
 8003e2e:	2b30      	cmp	r3, #48	; 0x30
 8003e30:	d814      	bhi.n	8003e5c <UART_SetConfig+0x174>
 8003e32:	2b20      	cmp	r3, #32
 8003e34:	d009      	beq.n	8003e4a <UART_SetConfig+0x162>
 8003e36:	2b20      	cmp	r3, #32
 8003e38:	d810      	bhi.n	8003e5c <UART_SetConfig+0x174>
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d002      	beq.n	8003e44 <UART_SetConfig+0x15c>
 8003e3e:	2b10      	cmp	r3, #16
 8003e40:	d006      	beq.n	8003e50 <UART_SetConfig+0x168>
 8003e42:	e00b      	b.n	8003e5c <UART_SetConfig+0x174>
 8003e44:	2300      	movs	r3, #0
 8003e46:	77fb      	strb	r3, [r7, #31]
 8003e48:	e0f2      	b.n	8004030 <UART_SetConfig+0x348>
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	77fb      	strb	r3, [r7, #31]
 8003e4e:	e0ef      	b.n	8004030 <UART_SetConfig+0x348>
 8003e50:	2304      	movs	r3, #4
 8003e52:	77fb      	strb	r3, [r7, #31]
 8003e54:	e0ec      	b.n	8004030 <UART_SetConfig+0x348>
 8003e56:	2308      	movs	r3, #8
 8003e58:	77fb      	strb	r3, [r7, #31]
 8003e5a:	e0e9      	b.n	8004030 <UART_SetConfig+0x348>
 8003e5c:	2310      	movs	r3, #16
 8003e5e:	77fb      	strb	r3, [r7, #31]
 8003e60:	e0e6      	b.n	8004030 <UART_SetConfig+0x348>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a56      	ldr	r2, [pc, #344]	; (8003fc0 <UART_SetConfig+0x2d8>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d120      	bne.n	8003eae <UART_SetConfig+0x1c6>
 8003e6c:	4b51      	ldr	r3, [pc, #324]	; (8003fb4 <UART_SetConfig+0x2cc>)
 8003e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e72:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e76:	2bc0      	cmp	r3, #192	; 0xc0
 8003e78:	d013      	beq.n	8003ea2 <UART_SetConfig+0x1ba>
 8003e7a:	2bc0      	cmp	r3, #192	; 0xc0
 8003e7c:	d814      	bhi.n	8003ea8 <UART_SetConfig+0x1c0>
 8003e7e:	2b80      	cmp	r3, #128	; 0x80
 8003e80:	d009      	beq.n	8003e96 <UART_SetConfig+0x1ae>
 8003e82:	2b80      	cmp	r3, #128	; 0x80
 8003e84:	d810      	bhi.n	8003ea8 <UART_SetConfig+0x1c0>
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d002      	beq.n	8003e90 <UART_SetConfig+0x1a8>
 8003e8a:	2b40      	cmp	r3, #64	; 0x40
 8003e8c:	d006      	beq.n	8003e9c <UART_SetConfig+0x1b4>
 8003e8e:	e00b      	b.n	8003ea8 <UART_SetConfig+0x1c0>
 8003e90:	2300      	movs	r3, #0
 8003e92:	77fb      	strb	r3, [r7, #31]
 8003e94:	e0cc      	b.n	8004030 <UART_SetConfig+0x348>
 8003e96:	2302      	movs	r3, #2
 8003e98:	77fb      	strb	r3, [r7, #31]
 8003e9a:	e0c9      	b.n	8004030 <UART_SetConfig+0x348>
 8003e9c:	2304      	movs	r3, #4
 8003e9e:	77fb      	strb	r3, [r7, #31]
 8003ea0:	e0c6      	b.n	8004030 <UART_SetConfig+0x348>
 8003ea2:	2308      	movs	r3, #8
 8003ea4:	77fb      	strb	r3, [r7, #31]
 8003ea6:	e0c3      	b.n	8004030 <UART_SetConfig+0x348>
 8003ea8:	2310      	movs	r3, #16
 8003eaa:	77fb      	strb	r3, [r7, #31]
 8003eac:	e0c0      	b.n	8004030 <UART_SetConfig+0x348>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a44      	ldr	r2, [pc, #272]	; (8003fc4 <UART_SetConfig+0x2dc>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d125      	bne.n	8003f04 <UART_SetConfig+0x21c>
 8003eb8:	4b3e      	ldr	r3, [pc, #248]	; (8003fb4 <UART_SetConfig+0x2cc>)
 8003eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ec2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ec6:	d017      	beq.n	8003ef8 <UART_SetConfig+0x210>
 8003ec8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ecc:	d817      	bhi.n	8003efe <UART_SetConfig+0x216>
 8003ece:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ed2:	d00b      	beq.n	8003eec <UART_SetConfig+0x204>
 8003ed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ed8:	d811      	bhi.n	8003efe <UART_SetConfig+0x216>
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <UART_SetConfig+0x1fe>
 8003ede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ee2:	d006      	beq.n	8003ef2 <UART_SetConfig+0x20a>
 8003ee4:	e00b      	b.n	8003efe <UART_SetConfig+0x216>
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	77fb      	strb	r3, [r7, #31]
 8003eea:	e0a1      	b.n	8004030 <UART_SetConfig+0x348>
 8003eec:	2302      	movs	r3, #2
 8003eee:	77fb      	strb	r3, [r7, #31]
 8003ef0:	e09e      	b.n	8004030 <UART_SetConfig+0x348>
 8003ef2:	2304      	movs	r3, #4
 8003ef4:	77fb      	strb	r3, [r7, #31]
 8003ef6:	e09b      	b.n	8004030 <UART_SetConfig+0x348>
 8003ef8:	2308      	movs	r3, #8
 8003efa:	77fb      	strb	r3, [r7, #31]
 8003efc:	e098      	b.n	8004030 <UART_SetConfig+0x348>
 8003efe:	2310      	movs	r3, #16
 8003f00:	77fb      	strb	r3, [r7, #31]
 8003f02:	e095      	b.n	8004030 <UART_SetConfig+0x348>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a2f      	ldr	r2, [pc, #188]	; (8003fc8 <UART_SetConfig+0x2e0>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d125      	bne.n	8003f5a <UART_SetConfig+0x272>
 8003f0e:	4b29      	ldr	r3, [pc, #164]	; (8003fb4 <UART_SetConfig+0x2cc>)
 8003f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f1c:	d017      	beq.n	8003f4e <UART_SetConfig+0x266>
 8003f1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f22:	d817      	bhi.n	8003f54 <UART_SetConfig+0x26c>
 8003f24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f28:	d00b      	beq.n	8003f42 <UART_SetConfig+0x25a>
 8003f2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f2e:	d811      	bhi.n	8003f54 <UART_SetConfig+0x26c>
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d003      	beq.n	8003f3c <UART_SetConfig+0x254>
 8003f34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f38:	d006      	beq.n	8003f48 <UART_SetConfig+0x260>
 8003f3a:	e00b      	b.n	8003f54 <UART_SetConfig+0x26c>
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	77fb      	strb	r3, [r7, #31]
 8003f40:	e076      	b.n	8004030 <UART_SetConfig+0x348>
 8003f42:	2302      	movs	r3, #2
 8003f44:	77fb      	strb	r3, [r7, #31]
 8003f46:	e073      	b.n	8004030 <UART_SetConfig+0x348>
 8003f48:	2304      	movs	r3, #4
 8003f4a:	77fb      	strb	r3, [r7, #31]
 8003f4c:	e070      	b.n	8004030 <UART_SetConfig+0x348>
 8003f4e:	2308      	movs	r3, #8
 8003f50:	77fb      	strb	r3, [r7, #31]
 8003f52:	e06d      	b.n	8004030 <UART_SetConfig+0x348>
 8003f54:	2310      	movs	r3, #16
 8003f56:	77fb      	strb	r3, [r7, #31]
 8003f58:	e06a      	b.n	8004030 <UART_SetConfig+0x348>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a1b      	ldr	r2, [pc, #108]	; (8003fcc <UART_SetConfig+0x2e4>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d138      	bne.n	8003fd6 <UART_SetConfig+0x2ee>
 8003f64:	4b13      	ldr	r3, [pc, #76]	; (8003fb4 <UART_SetConfig+0x2cc>)
 8003f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003f6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f72:	d017      	beq.n	8003fa4 <UART_SetConfig+0x2bc>
 8003f74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f78:	d82a      	bhi.n	8003fd0 <UART_SetConfig+0x2e8>
 8003f7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f7e:	d00b      	beq.n	8003f98 <UART_SetConfig+0x2b0>
 8003f80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f84:	d824      	bhi.n	8003fd0 <UART_SetConfig+0x2e8>
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <UART_SetConfig+0x2aa>
 8003f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f8e:	d006      	beq.n	8003f9e <UART_SetConfig+0x2b6>
 8003f90:	e01e      	b.n	8003fd0 <UART_SetConfig+0x2e8>
 8003f92:	2300      	movs	r3, #0
 8003f94:	77fb      	strb	r3, [r7, #31]
 8003f96:	e04b      	b.n	8004030 <UART_SetConfig+0x348>
 8003f98:	2302      	movs	r3, #2
 8003f9a:	77fb      	strb	r3, [r7, #31]
 8003f9c:	e048      	b.n	8004030 <UART_SetConfig+0x348>
 8003f9e:	2304      	movs	r3, #4
 8003fa0:	77fb      	strb	r3, [r7, #31]
 8003fa2:	e045      	b.n	8004030 <UART_SetConfig+0x348>
 8003fa4:	2308      	movs	r3, #8
 8003fa6:	77fb      	strb	r3, [r7, #31]
 8003fa8:	e042      	b.n	8004030 <UART_SetConfig+0x348>
 8003faa:	bf00      	nop
 8003fac:	efff69f3 	.word	0xefff69f3
 8003fb0:	40011000 	.word	0x40011000
 8003fb4:	40023800 	.word	0x40023800
 8003fb8:	40004400 	.word	0x40004400
 8003fbc:	40004800 	.word	0x40004800
 8003fc0:	40004c00 	.word	0x40004c00
 8003fc4:	40005000 	.word	0x40005000
 8003fc8:	40011400 	.word	0x40011400
 8003fcc:	40007800 	.word	0x40007800
 8003fd0:	2310      	movs	r3, #16
 8003fd2:	77fb      	strb	r3, [r7, #31]
 8003fd4:	e02c      	b.n	8004030 <UART_SetConfig+0x348>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a72      	ldr	r2, [pc, #456]	; (80041a4 <UART_SetConfig+0x4bc>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d125      	bne.n	800402c <UART_SetConfig+0x344>
 8003fe0:	4b71      	ldr	r3, [pc, #452]	; (80041a8 <UART_SetConfig+0x4c0>)
 8003fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003fea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003fee:	d017      	beq.n	8004020 <UART_SetConfig+0x338>
 8003ff0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ff4:	d817      	bhi.n	8004026 <UART_SetConfig+0x33e>
 8003ff6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ffa:	d00b      	beq.n	8004014 <UART_SetConfig+0x32c>
 8003ffc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004000:	d811      	bhi.n	8004026 <UART_SetConfig+0x33e>
 8004002:	2b00      	cmp	r3, #0
 8004004:	d003      	beq.n	800400e <UART_SetConfig+0x326>
 8004006:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800400a:	d006      	beq.n	800401a <UART_SetConfig+0x332>
 800400c:	e00b      	b.n	8004026 <UART_SetConfig+0x33e>
 800400e:	2300      	movs	r3, #0
 8004010:	77fb      	strb	r3, [r7, #31]
 8004012:	e00d      	b.n	8004030 <UART_SetConfig+0x348>
 8004014:	2302      	movs	r3, #2
 8004016:	77fb      	strb	r3, [r7, #31]
 8004018:	e00a      	b.n	8004030 <UART_SetConfig+0x348>
 800401a:	2304      	movs	r3, #4
 800401c:	77fb      	strb	r3, [r7, #31]
 800401e:	e007      	b.n	8004030 <UART_SetConfig+0x348>
 8004020:	2308      	movs	r3, #8
 8004022:	77fb      	strb	r3, [r7, #31]
 8004024:	e004      	b.n	8004030 <UART_SetConfig+0x348>
 8004026:	2310      	movs	r3, #16
 8004028:	77fb      	strb	r3, [r7, #31]
 800402a:	e001      	b.n	8004030 <UART_SetConfig+0x348>
 800402c:	2310      	movs	r3, #16
 800402e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	69db      	ldr	r3, [r3, #28]
 8004034:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004038:	d15b      	bne.n	80040f2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800403a:	7ffb      	ldrb	r3, [r7, #31]
 800403c:	2b08      	cmp	r3, #8
 800403e:	d828      	bhi.n	8004092 <UART_SetConfig+0x3aa>
 8004040:	a201      	add	r2, pc, #4	; (adr r2, 8004048 <UART_SetConfig+0x360>)
 8004042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004046:	bf00      	nop
 8004048:	0800406d 	.word	0x0800406d
 800404c:	08004075 	.word	0x08004075
 8004050:	0800407d 	.word	0x0800407d
 8004054:	08004093 	.word	0x08004093
 8004058:	08004083 	.word	0x08004083
 800405c:	08004093 	.word	0x08004093
 8004060:	08004093 	.word	0x08004093
 8004064:	08004093 	.word	0x08004093
 8004068:	0800408b 	.word	0x0800408b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800406c:	f7ff f99e 	bl	80033ac <HAL_RCC_GetPCLK1Freq>
 8004070:	61b8      	str	r0, [r7, #24]
        break;
 8004072:	e013      	b.n	800409c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004074:	f7ff f9ae 	bl	80033d4 <HAL_RCC_GetPCLK2Freq>
 8004078:	61b8      	str	r0, [r7, #24]
        break;
 800407a:	e00f      	b.n	800409c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800407c:	4b4b      	ldr	r3, [pc, #300]	; (80041ac <UART_SetConfig+0x4c4>)
 800407e:	61bb      	str	r3, [r7, #24]
        break;
 8004080:	e00c      	b.n	800409c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004082:	f7ff f881 	bl	8003188 <HAL_RCC_GetSysClockFreq>
 8004086:	61b8      	str	r0, [r7, #24]
        break;
 8004088:	e008      	b.n	800409c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800408a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800408e:	61bb      	str	r3, [r7, #24]
        break;
 8004090:	e004      	b.n	800409c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004092:	2300      	movs	r3, #0
 8004094:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	77bb      	strb	r3, [r7, #30]
        break;
 800409a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d074      	beq.n	800418c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	005a      	lsls	r2, r3, #1
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	085b      	lsrs	r3, r3, #1
 80040ac:	441a      	add	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	2b0f      	cmp	r3, #15
 80040bc:	d916      	bls.n	80040ec <UART_SetConfig+0x404>
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c4:	d212      	bcs.n	80040ec <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	f023 030f 	bic.w	r3, r3, #15
 80040ce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	085b      	lsrs	r3, r3, #1
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	f003 0307 	and.w	r3, r3, #7
 80040da:	b29a      	uxth	r2, r3
 80040dc:	89fb      	ldrh	r3, [r7, #14]
 80040de:	4313      	orrs	r3, r2
 80040e0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	89fa      	ldrh	r2, [r7, #14]
 80040e8:	60da      	str	r2, [r3, #12]
 80040ea:	e04f      	b.n	800418c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	77bb      	strb	r3, [r7, #30]
 80040f0:	e04c      	b.n	800418c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040f2:	7ffb      	ldrb	r3, [r7, #31]
 80040f4:	2b08      	cmp	r3, #8
 80040f6:	d828      	bhi.n	800414a <UART_SetConfig+0x462>
 80040f8:	a201      	add	r2, pc, #4	; (adr r2, 8004100 <UART_SetConfig+0x418>)
 80040fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fe:	bf00      	nop
 8004100:	08004125 	.word	0x08004125
 8004104:	0800412d 	.word	0x0800412d
 8004108:	08004135 	.word	0x08004135
 800410c:	0800414b 	.word	0x0800414b
 8004110:	0800413b 	.word	0x0800413b
 8004114:	0800414b 	.word	0x0800414b
 8004118:	0800414b 	.word	0x0800414b
 800411c:	0800414b 	.word	0x0800414b
 8004120:	08004143 	.word	0x08004143
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004124:	f7ff f942 	bl	80033ac <HAL_RCC_GetPCLK1Freq>
 8004128:	61b8      	str	r0, [r7, #24]
        break;
 800412a:	e013      	b.n	8004154 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800412c:	f7ff f952 	bl	80033d4 <HAL_RCC_GetPCLK2Freq>
 8004130:	61b8      	str	r0, [r7, #24]
        break;
 8004132:	e00f      	b.n	8004154 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004134:	4b1d      	ldr	r3, [pc, #116]	; (80041ac <UART_SetConfig+0x4c4>)
 8004136:	61bb      	str	r3, [r7, #24]
        break;
 8004138:	e00c      	b.n	8004154 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800413a:	f7ff f825 	bl	8003188 <HAL_RCC_GetSysClockFreq>
 800413e:	61b8      	str	r0, [r7, #24]
        break;
 8004140:	e008      	b.n	8004154 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004146:	61bb      	str	r3, [r7, #24]
        break;
 8004148:	e004      	b.n	8004154 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800414a:	2300      	movs	r3, #0
 800414c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	77bb      	strb	r3, [r7, #30]
        break;
 8004152:	bf00      	nop
    }

    if (pclk != 0U)
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d018      	beq.n	800418c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	085a      	lsrs	r2, r3, #1
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	441a      	add	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	fbb2 f3f3 	udiv	r3, r2, r3
 800416c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	2b0f      	cmp	r3, #15
 8004172:	d909      	bls.n	8004188 <UART_SetConfig+0x4a0>
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800417a:	d205      	bcs.n	8004188 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	b29a      	uxth	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	60da      	str	r2, [r3, #12]
 8004186:	e001      	b.n	800418c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004198:	7fbb      	ldrb	r3, [r7, #30]
}
 800419a:	4618      	mov	r0, r3
 800419c:	3720      	adds	r7, #32
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	40007c00 	.word	0x40007c00
 80041a8:	40023800 	.word	0x40023800
 80041ac:	00f42400 	.word	0x00f42400

080041b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00a      	beq.n	80041da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00a      	beq.n	80041fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004200:	f003 0304 	and.w	r3, r3, #4
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00a      	beq.n	800421e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	430a      	orrs	r2, r1
 800421c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004222:	f003 0308 	and.w	r3, r3, #8
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00a      	beq.n	8004240 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	f003 0310 	and.w	r3, r3, #16
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00a      	beq.n	8004262 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	430a      	orrs	r2, r1
 8004260:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004266:	f003 0320 	and.w	r3, r3, #32
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00a      	beq.n	8004284 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	430a      	orrs	r2, r1
 8004282:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428c:	2b00      	cmp	r3, #0
 800428e:	d01a      	beq.n	80042c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042ae:	d10a      	bne.n	80042c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00a      	beq.n	80042e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	430a      	orrs	r2, r1
 80042e6:	605a      	str	r2, [r3, #4]
  }
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af02      	add	r7, sp, #8
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004304:	f7fd fbfc 	bl	8001b00 <HAL_GetTick>
 8004308:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0308 	and.w	r3, r3, #8
 8004314:	2b08      	cmp	r3, #8
 8004316:	d10e      	bne.n	8004336 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004318:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f831 	bl	800438e <UART_WaitOnFlagUntilTimeout>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e027      	b.n	8004386 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b04      	cmp	r3, #4
 8004342:	d10e      	bne.n	8004362 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004344:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f81b 	bl	800438e <UART_WaitOnFlagUntilTimeout>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e011      	b.n	8004386 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2220      	movs	r2, #32
 8004366:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2220      	movs	r2, #32
 800436c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b09c      	sub	sp, #112	; 0x70
 8004392:	af00      	add	r7, sp, #0
 8004394:	60f8      	str	r0, [r7, #12]
 8004396:	60b9      	str	r1, [r7, #8]
 8004398:	603b      	str	r3, [r7, #0]
 800439a:	4613      	mov	r3, r2
 800439c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800439e:	e0a7      	b.n	80044f0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a6:	f000 80a3 	beq.w	80044f0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043aa:	f7fd fba9 	bl	8001b00 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d302      	bcc.n	80043c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80043ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d13f      	bne.n	8004440 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043c8:	e853 3f00 	ldrex	r3, [r3]
 80043cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80043ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043d4:	667b      	str	r3, [r7, #100]	; 0x64
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	461a      	mov	r2, r3
 80043dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043e0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80043e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80043e6:	e841 2300 	strex	r3, r2, [r1]
 80043ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80043ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1e6      	bne.n	80043c0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	3308      	adds	r3, #8
 80043f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043fc:	e853 3f00 	ldrex	r3, [r3]
 8004400:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004404:	f023 0301 	bic.w	r3, r3, #1
 8004408:	663b      	str	r3, [r7, #96]	; 0x60
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	3308      	adds	r3, #8
 8004410:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004412:	64ba      	str	r2, [r7, #72]	; 0x48
 8004414:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004416:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004418:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800441a:	e841 2300 	strex	r3, r2, [r1]
 800441e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1e5      	bne.n	80043f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2220      	movs	r2, #32
 800442a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2220      	movs	r2, #32
 8004430:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e068      	b.n	8004512 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0304 	and.w	r3, r3, #4
 800444a:	2b00      	cmp	r3, #0
 800444c:	d050      	beq.n	80044f0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	69db      	ldr	r3, [r3, #28]
 8004454:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004458:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800445c:	d148      	bne.n	80044f0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004466:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004470:	e853 3f00 	ldrex	r3, [r3]
 8004474:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004478:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800447c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	461a      	mov	r2, r3
 8004484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004486:	637b      	str	r3, [r7, #52]	; 0x34
 8004488:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800448c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800448e:	e841 2300 	strex	r3, r2, [r1]
 8004492:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1e6      	bne.n	8004468 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	3308      	adds	r3, #8
 80044a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	e853 3f00 	ldrex	r3, [r3]
 80044a8:	613b      	str	r3, [r7, #16]
   return(result);
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	f023 0301 	bic.w	r3, r3, #1
 80044b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3308      	adds	r3, #8
 80044b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80044ba:	623a      	str	r2, [r7, #32]
 80044bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044be:	69f9      	ldr	r1, [r7, #28]
 80044c0:	6a3a      	ldr	r2, [r7, #32]
 80044c2:	e841 2300 	strex	r3, r2, [r1]
 80044c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1e5      	bne.n	800449a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2220      	movs	r2, #32
 80044d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2220      	movs	r2, #32
 80044d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2220      	movs	r2, #32
 80044e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e010      	b.n	8004512 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	69da      	ldr	r2, [r3, #28]
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	4013      	ands	r3, r2
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	bf0c      	ite	eq
 8004500:	2301      	moveq	r3, #1
 8004502:	2300      	movne	r3, #0
 8004504:	b2db      	uxtb	r3, r3
 8004506:	461a      	mov	r2, r3
 8004508:	79fb      	ldrb	r3, [r7, #7]
 800450a:	429a      	cmp	r2, r3
 800450c:	f43f af48 	beq.w	80043a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3770      	adds	r7, #112	; 0x70
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
	...

0800451c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800451c:	b084      	sub	sp, #16
 800451e:	b580      	push	{r7, lr}
 8004520:	b084      	sub	sp, #16
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
 8004526:	f107 001c 	add.w	r0, r7, #28
 800452a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800452e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004530:	2b01      	cmp	r3, #1
 8004532:	d120      	bne.n	8004576 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004538:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68da      	ldr	r2, [r3, #12]
 8004544:	4b20      	ldr	r3, [pc, #128]	; (80045c8 <USB_CoreInit+0xac>)
 8004546:	4013      	ands	r3, r2
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800455a:	2b01      	cmp	r3, #1
 800455c:	d105      	bne.n	800456a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 fa96 	bl	8004a9c <USB_CoreReset>
 8004570:	4603      	mov	r3, r0
 8004572:	73fb      	strb	r3, [r7, #15]
 8004574:	e010      	b.n	8004598 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 fa8a 	bl	8004a9c <USB_CoreReset>
 8004588:	4603      	mov	r3, r0
 800458a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004590:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459a:	2b01      	cmp	r3, #1
 800459c:	d10b      	bne.n	80045b6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f043 0206 	orr.w	r2, r3, #6
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f043 0220 	orr.w	r2, r3, #32
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80045b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045c2:	b004      	add	sp, #16
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	ffbdffbf 	.word	0xffbdffbf

080045cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f023 0201 	bic.w	r2, r3, #1
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b084      	sub	sp, #16
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
 80045f6:	460b      	mov	r3, r1
 80045f8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80045fa:	2300      	movs	r3, #0
 80045fc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800460a:	78fb      	ldrb	r3, [r7, #3]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d115      	bne.n	800463c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800461c:	2001      	movs	r0, #1
 800461e:	f7fd fa7b 	bl	8001b18 <HAL_Delay>
      ms++;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	3301      	adds	r3, #1
 8004626:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 fa29 	bl	8004a80 <USB_GetMode>
 800462e:	4603      	mov	r3, r0
 8004630:	2b01      	cmp	r3, #1
 8004632:	d01e      	beq.n	8004672 <USB_SetCurrentMode+0x84>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2b31      	cmp	r3, #49	; 0x31
 8004638:	d9f0      	bls.n	800461c <USB_SetCurrentMode+0x2e>
 800463a:	e01a      	b.n	8004672 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800463c:	78fb      	ldrb	r3, [r7, #3]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d115      	bne.n	800466e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800464e:	2001      	movs	r0, #1
 8004650:	f7fd fa62 	bl	8001b18 <HAL_Delay>
      ms++;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	3301      	adds	r3, #1
 8004658:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 fa10 	bl	8004a80 <USB_GetMode>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d005      	beq.n	8004672 <USB_SetCurrentMode+0x84>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2b31      	cmp	r3, #49	; 0x31
 800466a:	d9f0      	bls.n	800464e <USB_SetCurrentMode+0x60>
 800466c:	e001      	b.n	8004672 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e005      	b.n	800467e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2b32      	cmp	r3, #50	; 0x32
 8004676:	d101      	bne.n	800467c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e000      	b.n	800467e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
	...

08004688 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004688:	b084      	sub	sp, #16
 800468a:	b580      	push	{r7, lr}
 800468c:	b086      	sub	sp, #24
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
 8004692:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004696:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800469a:	2300      	movs	r3, #0
 800469c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80046a2:	2300      	movs	r3, #0
 80046a4:	613b      	str	r3, [r7, #16]
 80046a6:	e009      	b.n	80046bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	3340      	adds	r3, #64	; 0x40
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4413      	add	r3, r2
 80046b2:	2200      	movs	r2, #0
 80046b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	3301      	adds	r3, #1
 80046ba:	613b      	str	r3, [r7, #16]
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	2b0e      	cmp	r3, #14
 80046c0:	d9f2      	bls.n	80046a8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80046c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d11c      	bne.n	8004702 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046d6:	f043 0302 	orr.w	r3, r3, #2
 80046da:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	601a      	str	r2, [r3, #0]
 8004700:	e005      	b.n	800470e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004706:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004714:	461a      	mov	r2, r3
 8004716:	2300      	movs	r3, #0
 8004718:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004720:	4619      	mov	r1, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004728:	461a      	mov	r2, r3
 800472a:	680b      	ldr	r3, [r1, #0]
 800472c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800472e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004730:	2b01      	cmp	r3, #1
 8004732:	d10c      	bne.n	800474e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004736:	2b00      	cmp	r3, #0
 8004738:	d104      	bne.n	8004744 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800473a:	2100      	movs	r1, #0
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 f965 	bl	8004a0c <USB_SetDevSpeed>
 8004742:	e008      	b.n	8004756 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004744:	2101      	movs	r1, #1
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f960 	bl	8004a0c <USB_SetDevSpeed>
 800474c:	e003      	b.n	8004756 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800474e:	2103      	movs	r1, #3
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 f95b 	bl	8004a0c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004756:	2110      	movs	r1, #16
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 f8f3 	bl	8004944 <USB_FlushTxFifo>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 f91f 	bl	80049ac <USB_FlushRxFifo>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d001      	beq.n	8004778 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800477e:	461a      	mov	r2, r3
 8004780:	2300      	movs	r3, #0
 8004782:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800478a:	461a      	mov	r2, r3
 800478c:	2300      	movs	r3, #0
 800478e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004796:	461a      	mov	r2, r3
 8004798:	2300      	movs	r3, #0
 800479a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800479c:	2300      	movs	r3, #0
 800479e:	613b      	str	r3, [r7, #16]
 80047a0:	e043      	b.n	800482a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	015a      	lsls	r2, r3, #5
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	4413      	add	r3, r2
 80047aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047b8:	d118      	bne.n	80047ec <USB_DevInit+0x164>
    {
      if (i == 0U)
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10a      	bne.n	80047d6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	015a      	lsls	r2, r3, #5
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	4413      	add	r3, r2
 80047c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047cc:	461a      	mov	r2, r3
 80047ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047d2:	6013      	str	r3, [r2, #0]
 80047d4:	e013      	b.n	80047fe <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	015a      	lsls	r2, r3, #5
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	4413      	add	r3, r2
 80047de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e2:	461a      	mov	r2, r3
 80047e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80047e8:	6013      	str	r3, [r2, #0]
 80047ea:	e008      	b.n	80047fe <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	015a      	lsls	r2, r3, #5
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	4413      	add	r3, r2
 80047f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f8:	461a      	mov	r2, r3
 80047fa:	2300      	movs	r3, #0
 80047fc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	015a      	lsls	r2, r3, #5
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	4413      	add	r3, r2
 8004806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800480a:	461a      	mov	r2, r3
 800480c:	2300      	movs	r3, #0
 800480e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4413      	add	r3, r2
 8004818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800481c:	461a      	mov	r2, r3
 800481e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004822:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	3301      	adds	r3, #1
 8004828:	613b      	str	r3, [r7, #16]
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	429a      	cmp	r2, r3
 8004830:	d3b7      	bcc.n	80047a2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004832:	2300      	movs	r3, #0
 8004834:	613b      	str	r3, [r7, #16]
 8004836:	e043      	b.n	80048c0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	015a      	lsls	r2, r3, #5
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	4413      	add	r3, r2
 8004840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800484a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800484e:	d118      	bne.n	8004882 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10a      	bne.n	800486c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	015a      	lsls	r2, r3, #5
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	4413      	add	r3, r2
 800485e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004862:	461a      	mov	r2, r3
 8004864:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004868:	6013      	str	r3, [r2, #0]
 800486a:	e013      	b.n	8004894 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	015a      	lsls	r2, r3, #5
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4413      	add	r3, r2
 8004874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004878:	461a      	mov	r2, r3
 800487a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800487e:	6013      	str	r3, [r2, #0]
 8004880:	e008      	b.n	8004894 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	015a      	lsls	r2, r3, #5
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	4413      	add	r3, r2
 800488a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800488e:	461a      	mov	r2, r3
 8004890:	2300      	movs	r3, #0
 8004892:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	015a      	lsls	r2, r3, #5
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4413      	add	r3, r2
 800489c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a0:	461a      	mov	r2, r3
 80048a2:	2300      	movs	r3, #0
 80048a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	015a      	lsls	r2, r3, #5
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	4413      	add	r3, r2
 80048ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048b2:	461a      	mov	r2, r3
 80048b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	3301      	adds	r3, #1
 80048be:	613b      	str	r3, [r7, #16]
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d3b7      	bcc.n	8004838 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048da:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80048e8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80048ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d105      	bne.n	80048fc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	f043 0210 	orr.w	r2, r3, #16
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	699a      	ldr	r2, [r3, #24]
 8004900:	4b0e      	ldr	r3, [pc, #56]	; (800493c <USB_DevInit+0x2b4>)
 8004902:	4313      	orrs	r3, r2
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800490a:	2b00      	cmp	r3, #0
 800490c:	d005      	beq.n	800491a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	f043 0208 	orr.w	r2, r3, #8
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800491a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800491c:	2b01      	cmp	r3, #1
 800491e:	d105      	bne.n	800492c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	699a      	ldr	r2, [r3, #24]
 8004924:	4b06      	ldr	r3, [pc, #24]	; (8004940 <USB_DevInit+0x2b8>)
 8004926:	4313      	orrs	r3, r2
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800492c:	7dfb      	ldrb	r3, [r7, #23]
}
 800492e:	4618      	mov	r0, r3
 8004930:	3718      	adds	r7, #24
 8004932:	46bd      	mov	sp, r7
 8004934:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004938:	b004      	add	sp, #16
 800493a:	4770      	bx	lr
 800493c:	803c3800 	.word	0x803c3800
 8004940:	40000004 	.word	0x40000004

08004944 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800494e:	2300      	movs	r3, #0
 8004950:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	3301      	adds	r3, #1
 8004956:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4a13      	ldr	r2, [pc, #76]	; (80049a8 <USB_FlushTxFifo+0x64>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d901      	bls.n	8004964 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e01b      	b.n	800499c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	2b00      	cmp	r3, #0
 800496a:	daf2      	bge.n	8004952 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800496c:	2300      	movs	r3, #0
 800496e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	019b      	lsls	r3, r3, #6
 8004974:	f043 0220 	orr.w	r2, r3, #32
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	3301      	adds	r3, #1
 8004980:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	4a08      	ldr	r2, [pc, #32]	; (80049a8 <USB_FlushTxFifo+0x64>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d901      	bls.n	800498e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e006      	b.n	800499c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	f003 0320 	and.w	r3, r3, #32
 8004996:	2b20      	cmp	r3, #32
 8004998:	d0f0      	beq.n	800497c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	00030d40 	.word	0x00030d40

080049ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049b4:	2300      	movs	r3, #0
 80049b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	3301      	adds	r3, #1
 80049bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	4a11      	ldr	r2, [pc, #68]	; (8004a08 <USB_FlushRxFifo+0x5c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d901      	bls.n	80049ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e018      	b.n	80049fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	daf2      	bge.n	80049b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80049d2:	2300      	movs	r3, #0
 80049d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2210      	movs	r2, #16
 80049da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	3301      	adds	r3, #1
 80049e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	4a08      	ldr	r2, [pc, #32]	; (8004a08 <USB_FlushRxFifo+0x5c>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d901      	bls.n	80049ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e006      	b.n	80049fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	f003 0310 	and.w	r3, r3, #16
 80049f6:	2b10      	cmp	r3, #16
 80049f8:	d0f0      	beq.n	80049dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr
 8004a08:	00030d40 	.word	0x00030d40

08004a0c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	460b      	mov	r3, r1
 8004a16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	78fb      	ldrb	r3, [r7, #3]
 8004a26:	68f9      	ldr	r1, [r7, #12]
 8004a28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b085      	sub	sp, #20
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004a58:	f023 0303 	bic.w	r3, r3, #3
 8004a5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a6c:	f043 0302 	orr.w	r3, r3, #2
 8004a70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3714      	adds	r7, #20
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	f003 0301 	and.w	r3, r3, #1
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	4a13      	ldr	r2, [pc, #76]	; (8004b00 <USB_CoreReset+0x64>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d901      	bls.n	8004aba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e01b      	b.n	8004af2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	daf2      	bge.n	8004aa8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	f043 0201 	orr.w	r2, r3, #1
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	4a09      	ldr	r2, [pc, #36]	; (8004b00 <USB_CoreReset+0x64>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d901      	bls.n	8004ae4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e006      	b.n	8004af2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d0f0      	beq.n	8004ad2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3714      	adds	r7, #20
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	00030d40 	.word	0x00030d40

08004b04 <__libc_init_array>:
 8004b04:	b570      	push	{r4, r5, r6, lr}
 8004b06:	4d0d      	ldr	r5, [pc, #52]	; (8004b3c <__libc_init_array+0x38>)
 8004b08:	4c0d      	ldr	r4, [pc, #52]	; (8004b40 <__libc_init_array+0x3c>)
 8004b0a:	1b64      	subs	r4, r4, r5
 8004b0c:	10a4      	asrs	r4, r4, #2
 8004b0e:	2600      	movs	r6, #0
 8004b10:	42a6      	cmp	r6, r4
 8004b12:	d109      	bne.n	8004b28 <__libc_init_array+0x24>
 8004b14:	4d0b      	ldr	r5, [pc, #44]	; (8004b44 <__libc_init_array+0x40>)
 8004b16:	4c0c      	ldr	r4, [pc, #48]	; (8004b48 <__libc_init_array+0x44>)
 8004b18:	f000 f820 	bl	8004b5c <_init>
 8004b1c:	1b64      	subs	r4, r4, r5
 8004b1e:	10a4      	asrs	r4, r4, #2
 8004b20:	2600      	movs	r6, #0
 8004b22:	42a6      	cmp	r6, r4
 8004b24:	d105      	bne.n	8004b32 <__libc_init_array+0x2e>
 8004b26:	bd70      	pop	{r4, r5, r6, pc}
 8004b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b2c:	4798      	blx	r3
 8004b2e:	3601      	adds	r6, #1
 8004b30:	e7ee      	b.n	8004b10 <__libc_init_array+0xc>
 8004b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b36:	4798      	blx	r3
 8004b38:	3601      	adds	r6, #1
 8004b3a:	e7f2      	b.n	8004b22 <__libc_init_array+0x1e>
 8004b3c:	08004b94 	.word	0x08004b94
 8004b40:	08004b94 	.word	0x08004b94
 8004b44:	08004b94 	.word	0x08004b94
 8004b48:	08004b98 	.word	0x08004b98

08004b4c <memset>:
 8004b4c:	4402      	add	r2, r0
 8004b4e:	4603      	mov	r3, r0
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d100      	bne.n	8004b56 <memset+0xa>
 8004b54:	4770      	bx	lr
 8004b56:	f803 1b01 	strb.w	r1, [r3], #1
 8004b5a:	e7f9      	b.n	8004b50 <memset+0x4>

08004b5c <_init>:
 8004b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b5e:	bf00      	nop
 8004b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b62:	bc08      	pop	{r3}
 8004b64:	469e      	mov	lr, r3
 8004b66:	4770      	bx	lr

08004b68 <_fini>:
 8004b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b6a:	bf00      	nop
 8004b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b6e:	bc08      	pop	{r3}
 8004b70:	469e      	mov	lr, r3
 8004b72:	4770      	bx	lr
