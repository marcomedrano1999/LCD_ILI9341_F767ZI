
LCD-ILI9341-F767ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000491c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004b14  08004b14  00014b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b2c  08004b2c  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  08004b2c  08004b2c  00014b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b34  08004b34  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b34  08004b34  00014b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b38  08004b38  00014b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004b3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000010  08004b4c  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000b0  08004bec  000200b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000056c0  20000150  08004c8c  00020150  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20005810  08004c8c  00025810  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012f30  00000000  00000000  0002017e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002556  00000000  00000000  000330ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000df0  00000000  00000000  00035608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000d08  00000000  00000000  000363f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028a14  00000000  00000000  00037100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000104d7  00000000  00000000  0005fb14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fa4ac  00000000  00000000  0006ffeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0016a497  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003a1c  00000000  00000000  0016a4e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000150 	.word	0x20000150
 8000214:	00000000 	.word	0x00000000
 8000218:	08004afc 	.word	0x08004afc

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000154 	.word	0x20000154
 8000234:	08004afc 	.word	0x08004afc

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <LCD_ILI9341_Init>:
uint8_t bsp_db[DB_SIZE];
uint8_t bsp_wb[DB_SIZE];


void LCD_ILI9341_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	//Initialize the pins
	LCD_GPIO_Init();
 8000540:	f000 f836 	bl	80005b0 <LCD_GPIO_Init>

	// Initialize SPI peripheral
	LCD_SPI_Init();
 8000544:	f000 f8dc 	bl	8000700 <LCD_SPI_Init>

	// Enable SPI peripheral
	LCD_SPI_Enable();
 8000548:	f000 f928 	bl	800079c <LCD_SPI_Enable>

	// Reset the LCD
	LCD_Reset();
 800054c:	f000 f93a 	bl	80007c4 <LCD_Reset>

	// Set display format data
	hlcd->orientation = BSP_LCD_ORIENTATION;
 8000550:	4b16      	ldr	r3, [pc, #88]	; (80005ac <LCD_ILI9341_Init+0x70>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2200      	movs	r2, #0
 8000556:	701a      	strb	r2, [r3, #0]
	hlcd->pixel_format = BSP_LCD_PIXEL_FMT;
 8000558:	4b14      	ldr	r3, [pc, #80]	; (80005ac <LCD_ILI9341_Init+0x70>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2202      	movs	r2, #2
 800055e:	705a      	strb	r2, [r3, #1]
	hlcd->area.x1 = 0;
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <LCD_ILI9341_Init+0x70>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2200      	movs	r2, #0
 8000566:	831a      	strh	r2, [r3, #24]
	hlcd->area.x2 = BSP_LCD_ACTIVE_WIDTH-1;
 8000568:	4b10      	ldr	r3, [pc, #64]	; (80005ac <LCD_ILI9341_Init+0x70>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	22ef      	movs	r2, #239	; 0xef
 800056e:	835a      	strh	r2, [r3, #26]
	hlcd->area.y1 = 0;
 8000570:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <LCD_ILI9341_Init+0x70>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2200      	movs	r2, #0
 8000576:	839a      	strh	r2, [r3, #28]
	hlcd->area.y2 = BSP_LCD_ACTIVE_HEIGHT-1;
 8000578:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <LCD_ILI9341_Init+0x70>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f240 123f 	movw	r2, #319	; 0x13f
 8000580:	83da      	strh	r2, [r3, #30]

	// Configure the LCD
	LCD_Config();
 8000582:	f000 f9e1 	bl	8000948 <LCD_Config>

	// Configure the display
	lcd_set_display_area(&hlcd->area);
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <LCD_ILI9341_Init+0x70>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	3318      	adds	r3, #24
 800058c:	4618      	mov	r0, r3
 800058e:	f000 fb7a 	bl	8000c86 <lcd_set_display_area>
	lcd_set_orientation(hlcd->orientation);
 8000592:	4b06      	ldr	r3, [pc, #24]	; (80005ac <LCD_ILI9341_Init+0x70>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	4618      	mov	r0, r3
 800059a:	f000 fc0f 	bl	8000dbc <lcd_set_orientation>
	lcd_buffer_init(hlcd);
 800059e:	4b03      	ldr	r3, [pc, #12]	; (80005ac <LCD_ILI9341_Init+0x70>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 fc28 	bl	8000df8 <lcd_buffer_init>
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000000 	.word	0x20000000

080005b0 <LCD_GPIO_Init>:



void LCD_GPIO_Init(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
	RCC_TypeDef *pRCC = RCC;
 80005b6:	4b50      	ldr	r3, [pc, #320]	; (80006f8 <LCD_GPIO_Init+0x148>)
 80005b8:	607b      	str	r3, [r7, #4]
	GPIO_TypeDef *pGPIOC = GPIOC;
 80005ba:	4b50      	ldr	r3, [pc, #320]	; (80006fc <LCD_GPIO_Init+0x14c>)
 80005bc:	603b      	str	r3, [r7, #0]

	// Initialize peripheral clock
	pRCC->AHB1ENR |= (1 << 2);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f043 0204 	orr.w	r2, r3, #4
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	631a      	str	r2, [r3, #48]	; 0x30

	// Set pins mode
	pGPIOC->MODER |= (1 << (LCD_RESX_PIN*2)); // RESX in general purpose mode
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	601a      	str	r2, [r3, #0]
	pGPIOC->MODER |= (1 << (LCD_CSX_PIN*2)); // CSX in general purpose mode
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	601a      	str	r2, [r3, #0]
	pGPIOC->MODER |= (1 << (LCD_DCX_PIN*2)); // DCX in general purpose mode
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	601a      	str	r2, [r3, #0]
	pGPIOC->MODER |= (2 << (LCD_SCL_PIN*2)); // SCL in alternate function mode
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	601a      	str	r2, [r3, #0]
	pGPIOC->MODER |= (2 << (LCD_SDI_PIN*2)); // SDI in alternate function mode
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	601a      	str	r2, [r3, #0]
	pGPIOC->MODER |= (2 << (LCD_SDO_PIN*2)); // SDO in alternate function mode
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	601a      	str	r2, [r3, #0]

	// Set pins output type
	pGPIOC->OTYPER &= ~(1 << LCD_RESX_PIN); // RESX in output push-pull
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	605a      	str	r2, [r3, #4]
	pGPIOC->OTYPER &= ~(1 << LCD_CSX_PIN); // CSX in output push-pull
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	605a      	str	r2, [r3, #4]
	pGPIOC->OTYPER &= ~(1 << LCD_DCX_PIN); // DCX in output push-pull
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	685b      	ldr	r3, [r3, #4]
 800062e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	605a      	str	r2, [r3, #4]
	pGPIOC->OTYPER &= ~(1 << LCD_SCL_PIN); // SCL in output push-pull
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	605a      	str	r2, [r3, #4]
	pGPIOC->OTYPER &= ~(1 << LCD_SDI_PIN); // SDI in output push-pull
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	685b      	ldr	r3, [r3, #4]
 8000646:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	605a      	str	r2, [r3, #4]
	pGPIOC->OTYPER &= ~(1 << LCD_SDO_PIN); // SDO in output push-pull
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	685b      	ldr	r3, [r3, #4]
 8000652:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	605a      	str	r2, [r3, #4]


	// set pins output speed register
	pGPIOC->OSPEEDR |= (2 << (LCD_RESX_PIN*2)); // RESX in high speed
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	689b      	ldr	r3, [r3, #8]
 800065e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	609a      	str	r2, [r3, #8]
	pGPIOC->OSPEEDR |= (2 << (LCD_CSX_PIN*2));  // CSX in high speed
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	689b      	ldr	r3, [r3, #8]
 800066a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	609a      	str	r2, [r3, #8]
	pGPIOC->OSPEEDR |= (2 << (LCD_DCX_PIN*2));  // DCX in high speed
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	689b      	ldr	r3, [r3, #8]
 8000676:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	609a      	str	r2, [r3, #8]
	pGPIOC->OSPEEDR |= (2 << (LCD_SCL_PIN*2));  // SCL in high speed
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	689b      	ldr	r3, [r3, #8]
 8000682:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	609a      	str	r2, [r3, #8]
	pGPIOC->OSPEEDR |= (2 << (LCD_SDI_PIN*2));  // SDI in high speed
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	689b      	ldr	r3, [r3, #8]
 800068e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	609a      	str	r2, [r3, #8]
	pGPIOC->OSPEEDR |= (2 << (LCD_SDO_PIN*2));  // SDO in high speed
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	689b      	ldr	r3, [r3, #8]
 800069a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	609a      	str	r2, [r3, #8]


	// set pins alternate function
	pGPIOC->AFR[1] |= (6 << ((LCD_SCL_PIN*4) - 32)); // SCL in AF6
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a6:	f443 62c0 	orr.w	r2, r3, #1536	; 0x600
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	625a      	str	r2, [r3, #36]	; 0x24
	pGPIOC->AFR[1] |= (6 << ((LCD_SDI_PIN*4) - 32)); // SDI in AF6
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006b2:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	625a      	str	r2, [r3, #36]	; 0x24
	pGPIOC->AFR[1] |= (6 << ((LCD_SDO_PIN*4) - 32)); // SDO in AF6
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006be:	f443 22c0 	orr.w	r2, r3, #393216	; 0x60000
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	625a      	str	r2, [r3, #36]	; 0x24


	// set output value for CSX, DCX and RESX
	pGPIOC->ODR |= (1 << LCD_RESX_PIN);		// CSX output to 1
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	695b      	ldr	r3, [r3, #20]
 80006ca:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	615a      	str	r2, [r3, #20]
	pGPIOC->ODR |= (1 << LCD_CSX_PIN);		// CSX output to 1
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	695b      	ldr	r3, [r3, #20]
 80006d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	615a      	str	r2, [r3, #20]
	pGPIOC->ODR |= (1 << LCD_DCX_PIN);		// CSX output to 1
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	695b      	ldr	r3, [r3, #20]
 80006e2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	615a      	str	r2, [r3, #20]


}
 80006ea:	bf00      	nop
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40020800 	.word	0x40020800

08000700 <LCD_SPI_Init>:


void LCD_SPI_Init(void)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
	RCC_TypeDef *pRCC = RCC;
 8000706:	4b23      	ldr	r3, [pc, #140]	; (8000794 <LCD_SPI_Init+0x94>)
 8000708:	607b      	str	r3, [r7, #4]
	SPI_TypeDef *pSPI = SPI3;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <LCD_SPI_Init+0x98>)
 800070c:	603b      	str	r3, [r7, #0]

	// Initialize peripheral clock
	pRCC->APB1ENR |= (1 << 15);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000712:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	641a      	str	r2, [r3, #64]	; 0x40

	// Set SPI mode to full duplex
	pSPI->CR1 &= ~(1 << 15);
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	601a      	str	r2, [r3, #0]

	// Set data frame format
	pSPI->CR1 &= ~(1 << 11);
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	601a      	str	r2, [r3, #0]

	// Set software slave management
	pSPI->CR1 |= (1 << 9);
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	601a      	str	r2, [r3, #0]

	// Set internal slave select
	pSPI->CR1 |= (1 << 8);
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	601a      	str	r2, [r3, #0]

	// Set the baudrate ctrl -> 48 / 16 = 3 MHZ
	pSPI->CR1 |= (4 << 3);
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f043 0220 	orr.w	r2, r3, #32
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	601a      	str	r2, [r3, #0]

	// Set configuration to Master
	pSPI->CR1 |= (1 << 2);
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f043 0204 	orr.w	r2, r3, #4
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	601a      	str	r2, [r3, #0]

	// Set clock polarity to 0
	pSPI->CR1 &= ~(1 << 1);
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f023 0202 	bic.w	r2, r3, #2
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	601a      	str	r2, [r3, #0]

	// set clock phase to 0
	pSPI->CR1 &= ~(1 << 0);
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f023 0201 	bic.w	r2, r3, #1
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	601a      	str	r2, [r3, #0]

	// Set frame format
	pSPI->CR2 &= ~(1 << 4);
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	f023 0210 	bic.w	r2, r3, #16
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	605a      	str	r2, [r3, #4]
}
 8000786:	bf00      	nop
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800
 8000798:	40003c00 	.word	0x40003c00

0800079c <LCD_SPI_Enable>:


void LCD_SPI_Enable(void)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
	SPI_TypeDef *pSPI = SPI3;
 80007a2:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <LCD_SPI_Enable+0x24>)
 80007a4:	607b      	str	r3, [r7, #4]

	// Enable the peripheral
	pSPI->CR1 |= (1 << 6);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	601a      	str	r2, [r3, #0]
}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	40003c00 	.word	0x40003c00

080007c4 <LCD_Reset>:


void LCD_Reset()
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	LCD_RESX_LOW();
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <LCD_Reset+0x2c>)
 80007ca:	695b      	ldr	r3, [r3, #20]
 80007cc:	4a08      	ldr	r2, [pc, #32]	; (80007f0 <LCD_Reset+0x2c>)
 80007ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80007d2:	6153      	str	r3, [r2, #20]
	HAL_Delay(50);
 80007d4:	2032      	movs	r0, #50	; 0x32
 80007d6:	f001 f96f 	bl	8001ab8 <HAL_Delay>
	LCD_RESX_HIGH();
 80007da:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <LCD_Reset+0x2c>)
 80007dc:	695b      	ldr	r3, [r3, #20]
 80007de:	4a04      	ldr	r2, [pc, #16]	; (80007f0 <LCD_Reset+0x2c>)
 80007e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e4:	6153      	str	r3, [r2, #20]
	HAL_Delay(50);
 80007e6:	2032      	movs	r0, #50	; 0x32
 80007e8:	f001 f966 	bl	8001ab8 <HAL_Delay>
}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40020800 	.word	0x40020800

080007f4 <LCD_Write_Cmd>:


void LCD_Write_Cmd(uint8_t cmd)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	71fb      	strb	r3, [r7, #7]
	SPI_TypeDef *pSPI = SPI3;
 80007fe:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <LCD_Write_Cmd+0x7c>)
 8000800:	60fb      	str	r3, [r7, #12]

	// Set CSX and DCX to low for command transmission
	LCD_CSX_LOW();
 8000802:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <LCD_Write_Cmd+0x80>)
 8000804:	695b      	ldr	r3, [r3, #20]
 8000806:	4a1b      	ldr	r2, [pc, #108]	; (8000874 <LCD_Write_Cmd+0x80>)
 8000808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800080c:	6153      	str	r3, [r2, #20]
	LCD_DCX_LOW();
 800080e:	4b19      	ldr	r3, [pc, #100]	; (8000874 <LCD_Write_Cmd+0x80>)
 8000810:	695b      	ldr	r3, [r3, #20]
 8000812:	4a18      	ldr	r2, [pc, #96]	; (8000874 <LCD_Write_Cmd+0x80>)
 8000814:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000818:	6153      	str	r3, [r2, #20]

	// Wait till the transfer buffer is empty
	while(!(pSPI->SR & (1 << 1)));
 800081a:	bf00      	nop
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	689b      	ldr	r3, [r3, #8]
 8000820:	f003 0302 	and.w	r3, r3, #2
 8000824:	2b00      	cmp	r3, #0
 8000826:	d0f9      	beq.n	800081c <LCD_Write_Cmd+0x28>

	// Load the command into the peripheral data register
	pSPI->DR = cmd;
 8000828:	79fa      	ldrb	r2, [r7, #7]
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	60da      	str	r2, [r3, #12]

	// Make sure the command is sent
	while(!(pSPI->SR & (1 << 1)));
 800082e:	bf00      	nop
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	689b      	ldr	r3, [r3, #8]
 8000834:	f003 0302 	and.w	r3, r3, #2
 8000838:	2b00      	cmp	r3, #0
 800083a:	d0f9      	beq.n	8000830 <LCD_Write_Cmd+0x3c>
	while((pSPI->SR & (1 << 7)));
 800083c:	bf00      	nop
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	689b      	ldr	r3, [r3, #8]
 8000842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000846:	2b00      	cmp	r3, #0
 8000848:	d1f9      	bne.n	800083e <LCD_Write_Cmd+0x4a>

	LCD_CSX_HIGH();
 800084a:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <LCD_Write_Cmd+0x80>)
 800084c:	695b      	ldr	r3, [r3, #20]
 800084e:	4a09      	ldr	r2, [pc, #36]	; (8000874 <LCD_Write_Cmd+0x80>)
 8000850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000854:	6153      	str	r3, [r2, #20]
	LCD_DCX_HIGH();
 8000856:	4b07      	ldr	r3, [pc, #28]	; (8000874 <LCD_Write_Cmd+0x80>)
 8000858:	695b      	ldr	r3, [r3, #20]
 800085a:	4a06      	ldr	r2, [pc, #24]	; (8000874 <LCD_Write_Cmd+0x80>)
 800085c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000860:	6153      	str	r3, [r2, #20]

}
 8000862:	bf00      	nop
 8000864:	3714      	adds	r7, #20
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	40003c00 	.word	0x40003c00
 8000874:	40020800 	.word	0x40020800

08000878 <LCD_Read_data>:

void LCD_Read_data(uint8_t *data)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	73fb      	strb	r3, [r7, #15]
	while((SPI3->SR & (1 << 0)))
 8000884:	e00c      	b.n	80008a0 <LCD_Read_data+0x28>
	{
		if(i<255)
 8000886:	7bfb      	ldrb	r3, [r7, #15]
 8000888:	2bff      	cmp	r3, #255	; 0xff
 800088a:	d009      	beq.n	80008a0 <LCD_Read_data+0x28>
		{
			data[i] = SPI3->DR;
 800088c:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <LCD_Read_data+0x44>)
 800088e:	68d9      	ldr	r1, [r3, #12]
 8000890:	7bfb      	ldrb	r3, [r7, #15]
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	4413      	add	r3, r2
 8000896:	b2ca      	uxtb	r2, r1
 8000898:	701a      	strb	r2, [r3, #0]
			i++;
 800089a:	7bfb      	ldrb	r3, [r7, #15]
 800089c:	3301      	adds	r3, #1
 800089e:	73fb      	strb	r3, [r7, #15]
	while((SPI3->SR & (1 << 0)))
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <LCD_Read_data+0x44>)
 80008a2:	689b      	ldr	r3, [r3, #8]
 80008a4:	f003 0301 	and.w	r3, r3, #1
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d1ec      	bne.n	8000886 <LCD_Read_data+0xe>
		}
	}
}
 80008ac:	bf00      	nop
 80008ae:	bf00      	nop
 80008b0:	3714      	adds	r7, #20
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	40003c00 	.word	0x40003c00

080008c0 <LCD_Write_Data>:


void LCD_Write_Data(uint8_t *data, uint32_t len)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
	SPI_TypeDef *pSPI = SPI3;
 80008ca:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <LCD_Write_Data+0x80>)
 80008cc:	60bb      	str	r3, [r7, #8]

	// Set CSX to low for data transmission
	LCD_CSX_LOW();
 80008ce:	4b1d      	ldr	r3, [pc, #116]	; (8000944 <LCD_Write_Data+0x84>)
 80008d0:	695b      	ldr	r3, [r3, #20]
 80008d2:	4a1c      	ldr	r2, [pc, #112]	; (8000944 <LCD_Write_Data+0x84>)
 80008d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80008d8:	6153      	str	r3, [r2, #20]

	for(uint32_t i=0;i<len;i++)
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	e010      	b.n	8000902 <LCD_Write_Data+0x42>
	{
		// Wait till the transfer buffer is empty
		while(!(pSPI->SR & (1 << 1)));
 80008e0:	bf00      	nop
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	689b      	ldr	r3, [r3, #8]
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d0f9      	beq.n	80008e2 <LCD_Write_Data+0x22>

		// Load the command into the peripheral data register
		pSPI->DR = data[i];
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	4413      	add	r3, r2
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	461a      	mov	r2, r3
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	60da      	str	r2, [r3, #12]
	for(uint32_t i=0;i<len;i++)
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	3301      	adds	r3, #1
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	68fa      	ldr	r2, [r7, #12]
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	429a      	cmp	r2, r3
 8000908:	d3ea      	bcc.n	80008e0 <LCD_Write_Data+0x20>
	}
	// Make sure the command is sent
	while(!(pSPI->SR & (1 << 1)));
 800090a:	bf00      	nop
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	689b      	ldr	r3, [r3, #8]
 8000910:	f003 0302 	and.w	r3, r3, #2
 8000914:	2b00      	cmp	r3, #0
 8000916:	d0f9      	beq.n	800090c <LCD_Write_Data+0x4c>
	while((pSPI->SR & (1 << 7)));
 8000918:	bf00      	nop
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	689b      	ldr	r3, [r3, #8]
 800091e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000922:	2b00      	cmp	r3, #0
 8000924:	d1f9      	bne.n	800091a <LCD_Write_Data+0x5a>

	// Reset pins
	LCD_CSX_HIGH();
 8000926:	4b07      	ldr	r3, [pc, #28]	; (8000944 <LCD_Write_Data+0x84>)
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	4a06      	ldr	r2, [pc, #24]	; (8000944 <LCD_Write_Data+0x84>)
 800092c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000930:	6153      	str	r3, [r2, #20]
}
 8000932:	bf00      	nop
 8000934:	3714      	adds	r7, #20
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	40003c00 	.word	0x40003c00
 8000944:	40020800 	.word	0x40020800

08000948 <LCD_Config>:


void LCD_Config(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b0c4      	sub	sp, #272	; 0x110
 800094c:	af00      	add	r7, sp, #0
	uint8_t params[15];
	uint8_t data[255];
	LCD_Write_Cmd(LCD_SW_RESET);
 800094e:	2001      	movs	r0, #1
 8000950:	f7ff ff50 	bl	80007f4 <LCD_Write_Cmd>

	LCD_Write_Cmd(LCD_PWR_CTRL_B);
 8000954:	20cf      	movs	r0, #207	; 0xcf
 8000956:	f7ff ff4d 	bl	80007f4 <LCD_Write_Cmd>
	LCD_Read_data(data);
 800095a:	463b      	mov	r3, r7
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff ff8b 	bl	8000878 <LCD_Read_data>
	params[0] = 0x00;
 8000962:	2300      	movs	r3, #0
 8000964:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
	params[1] = 0xD9;
 8000968:	23d9      	movs	r3, #217	; 0xd9
 800096a:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
	params[2] = 0x30;
 800096e:	2330      	movs	r3, #48	; 0x30
 8000970:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
	LCD_Write_Data(params, 3);
 8000974:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000978:	2103      	movs	r1, #3
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff ffa0 	bl	80008c0 <LCD_Write_Data>

	LCD_Write_Cmd(LCD_PWR_ON_SEQUENCE_CTRL);
 8000980:	20ed      	movs	r0, #237	; 0xed
 8000982:	f7ff ff37 	bl	80007f4 <LCD_Write_Cmd>
	params[0] = 0x64;
 8000986:	2364      	movs	r3, #100	; 0x64
 8000988:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
	params[1] = 0x03;
 800098c:	2303      	movs	r3, #3
 800098e:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
	params[2] = 0x12;
 8000992:	2312      	movs	r3, #18
 8000994:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
	params[3] = 0x81;
 8000998:	2381      	movs	r3, #129	; 0x81
 800099a:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
	LCD_Write_Data(params, 4);
 800099e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80009a2:	2104      	movs	r1, #4
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff ff8b 	bl	80008c0 <LCD_Write_Data>

	LCD_Write_Cmd(LCD_DRIVER_TIMING_CTRL_A);
 80009aa:	20e8      	movs	r0, #232	; 0xe8
 80009ac:	f7ff ff22 	bl	80007f4 <LCD_Write_Cmd>
	params[0] = 0x85;
 80009b0:	2385      	movs	r3, #133	; 0x85
 80009b2:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
	params[1] = 0x10;
 80009b6:	2310      	movs	r3, #16
 80009b8:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
	params[2] = 0x7A;
 80009bc:	237a      	movs	r3, #122	; 0x7a
 80009be:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
	LCD_Write_Data(params, 3);
 80009c2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80009c6:	2103      	movs	r1, #3
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff ff79 	bl	80008c0 <LCD_Write_Data>

	LCD_Write_Cmd(LCD_PWR_CTRL_A);
 80009ce:	20cb      	movs	r0, #203	; 0xcb
 80009d0:	f7ff ff10 	bl	80007f4 <LCD_Write_Cmd>
	params[0] = 0x39;
 80009d4:	2339      	movs	r3, #57	; 0x39
 80009d6:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
	params[1] = 0x2C;
 80009da:	232c      	movs	r3, #44	; 0x2c
 80009dc:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
	params[2] = 0x00;
 80009e0:	2300      	movs	r3, #0
 80009e2:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
	params[3] = 0x34;
 80009e6:	2334      	movs	r3, #52	; 0x34
 80009e8:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
	params[4] = 0x02;
 80009ec:	2302      	movs	r3, #2
 80009ee:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
	LCD_Write_Data(params, 5);
 80009f2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80009f6:	2105      	movs	r1, #5
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff ff61 	bl	80008c0 <LCD_Write_Data>

	LCD_Write_Cmd(LCD_PUMP_RATIO_CTRL);
 80009fe:	20f7      	movs	r0, #247	; 0xf7
 8000a00:	f7ff fef8 	bl	80007f4 <LCD_Write_Cmd>
	params[0] = 0x20;
 8000a04:	2320      	movs	r3, #32
 8000a06:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
	LCD_Write_Data(params, 1);
 8000a0a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000a0e:	2101      	movs	r1, #1
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff ff55 	bl	80008c0 <LCD_Write_Data>

	LCD_Write_Cmd(LCD_DRIVER_TIMING_CTRL_B);
 8000a16:	20ea      	movs	r0, #234	; 0xea
 8000a18:	f7ff feec 	bl	80007f4 <LCD_Write_Cmd>
	params[0] = 0x00;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
	params[1] = 0x00;
 8000a22:	2300      	movs	r3, #0
 8000a24:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
	LCD_Write_Data(params, 2);
 8000a28:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000a2c:	2102      	movs	r1, #2
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff ff46 	bl	80008c0 <LCD_Write_Data>

	LCD_Write_Cmd(LCD_PWR_CTRL1);
 8000a34:	20c0      	movs	r0, #192	; 0xc0
 8000a36:	f7ff fedd 	bl	80007f4 <LCD_Write_Cmd>
	params[0] = 0x1B;
 8000a3a:	231b      	movs	r3, #27
 8000a3c:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
	LCD_Write_Data(params, 1);
 8000a40:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000a44:	2101      	movs	r1, #1
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff ff3a 	bl	80008c0 <LCD_Write_Data>

	LCD_Write_Cmd(LCD_PWR_CTRL2);
 8000a4c:	20c1      	movs	r0, #193	; 0xc1
 8000a4e:	f7ff fed1 	bl	80007f4 <LCD_Write_Cmd>
	params[0] = 0x12;
 8000a52:	2312      	movs	r3, #18
 8000a54:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
	LCD_Write_Data(params, 1);
 8000a58:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff ff2e 	bl	80008c0 <LCD_Write_Data>

	LCD_Write_Cmd(LCD_VCOM_CTRL1);
 8000a64:	20c5      	movs	r0, #197	; 0xc5
 8000a66:	f7ff fec5 	bl	80007f4 <LCD_Write_Cmd>
	params[0] = 0x08;
 8000a6a:	2308      	movs	r3, #8
 8000a6c:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
	params[1] = 0x26;
 8000a70:	2326      	movs	r3, #38	; 0x26
 8000a72:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
	LCD_Write_Data(params, 2);
 8000a76:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000a7a:	2102      	movs	r1, #2
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff ff1f 	bl	80008c0 <LCD_Write_Data>

	LCD_Write_Cmd(LCD_VCOM_CTRL2);
 8000a82:	20c7      	movs	r0, #199	; 0xc7
 8000a84:	f7ff feb6 	bl	80007f4 <LCD_Write_Cmd>
	params[0] = 0xB7;
 8000a88:	23b7      	movs	r3, #183	; 0xb7
 8000a8a:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
	LCD_Write_Data(params, 1);
 8000a8e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000a92:	2101      	movs	r1, #1
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff ff13 	bl	80008c0 <LCD_Write_Data>

	uint8_t m;
	m = MADCTL_MV | MADCTL_MY | MADCTL_BGR;
 8000a9a:	23a8      	movs	r3, #168	; 0xa8
 8000a9c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	LCD_Write_Cmd(LCD_MEM_ACCESS_CTRL);
 8000aa0:	2036      	movs	r0, #54	; 0x36
 8000aa2:	f7ff fea7 	bl	80007f4 <LCD_Write_Cmd>
	params[0] = m;
 8000aa6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000aaa:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
	LCD_Write_Data(params, 1);
 8000aae:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff ff03 	bl	80008c0 <LCD_Write_Data>

	LCD_Write_Cmd(LCD_PIXEL_FORMAT_SET);
 8000aba:	203a      	movs	r0, #58	; 0x3a
 8000abc:	f7ff fe9a 	bl	80007f4 <LCD_Write_Cmd>
	params[0] = 0x55;
 8000ac0:	2355      	movs	r3, #85	; 0x55
 8000ac2:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
	LCD_Write_Data(params, 1);
 8000ac6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000aca:	2101      	movs	r1, #1
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff fef7 	bl	80008c0 <LCD_Write_Data>

	LCD_Write_Cmd(LCD_FRAME_CTRL_NORMAL_MODE);
 8000ad2:	20b1      	movs	r0, #177	; 0xb1
 8000ad4:	f7ff fe8e 	bl	80007f4 <LCD_Write_Cmd>
	params[0] = 0x00;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
	params[1] = 0x1B;
 8000ade:	231b      	movs	r3, #27
 8000ae0:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
	LCD_Write_Data(params, 2);
 8000ae4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000ae8:	2102      	movs	r1, #2
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fee8 	bl	80008c0 <LCD_Write_Data>

	LCD_Write_Cmd(LCD_DISPLAY_FUNC_CTRL);
 8000af0:	20b6      	movs	r0, #182	; 0xb6
 8000af2:	f7ff fe7f 	bl	80007f4 <LCD_Write_Cmd>
	params[0] = 0x0A;
 8000af6:	230a      	movs	r3, #10
 8000af8:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
	params[1] = 0xA2;
 8000afc:	23a2      	movs	r3, #162	; 0xa2
 8000afe:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
	LCD_Write_Data(params, 2);
 8000b02:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000b06:	2102      	movs	r1, #2
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fed9 	bl	80008c0 <LCD_Write_Data>

	LCD_Write_Cmd(LCD_ENABLE_3G);
 8000b0e:	20f2      	movs	r0, #242	; 0xf2
 8000b10:	f7ff fe70 	bl	80007f4 <LCD_Write_Cmd>
	params[0] = 0x02;
 8000b14:	2302      	movs	r3, #2
 8000b16:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
	LCD_Write_Data(params, 1);
 8000b1a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000b1e:	2101      	movs	r1, #1
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff fecd 	bl	80008c0 <LCD_Write_Data>

	LCD_Write_Cmd(LCD_GAMMA_SET);
 8000b26:	2026      	movs	r0, #38	; 0x26
 8000b28:	f7ff fe64 	bl	80007f4 <LCD_Write_Cmd>
	params[0] = 0x01;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
	LCD_Write_Data(params, 1);
 8000b32:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000b36:	2101      	movs	r1, #1
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff fec1 	bl	80008c0 <LCD_Write_Data>

	LCD_Write_Cmd(LCD_POSITIVE_GAMMA_CORRECTION);
 8000b3e:	20e0      	movs	r0, #224	; 0xe0
 8000b40:	f7ff fe58 	bl	80007f4 <LCD_Write_Cmd>
	params[0] = 0x0F;
 8000b44:	230f      	movs	r3, #15
 8000b46:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
	params[1] = 0x1D;
 8000b4a:	231d      	movs	r3, #29
 8000b4c:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
	params[2] = 0x1A;
 8000b50:	231a      	movs	r3, #26
 8000b52:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
	params[3] = 0x0A;
 8000b56:	230a      	movs	r3, #10
 8000b58:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
	params[4] = 0x0D;
 8000b5c:	230d      	movs	r3, #13
 8000b5e:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
	params[5] = 0x07;
 8000b62:	2307      	movs	r3, #7
 8000b64:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
	params[6] = 0x49;
 8000b68:	2349      	movs	r3, #73	; 0x49
 8000b6a:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
	params[7] = 0x66;
 8000b6e:	2366      	movs	r3, #102	; 0x66
 8000b70:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	params[8] = 0x3B;
 8000b74:	233b      	movs	r3, #59	; 0x3b
 8000b76:	f887 3108 	strb.w	r3, [r7, #264]	; 0x108
	params[9] = 0x07;
 8000b7a:	2307      	movs	r3, #7
 8000b7c:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
	params[10] = 0x11;
 8000b80:	2311      	movs	r3, #17
 8000b82:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
	params[11] = 0x01;
 8000b86:	2301      	movs	r3, #1
 8000b88:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
	params[12] = 0x09;
 8000b8c:	2309      	movs	r3, #9
 8000b8e:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	params[13] = 0x05;
 8000b92:	2305      	movs	r3, #5
 8000b94:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	params[14] = 0x04;
 8000b98:	2304      	movs	r3, #4
 8000b9a:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	LCD_Write_Data(params, 15);
 8000b9e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000ba2:	210f      	movs	r1, #15
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fe8b 	bl	80008c0 <LCD_Write_Data>

	LCD_Write_Cmd(LCD_NEGATIVE_GAMMA_CORRECTION);
 8000baa:	20e1      	movs	r0, #225	; 0xe1
 8000bac:	f7ff fe22 	bl	80007f4 <LCD_Write_Cmd>
	params[0] = 0x00;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
	params[1] = 0x18;
 8000bb6:	2318      	movs	r3, #24
 8000bb8:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
	params[2] = 0x1D;
 8000bbc:	231d      	movs	r3, #29
 8000bbe:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
	params[3] = 0x02;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
	params[4] = 0x0F;
 8000bc8:	230f      	movs	r3, #15
 8000bca:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
	params[5] = 0x04;
 8000bce:	2304      	movs	r3, #4
 8000bd0:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
	params[6] = 0x36;
 8000bd4:	2336      	movs	r3, #54	; 0x36
 8000bd6:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
	params[7] = 0x13;
 8000bda:	2313      	movs	r3, #19
 8000bdc:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	params[8] = 0x4C;
 8000be0:	234c      	movs	r3, #76	; 0x4c
 8000be2:	f887 3108 	strb.w	r3, [r7, #264]	; 0x108
	params[9] = 0x07;
 8000be6:	2307      	movs	r3, #7
 8000be8:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
	params[10] = 0x13;
 8000bec:	2313      	movs	r3, #19
 8000bee:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
	params[11] = 0x0F;
 8000bf2:	230f      	movs	r3, #15
 8000bf4:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
	params[12] = 0x2E;
 8000bf8:	232e      	movs	r3, #46	; 0x2e
 8000bfa:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	params[13] = 0x2F;
 8000bfe:	232f      	movs	r3, #47	; 0x2f
 8000c00:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	params[14] = 0x05;
 8000c04:	2305      	movs	r3, #5
 8000c06:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	LCD_Write_Data(params, 15);
 8000c0a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000c0e:	210f      	movs	r1, #15
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fe55 	bl	80008c0 <LCD_Write_Data>

	LCD_Write_Cmd(LCD_PAGE_ADDR_SET);
 8000c16:	202b      	movs	r0, #43	; 0x2b
 8000c18:	f7ff fdec 	bl	80007f4 <LCD_Write_Cmd>
	params[0] = 0x00;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
	params[1] = 0x00;
 8000c22:	2300      	movs	r3, #0
 8000c24:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
	params[2] = 0x00;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
	params[3] = 0xF0;
 8000c2e:	23f0      	movs	r3, #240	; 0xf0
 8000c30:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
	LCD_Write_Data(params, 4);
 8000c34:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000c38:	2104      	movs	r1, #4
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff fe40 	bl	80008c0 <LCD_Write_Data>

	LCD_Write_Cmd(LCD_COLUMN_ADDR_SET);
 8000c40:	202a      	movs	r0, #42	; 0x2a
 8000c42:	f7ff fdd7 	bl	80007f4 <LCD_Write_Cmd>
	params[0] = 0x00;
 8000c46:	2300      	movs	r3, #0
 8000c48:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
	params[1] = 0x00;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
	params[2] = 0x01;
 8000c52:	2301      	movs	r3, #1
 8000c54:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
	params[3] = 0x40;
 8000c58:	2340      	movs	r3, #64	; 0x40
 8000c5a:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
	LCD_Write_Data(params, 4);
 8000c5e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000c62:	2104      	movs	r1, #4
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fe2b 	bl	80008c0 <LCD_Write_Data>

	LCD_Write_Cmd(LCD_SLEEP_OUT);
 8000c6a:	2011      	movs	r0, #17
 8000c6c:	f7ff fdc2 	bl	80007f4 <LCD_Write_Cmd>
	HAL_Delay(100);
 8000c70:	2064      	movs	r0, #100	; 0x64
 8000c72:	f000 ff21 	bl	8001ab8 <HAL_Delay>
	LCD_Write_Cmd(LCD_DISPLAY_ON);
 8000c76:	2029      	movs	r0, #41	; 0x29
 8000c78:	f7ff fdbc 	bl	80007f4 <LCD_Write_Cmd>
}
 8000c7c:	bf00      	nop
 8000c7e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <lcd_set_display_area>:
	lcd_set_display_area(&area);
}


void lcd_set_display_area(lcd_area_t *area)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b084      	sub	sp, #16
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
	uint8_t params[4];
	// Column address set(2Ah)
	params[0] = HIGH_16(area->x1);
 8000c8e:	2300      	movs	r3, #0
 8000c90:	733b      	strb	r3, [r7, #12]
	params[1] = LOW_16(area->x1);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	881b      	ldrh	r3, [r3, #0]
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	737b      	strb	r3, [r7, #13]
	params[2] = HIGH_16(area->x2);
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	73bb      	strb	r3, [r7, #14]
	params[3] = LOW_16(area->x2);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	885b      	ldrh	r3, [r3, #2]
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	73fb      	strb	r3, [r7, #15]
	LCD_Write_Cmd(LCD_COLUMN_ADDR_SET);
 8000ca6:	202a      	movs	r0, #42	; 0x2a
 8000ca8:	f7ff fda4 	bl	80007f4 <LCD_Write_Cmd>
	LCD_Write_Data(params,4);
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	2104      	movs	r1, #4
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff fe04 	bl	80008c0 <LCD_Write_Data>

	params[0] = HIGH_16(area->y1);
 8000cb8:	2300      	movs	r3, #0
 8000cba:	733b      	strb	r3, [r7, #12]
	params[1] = LOW_16(area->y1);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	889b      	ldrh	r3, [r3, #4]
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	737b      	strb	r3, [r7, #13]
	params[2] = HIGH_16(area->y2);
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	73bb      	strb	r3, [r7, #14]
	params[3] = LOW_16(area->y2);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	88db      	ldrh	r3, [r3, #6]
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	73fb      	strb	r3, [r7, #15]
	LCD_Write_Cmd(LCD_PAGE_ADDR_SET);
 8000cd0:	202b      	movs	r0, #43	; 0x2b
 8000cd2:	f7ff fd8f 	bl	80007f4 <LCD_Write_Cmd>
	LCD_Write_Data(params,4);
 8000cd6:	f107 030c 	add.w	r3, r7, #12
 8000cda:	2104      	movs	r1, #4
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fdef 	bl	80008c0 <LCD_Write_Data>
}
 8000ce2:	bf00      	nop
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <bsp_lcd_write>:
void bsp_lcd_write(uint8_t *buffer, uint32_t nbytes)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
	SPI_TypeDef *pSPI = SPI3;
 8000cf6:	4b2f      	ldr	r3, [pc, #188]	; (8000db4 <bsp_lcd_write+0xc8>)
 8000cf8:	60bb      	str	r3, [r7, #8]
	uint16_t *buff_ptr;

	__disable_spi();
 8000cfa:	bf00      	nop
 8000cfc:	4b2d      	ldr	r3, [pc, #180]	; (8000db4 <bsp_lcd_write+0xc8>)
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d1f9      	bne.n	8000cfc <bsp_lcd_write+0x10>
 8000d08:	4b2a      	ldr	r3, [pc, #168]	; (8000db4 <bsp_lcd_write+0xc8>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a29      	ldr	r2, [pc, #164]	; (8000db4 <bsp_lcd_write+0xc8>)
 8000d0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d12:	6013      	str	r3, [r2, #0]
	__spi_set_dff_16bit();
 8000d14:	4b27      	ldr	r3, [pc, #156]	; (8000db4 <bsp_lcd_write+0xc8>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a26      	ldr	r2, [pc, #152]	; (8000db4 <bsp_lcd_write+0xc8>)
 8000d1a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d1e:	6013      	str	r3, [r2, #0]
	__enable_spi();
 8000d20:	4b24      	ldr	r3, [pc, #144]	; (8000db4 <bsp_lcd_write+0xc8>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a23      	ldr	r2, [pc, #140]	; (8000db4 <bsp_lcd_write+0xc8>)
 8000d26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d2a:	6013      	str	r3, [r2, #0]

	LCD_CSX_LOW();
 8000d2c:	4b22      	ldr	r3, [pc, #136]	; (8000db8 <bsp_lcd_write+0xcc>)
 8000d2e:	695b      	ldr	r3, [r3, #20]
 8000d30:	4a21      	ldr	r2, [pc, #132]	; (8000db8 <bsp_lcd_write+0xcc>)
 8000d32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d36:	6153      	str	r3, [r2, #20]

	buff_ptr = (uint16_t*)buffer;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	60fb      	str	r3, [r7, #12]
	while(nbytes)
 8000d3c:	e011      	b.n	8000d62 <bsp_lcd_write+0x76>
	{
	 while(!(pSPI->SR & (1 << 1)));
 8000d3e:	bf00      	nop
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	f003 0302 	and.w	r3, r3, #2
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d0f9      	beq.n	8000d40 <bsp_lcd_write+0x54>
	 pSPI->DR = *buff_ptr;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	881b      	ldrh	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	60da      	str	r2, [r3, #12]
	 ++buff_ptr;
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	3302      	adds	r3, #2
 8000d5a:	60fb      	str	r3, [r7, #12]
	 nbytes -= 2;
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	3b02      	subs	r3, #2
 8000d60:	603b      	str	r3, [r7, #0]
	while(nbytes)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d1ea      	bne.n	8000d3e <bsp_lcd_write+0x52>
	}

	__disable_spi();
 8000d68:	bf00      	nop
 8000d6a:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <bsp_lcd_write+0xc8>)
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d1f9      	bne.n	8000d6a <bsp_lcd_write+0x7e>
 8000d76:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <bsp_lcd_write+0xc8>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a0e      	ldr	r2, [pc, #56]	; (8000db4 <bsp_lcd_write+0xc8>)
 8000d7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d80:	6013      	str	r3, [r2, #0]
	LCD_CSX_HIGH();
 8000d82:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <bsp_lcd_write+0xcc>)
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	4a0c      	ldr	r2, [pc, #48]	; (8000db8 <bsp_lcd_write+0xcc>)
 8000d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d8c:	6153      	str	r3, [r2, #20]
	__spi_set_dff_8bit();
 8000d8e:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <bsp_lcd_write+0xc8>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a08      	ldr	r2, [pc, #32]	; (8000db4 <bsp_lcd_write+0xc8>)
 8000d94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000d98:	6013      	str	r3, [r2, #0]
	__enable_spi();
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <bsp_lcd_write+0xc8>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <bsp_lcd_write+0xc8>)
 8000da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000da4:	6013      	str	r3, [r2, #0]
}
 8000da6:	bf00      	nop
 8000da8:	3714      	adds	r7, #20
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	40003c00 	.word	0x40003c00
 8000db8:	40020800 	.word	0x40020800

08000dbc <lcd_set_orientation>:


void lcd_set_orientation(uint8_t orientation)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
	uint8_t param;

	if(orientation == LANDSCAPE)
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d102      	bne.n	8000dd2 <lcd_set_orientation+0x16>
		param = MADCTL_MV | MADCTL_MY | MADCTL_BGR; // Memory access control <Landscape setting>
 8000dcc:	23a8      	movs	r3, #168	; 0xa8
 8000dce:	73fb      	strb	r3, [r7, #15]
 8000dd0:	e004      	b.n	8000ddc <lcd_set_orientation+0x20>
	else if(orientation == PORTRAIT)
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d101      	bne.n	8000ddc <lcd_set_orientation+0x20>
		param = MADCTL_MY | MADCTL_MX | MADCTL_BGR; // Memory access control <portrait setting>
 8000dd8:	23c8      	movs	r3, #200	; 0xc8
 8000dda:	73fb      	strb	r3, [r7, #15]

	LCD_Write_Cmd(LCD_MEM_ACCESS_CTRL);
 8000ddc:	2036      	movs	r0, #54	; 0x36
 8000dde:	f7ff fd09 	bl	80007f4 <LCD_Write_Cmd>
	LCD_Write_Data(&param, 1);
 8000de2:	f107 030f 	add.w	r3, r7, #15
 8000de6:	2101      	movs	r1, #1
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fd69 	bl	80008c0 <LCD_Write_Data>
}
 8000dee:	bf00      	nop
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <lcd_buffer_init>:


void lcd_buffer_init(bsp_lcd_t *lcd)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	lcd->draw_buffer1 = bsp_db;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a08      	ldr	r2, [pc, #32]	; (8000e24 <lcd_buffer_init+0x2c>)
 8000e04:	605a      	str	r2, [r3, #4]
	lcd->draw_buffer2 = bsp_wb;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a07      	ldr	r2, [pc, #28]	; (8000e28 <lcd_buffer_init+0x30>)
 8000e0a:	609a      	str	r2, [r3, #8]
	lcd->buff_to_draw = NULL;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	611a      	str	r2, [r3, #16]
	lcd->buff_to_flush = NULL;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	615a      	str	r2, [r3, #20]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	2000018c 	.word	0x2000018c
 8000e28:	2000298c 	.word	0x2000298c

08000e2c <bsp_lcd_set_backgrounf_color>:


void bsp_lcd_set_backgrounf_color(uint32_t rgb888)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af02      	add	r7, sp, #8
 8000e32:	6078      	str	r0, [r7, #4]
	bsp_lcd_fill_rect(rgb888,0,(BSP_LCD_ACTIVE_WIDTH),0,(BSP_LCD_ACTIVE_HEIGHT));
 8000e34:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000e38:	9300      	str	r3, [sp, #0]
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	22f0      	movs	r2, #240	; 0xf0
 8000e3e:	2100      	movs	r1, #0
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f000 f82d 	bl	8000ea0 <bsp_lcd_fill_rect>
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <bsp_lcd_convert_rgb888_to_rgb565>:


uint16_t bsp_lcd_convert_rgb888_to_rgb565(uint32_t rgb888)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b085      	sub	sp, #20
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
	uint16_t r = (rgb888 >> 19) & 0x1FU;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	0cdb      	lsrs	r3, r3, #19
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	f003 031f 	and.w	r3, r3, #31
 8000e60:	81fb      	strh	r3, [r7, #14]
	uint16_t g = (rgb888 >> 10) & 0x3FU;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	0a9b      	lsrs	r3, r3, #10
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e6c:	81bb      	strh	r3, [r7, #12]
	uint16_t b = (rgb888 >> 3)  & 0x1FU;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	08db      	lsrs	r3, r3, #3
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	f003 031f 	and.w	r3, r3, #31
 8000e78:	817b      	strh	r3, [r7, #10]

	return (uint16_t)((r<<11) | (g << 5) | b);
 8000e7a:	89fb      	ldrh	r3, [r7, #14]
 8000e7c:	02db      	lsls	r3, r3, #11
 8000e7e:	b21a      	sxth	r2, r3
 8000e80:	89bb      	ldrh	r3, [r7, #12]
 8000e82:	015b      	lsls	r3, r3, #5
 8000e84:	b21b      	sxth	r3, r3
 8000e86:	4313      	orrs	r3, r2
 8000e88:	b21a      	sxth	r2, r3
 8000e8a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	b21b      	sxth	r3, r3
 8000e92:	b29b      	uxth	r3, r3
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <bsp_lcd_fill_rect>:



void bsp_lcd_fill_rect(uint32_t rgb888, uint32_t x_start, uint32_t x_width, uint32_t y_start, uint32_t y_height)
{
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b08f      	sub	sp, #60	; 0x3c
 8000ea4:	af02      	add	r7, sp, #8
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
 8000eac:	603b      	str	r3, [r7, #0]
	uint32_t total_bytes_to_write = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
	uint32_t bytes_sent_so_far = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t remaining_bytes = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t npix;
	uint32_t pixels_sent = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	623b      	str	r3, [r7, #32]
	uint32_t x1,y1;
	uint32_t pixel_per_line = x_width;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	61bb      	str	r3, [r7, #24]

	if((x_start+x_width) > BSP_LCD_ACTIVE_WIDTH) return;
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	2bf0      	cmp	r3, #240	; 0xf0
 8000eca:	d863      	bhi.n	8000f94 <bsp_lcd_fill_rect+0xf4>
	if((y_start+y_height) > BSP_LCD_ACTIVE_HEIGHT) return;
 8000ecc:	683a      	ldr	r2, [r7, #0]
 8000ece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ed0:	4413      	add	r3, r2
 8000ed2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000ed6:	d85f      	bhi.n	8000f98 <bsp_lcd_fill_rect+0xf8>


	//1. Calculate total number of bytes written into DB
	total_bytes_to_write = get_total_bytes(hlcd, x_width, y_height);
 8000ed8:	4b31      	ldr	r3, [pc, #196]	; (8000fa0 <bsp_lcd_fill_rect+0x100>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f000 f85f 	bl	8000fa4 <get_total_bytes>
 8000ee6:	61f8      	str	r0, [r7, #28]
	remaining_bytes = total_bytes_to_write;
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	62bb      	str	r3, [r7, #40]	; 0x28

	while(remaining_bytes)
 8000eec:	e04e      	b.n	8000f8c <bsp_lcd_fill_rect+0xec>
	{
		x1 = x_start + (pixels_sent % pixel_per_line);
 8000eee:	6a3b      	ldr	r3, [r7, #32]
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	fbb3 f2f2 	udiv	r2, r3, r2
 8000ef6:	69b9      	ldr	r1, [r7, #24]
 8000ef8:	fb01 f202 	mul.w	r2, r1, r2
 8000efc:	1a9b      	subs	r3, r3, r2
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	4413      	add	r3, r2
 8000f02:	617b      	str	r3, [r7, #20]
		y1 = y_start + (pixels_sent / pixel_per_line);
 8000f04:	6a3a      	ldr	r2, [r7, #32]
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0c:	683a      	ldr	r2, [r7, #0]
 8000f0e:	4413      	add	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]

		make_area(&hlcd->area,x1,x_width,y1,y_height);
 8000f12:	4b23      	ldr	r3, [pc, #140]	; (8000fa0 <bsp_lcd_fill_rect+0x100>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f103 0018 	add.w	r0, r3, #24
 8000f1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	6979      	ldr	r1, [r7, #20]
 8000f24:	f000 f859 	bl	8000fda <make_area>

		if(x1 != x_start)
 8000f28:	697a      	ldr	r2, [r7, #20]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d006      	beq.n	8000f3e <bsp_lcd_fill_rect+0x9e>
			npix = x_start + x_width - x1;
 8000f30:	68ba      	ldr	r2, [r7, #8]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	441a      	add	r2, r3
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8000f3c:	e007      	b.n	8000f4e <bsp_lcd_fill_rect+0xae>
		else
			npix = bytes_to_pixels(remaining_bytes, hlcd->pixel_format);
 8000f3e:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <bsp_lcd_fill_rect+0x100>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	785b      	ldrb	r3, [r3, #1]
 8000f44:	4619      	mov	r1, r3
 8000f46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f48:	f000 f887 	bl	800105a <bytes_to_pixels>
 8000f4c:	6278      	str	r0, [r7, #36]	; 0x24

		bytes_sent_so_far += copy_to_draw_buffer(hlcd,pixels_to_bytes(npix,hlcd->pixel_format),rgb888);
 8000f4e:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <bsp_lcd_fill_rect+0x100>)
 8000f50:	681c      	ldr	r4, [r3, #0]
 8000f52:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <bsp_lcd_fill_rect+0x100>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	785b      	ldrb	r3, [r3, #1]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f5c:	f000 f94b 	bl	80011f6 <pixels_to_bytes>
 8000f60:	4603      	mov	r3, r0
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	4619      	mov	r1, r3
 8000f66:	4620      	mov	r0, r4
 8000f68:	f000 f885 	bl	8001076 <copy_to_draw_buffer>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f70:	4413      	add	r3, r2
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
		pixels_sent = bytes_to_pixels(bytes_sent_so_far, hlcd->pixel_format);
 8000f74:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <bsp_lcd_fill_rect+0x100>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	785b      	ldrb	r3, [r3, #1]
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000f7e:	f000 f86c 	bl	800105a <bytes_to_pixels>
 8000f82:	6238      	str	r0, [r7, #32]
		remaining_bytes = total_bytes_to_write - bytes_sent_so_far;
 8000f84:	69fa      	ldr	r2, [r7, #28]
 8000f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	62bb      	str	r3, [r7, #40]	; 0x28
	while(remaining_bytes)
 8000f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d1ad      	bne.n	8000eee <bsp_lcd_fill_rect+0x4e>
 8000f92:	e002      	b.n	8000f9a <bsp_lcd_fill_rect+0xfa>
	if((x_start+x_width) > BSP_LCD_ACTIVE_WIDTH) return;
 8000f94:	bf00      	nop
 8000f96:	e000      	b.n	8000f9a <bsp_lcd_fill_rect+0xfa>
	if((y_start+y_height) > BSP_LCD_ACTIVE_HEIGHT) return;
 8000f98:	bf00      	nop
	}
}
 8000f9a:	3734      	adds	r7, #52	; 0x34
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd90      	pop	{r4, r7, pc}
 8000fa0:	20000000 	.word	0x20000000

08000fa4 <get_total_bytes>:


uint32_t get_total_bytes(bsp_lcd_t *hlcd, uint32_t width, uint32_t height)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b087      	sub	sp, #28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
	uint8_t bytes_per_pixel = 2;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	75fb      	strb	r3, [r7, #23]
	if(hlcd->pixel_format == BSP_LCD_PIXEL_FMT_RGB565)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	785b      	ldrb	r3, [r3, #1]
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d101      	bne.n	8000fc0 <get_total_bytes+0x1c>
		bytes_per_pixel=2;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	75fb      	strb	r3, [r7, #23]
	return (width*height*bytes_per_pixel);
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	fb02 f303 	mul.w	r3, r2, r3
 8000fc8:	7dfa      	ldrb	r2, [r7, #23]
 8000fca:	fb02 f303 	mul.w	r3, r2, r3
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	371c      	adds	r7, #28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <make_area>:

void make_area(lcd_area_t *area, uint32_t x_start, uint32_t x_width, uint32_t y_start, uint32_t y_height)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b087      	sub	sp, #28
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	60f8      	str	r0, [r7, #12]
 8000fe2:	60b9      	str	r1, [r7, #8]
 8000fe4:	607a      	str	r2, [r7, #4]
 8000fe6:	603b      	str	r3, [r7, #0]
	uint16_t lcd_total_width = BSP_LCD_ACTIVE_WIDTH-1;
 8000fe8:	23ef      	movs	r3, #239	; 0xef
 8000fea:	82fb      	strh	r3, [r7, #22]
	uint16_t lcd_total_height = BSP_LCD_ACTIVE_HEIGHT-1;
 8000fec:	f240 133f 	movw	r3, #319	; 0x13f
 8000ff0:	82bb      	strh	r3, [r7, #20]

	area->x1 = x_start;
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	801a      	strh	r2, [r3, #0]
	area->x2 = x_start + x_width - 1;
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	b29b      	uxth	r3, r3
 8001002:	4413      	add	r3, r2
 8001004:	b29b      	uxth	r3, r3
 8001006:	3b01      	subs	r3, #1
 8001008:	b29a      	uxth	r2, r3
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	805a      	strh	r2, [r3, #2]
	area->y1 = y_start;
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	b29a      	uxth	r2, r3
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	809a      	strh	r2, [r3, #4]
	area->y2 = y_start + y_height - 1;
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	b29a      	uxth	r2, r3
 800101a:	6a3b      	ldr	r3, [r7, #32]
 800101c:	b29b      	uxth	r3, r3
 800101e:	4413      	add	r3, r2
 8001020:	b29b      	uxth	r3, r3
 8001022:	3b01      	subs	r3, #1
 8001024:	b29a      	uxth	r2, r3
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	80da      	strh	r2, [r3, #6]

	area->x2 = (area->x2 > lcd_total_width) ? lcd_total_width : area->x2;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	885b      	ldrh	r3, [r3, #2]
 800102e:	8afa      	ldrh	r2, [r7, #22]
 8001030:	4293      	cmp	r3, r2
 8001032:	bf28      	it	cs
 8001034:	4613      	movcs	r3, r2
 8001036:	b29a      	uxth	r2, r3
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	805a      	strh	r2, [r3, #2]
	area->y2 = (area->y2 > lcd_total_height) ? lcd_total_height : area->y2;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	88db      	ldrh	r3, [r3, #6]
 8001040:	8aba      	ldrh	r2, [r7, #20]
 8001042:	4293      	cmp	r3, r2
 8001044:	bf28      	it	cs
 8001046:	4613      	movcs	r3, r2
 8001048:	b29a      	uxth	r2, r3
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	80da      	strh	r2, [r3, #6]
}
 800104e:	bf00      	nop
 8001050:	371c      	adds	r7, #28
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <bytes_to_pixels>:

uint32_t bytes_to_pixels(uint32_t nbytes, uint8_t pixel_format)
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	460b      	mov	r3, r1
 8001064:	70fb      	strb	r3, [r7, #3]
	(void)pixel_format;
	return nbytes/2;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	085b      	lsrs	r3, r3, #1
}
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <copy_to_draw_buffer>:

uint32_t copy_to_draw_buffer(bsp_lcd_t *hlcd, uint32_t nbytes, uint32_t rgb888)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b088      	sub	sp, #32
 800107a:	af00      	add	r7, sp, #0
 800107c:	60f8      	str	r0, [r7, #12]
 800107e:	60b9      	str	r1, [r7, #8]
 8001080:	607a      	str	r2, [r7, #4]
	uint16_t *fb_ptr = NULL;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
	uint32_t npixels;
	hlcd->buff_to_draw = get_buff(hlcd);
 8001086:	68f8      	ldr	r0, [r7, #12]
 8001088:	f000 f853 	bl	8001132 <get_buff>
 800108c:	4602      	mov	r2, r0
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	611a      	str	r2, [r3, #16]
	fb_ptr = (uint16_t*)hlcd->buff_to_draw;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	691b      	ldr	r3, [r3, #16]
 8001096:	61fb      	str	r3, [r7, #28]
	nbytes = ((nbytes > DB_SIZE)? DB_SIZE : nbytes);
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800109e:	bf28      	it	cs
 80010a0:	f44f 5320 	movcs.w	r3, #10240	; 0x2800
 80010a4:	60bb      	str	r3, [r7, #8]
	npixels = bytes_to_pixels(nbytes, hlcd->pixel_format);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	785b      	ldrb	r3, [r3, #1]
 80010aa:	4619      	mov	r1, r3
 80010ac:	68b8      	ldr	r0, [r7, #8]
 80010ae:	f7ff ffd4 	bl	800105a <bytes_to_pixels>
 80010b2:	6178      	str	r0, [r7, #20]

	if(hlcd->buff_to_draw != NULL)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	691b      	ldr	r3, [r3, #16]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d035      	beq.n	8001128 <copy_to_draw_buffer+0xb2>
	{
		for(uint32_t i=0;i < npixels; i++)
 80010bc:	2300      	movs	r3, #0
 80010be:	61bb      	str	r3, [r7, #24]
 80010c0:	e00c      	b.n	80010dc <copy_to_draw_buffer+0x66>
		{
			*fb_ptr = bsp_lcd_convert_rgb888_to_rgb565(rgb888);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff fec3 	bl	8000e4e <bsp_lcd_convert_rgb888_to_rgb565>
 80010c8:	4603      	mov	r3, r0
 80010ca:	461a      	mov	r2, r3
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	801a      	strh	r2, [r3, #0]
			fb_ptr++;
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	3302      	adds	r3, #2
 80010d4:	61fb      	str	r3, [r7, #28]
		for(uint32_t i=0;i < npixels; i++)
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	3301      	adds	r3, #1
 80010da:	61bb      	str	r3, [r7, #24]
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d3ee      	bcc.n	80010c2 <copy_to_draw_buffer+0x4c>
		}

		hlcd->write_lenght = pixels_to_bytes(npixels,hlcd->pixel_format);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	785b      	ldrb	r3, [r3, #1]
 80010e8:	4619      	mov	r1, r3
 80010ea:	6978      	ldr	r0, [r7, #20]
 80010ec:	f000 f883 	bl	80011f6 <pixels_to_bytes>
 80010f0:	4602      	mov	r2, r0
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	60da      	str	r2, [r3, #12]
		while(!is_lcd_write_allowed(hlcd));
 80010f6:	bf00      	nop
 80010f8:	68f8      	ldr	r0, [r7, #12]
 80010fa:	f000 f850 	bl	800119e <is_lcd_write_allowed>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d0f9      	beq.n	80010f8 <copy_to_draw_buffer+0x82>
		hlcd->buff_to_flush = hlcd->buff_to_draw;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	691a      	ldr	r2, [r3, #16]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	615a      	str	r2, [r3, #20]
		hlcd->buff_to_draw = NULL;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2200      	movs	r2, #0
 8001110:	611a      	str	r2, [r3, #16]
		hlcd_flush(hlcd);
 8001112:	68f8      	ldr	r0, [r7, #12]
 8001114:	f000 f854 	bl	80011c0 <hlcd_flush>

		return pixels_to_bytes(npixels,hlcd->pixel_format);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	785b      	ldrb	r3, [r3, #1]
 800111c:	4619      	mov	r1, r3
 800111e:	6978      	ldr	r0, [r7, #20]
 8001120:	f000 f869 	bl	80011f6 <pixels_to_bytes>
 8001124:	4603      	mov	r3, r0
 8001126:	e000      	b.n	800112a <copy_to_draw_buffer+0xb4>
	}

	return 0;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3720      	adds	r7, #32
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <get_buff>:

uint8_t *get_buff(bsp_lcd_t *hlcd)
{
 8001132:	b480      	push	{r7}
 8001134:	b085      	sub	sp, #20
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
	uint32_t buf1 = (uint32_t)hlcd->draw_buffer1;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	60fb      	str	r3, [r7, #12]
	uint32_t buf2 = (uint32_t)hlcd->draw_buffer2;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	60bb      	str	r3, [r7, #8]

	//__disable_irq();

	if(hlcd->buff_to_draw == NULL && hlcd->buff_to_flush == NULL)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	691b      	ldr	r3, [r3, #16]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d106      	bne.n	800115c <get_buff+0x2a>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d102      	bne.n	800115c <get_buff+0x2a>
		return hlcd->draw_buffer1;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	e01a      	b.n	8001192 <get_buff+0x60>
	else if((uint32_t)hlcd->buff_to_flush == buf1 && hlcd->buff_to_draw == NULL)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	695b      	ldr	r3, [r3, #20]
 8001160:	461a      	mov	r2, r3
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	4293      	cmp	r3, r2
 8001166:	d106      	bne.n	8001176 <get_buff+0x44>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	691b      	ldr	r3, [r3, #16]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d102      	bne.n	8001176 <get_buff+0x44>
		return hlcd->draw_buffer2;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	e00d      	b.n	8001192 <get_buff+0x60>
	else if((uint32_t)hlcd->buff_to_flush==buf2 && hlcd->buff_to_draw==NULL)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	461a      	mov	r2, r3
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	4293      	cmp	r3, r2
 8001180:	d106      	bne.n	8001190 <get_buff+0x5e>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	691b      	ldr	r3, [r3, #16]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d102      	bne.n	8001190 <get_buff+0x5e>
		return hlcd->draw_buffer1;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	e000      	b.n	8001192 <get_buff+0x60>

	//__enable_irq()

	return NULL;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <is_lcd_write_allowed>:


uint8_t is_lcd_write_allowed(bsp_lcd_t *hlcd)
{
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
	//__disable_irq();
	if(!hlcd->buff_to_flush)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d101      	bne.n	80011b2 <is_lcd_write_allowed+0x14>
		return 1;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e000      	b.n	80011b4 <is_lcd_write_allowed+0x16>

	//__enable_irq();

	return 0;
 80011b2:	2300      	movs	r3, #0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <hlcd_flush>:

void hlcd_flush(bsp_lcd_t *hlcd)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	lcd_set_display_area(&hlcd->area);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3318      	adds	r3, #24
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fd5a 	bl	8000c86 <lcd_set_display_area>

	LCD_Write_Cmd(LCD_MEM_WRITE);
 80011d2:	202c      	movs	r0, #44	; 0x2c
 80011d4:	f7ff fb0e 	bl	80007f4 <LCD_Write_Cmd>
	bsp_lcd_write(hlcd->buff_to_flush,hlcd->write_lenght);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	695a      	ldr	r2, [r3, #20]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	4619      	mov	r1, r3
 80011e2:	4610      	mov	r0, r2
 80011e4:	f7ff fd82 	bl	8000cec <bsp_lcd_write>
	hlcd->buff_to_flush = NULL;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	615a      	str	r2, [r3, #20]
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <pixels_to_bytes>:

uint32_t pixels_to_bytes(uint32_t pixels,uint8_t pixel_format)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	460b      	mov	r3, r1
 8001200:	70fb      	strb	r3, [r7, #3]
	(void)pixel_format;
	return pixels * 2UL;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	005b      	lsls	r3, r3, #1
}
 8001206:	4618      	mov	r0, r3
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001216:	f000 fbf2 	bl	80019fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800121a:	f000 f80f 	bl	800123c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800121e:	f000 f92b 	bl	8001478 <MX_GPIO_Init>
  MX_ETH_Init();
 8001222:	f000 f87d 	bl	8001320 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001226:	f000 f8c9 	bl	80013bc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800122a:	f000 f8f7 	bl	800141c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  LCD_ILI9341_Init();
 800122e:	f7ff f985 	bl	800053c <LCD_ILI9341_Init>



  bsp_lcd_set_backgrounf_color(RED);
 8001232:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
 8001236:	f7ff fdf9 	bl	8000e2c <bsp_lcd_set_backgrounf_color>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800123a:	e7fe      	b.n	800123a <main+0x28>

0800123c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b094      	sub	sp, #80	; 0x50
 8001240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001242:	f107 031c 	add.w	r3, r7, #28
 8001246:	2234      	movs	r2, #52	; 0x34
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f003 fc4e 	bl	8004aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001260:	f001 fb68 	bl	8002934 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001264:	4b2c      	ldr	r3, [pc, #176]	; (8001318 <SystemClock_Config+0xdc>)
 8001266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001268:	4a2b      	ldr	r2, [pc, #172]	; (8001318 <SystemClock_Config+0xdc>)
 800126a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800126e:	6413      	str	r3, [r2, #64]	; 0x40
 8001270:	4b29      	ldr	r3, [pc, #164]	; (8001318 <SystemClock_Config+0xdc>)
 8001272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800127c:	4b27      	ldr	r3, [pc, #156]	; (800131c <SystemClock_Config+0xe0>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001284:	4a25      	ldr	r2, [pc, #148]	; (800131c <SystemClock_Config+0xe0>)
 8001286:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	4b23      	ldr	r3, [pc, #140]	; (800131c <SystemClock_Config+0xe0>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001294:	603b      	str	r3, [r7, #0]
 8001296:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001298:	2301      	movs	r3, #1
 800129a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800129c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80012a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a2:	2302      	movs	r3, #2
 80012a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012ac:	2304      	movs	r3, #4
 80012ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80012b0:	2360      	movs	r3, #96	; 0x60
 80012b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012b4:	2302      	movs	r3, #2
 80012b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012b8:	2304      	movs	r3, #4
 80012ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012bc:	2302      	movs	r3, #2
 80012be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c0:	f107 031c 	add.w	r3, r7, #28
 80012c4:	4618      	mov	r0, r3
 80012c6:	f001 fb95 	bl	80029f4 <HAL_RCC_OscConfig>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012d0:	f000 f974 	bl	80015bc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012d4:	f001 fb3e 	bl	8002954 <HAL_PWREx_EnableOverDrive>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80012de:	f000 f96d 	bl	80015bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e2:	230f      	movs	r3, #15
 80012e4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012e6:	2302      	movs	r3, #2
 80012e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80012f8:	f107 0308 	add.w	r3, r7, #8
 80012fc:	2103      	movs	r1, #3
 80012fe:	4618      	mov	r0, r3
 8001300:	f001 fe26 	bl	8002f50 <HAL_RCC_ClockConfig>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800130a:	f000 f957 	bl	80015bc <Error_Handler>
  }
}
 800130e:	bf00      	nop
 8001310:	3750      	adds	r7, #80	; 0x50
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800
 800131c:	40007000 	.word	0x40007000

08001320 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001324:	4b1f      	ldr	r3, [pc, #124]	; (80013a4 <MX_ETH_Init+0x84>)
 8001326:	4a20      	ldr	r2, [pc, #128]	; (80013a8 <MX_ETH_Init+0x88>)
 8001328:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800132a:	4b20      	ldr	r3, [pc, #128]	; (80013ac <MX_ETH_Init+0x8c>)
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001330:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <MX_ETH_Init+0x8c>)
 8001332:	2280      	movs	r2, #128	; 0x80
 8001334:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001336:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <MX_ETH_Init+0x8c>)
 8001338:	22e1      	movs	r2, #225	; 0xe1
 800133a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800133c:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <MX_ETH_Init+0x8c>)
 800133e:	2200      	movs	r2, #0
 8001340:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001342:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <MX_ETH_Init+0x8c>)
 8001344:	2200      	movs	r2, #0
 8001346:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001348:	4b18      	ldr	r3, [pc, #96]	; (80013ac <MX_ETH_Init+0x8c>)
 800134a:	2200      	movs	r2, #0
 800134c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800134e:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <MX_ETH_Init+0x84>)
 8001350:	4a16      	ldr	r2, [pc, #88]	; (80013ac <MX_ETH_Init+0x8c>)
 8001352:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001354:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <MX_ETH_Init+0x84>)
 8001356:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800135a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800135c:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <MX_ETH_Init+0x84>)
 800135e:	4a14      	ldr	r2, [pc, #80]	; (80013b0 <MX_ETH_Init+0x90>)
 8001360:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <MX_ETH_Init+0x84>)
 8001364:	4a13      	ldr	r2, [pc, #76]	; (80013b4 <MX_ETH_Init+0x94>)
 8001366:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001368:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <MX_ETH_Init+0x84>)
 800136a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800136e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001370:	480c      	ldr	r0, [pc, #48]	; (80013a4 <MX_ETH_Init+0x84>)
 8001372:	f000 fcab 	bl	8001ccc <HAL_ETH_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800137c:	f000 f91e 	bl	80015bc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001380:	2238      	movs	r2, #56	; 0x38
 8001382:	2100      	movs	r1, #0
 8001384:	480c      	ldr	r0, [pc, #48]	; (80013b8 <MX_ETH_Init+0x98>)
 8001386:	f003 fbb1 	bl	8004aec <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800138a:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <MX_ETH_Init+0x98>)
 800138c:	2221      	movs	r2, #33	; 0x21
 800138e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001390:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <MX_ETH_Init+0x98>)
 8001392:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001396:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001398:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <MX_ETH_Init+0x98>)
 800139a:	2200      	movs	r2, #0
 800139c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	200051c4 	.word	0x200051c4
 80013a8:	40028000 	.word	0x40028000
 80013ac:	20005804 	.word	0x20005804
 80013b0:	200000b0 	.word	0x200000b0
 80013b4:	20000010 	.word	0x20000010
 80013b8:	2000518c 	.word	0x2000518c

080013bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013c0:	4b14      	ldr	r3, [pc, #80]	; (8001414 <MX_USART3_UART_Init+0x58>)
 80013c2:	4a15      	ldr	r2, [pc, #84]	; (8001418 <MX_USART3_UART_Init+0x5c>)
 80013c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013c6:	4b13      	ldr	r3, [pc, #76]	; (8001414 <MX_USART3_UART_Init+0x58>)
 80013c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <MX_USART3_UART_Init+0x58>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <MX_USART3_UART_Init+0x58>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <MX_USART3_UART_Init+0x58>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <MX_USART3_UART_Init+0x58>)
 80013e2:	220c      	movs	r2, #12
 80013e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <MX_USART3_UART_Init+0x58>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ec:	4b09      	ldr	r3, [pc, #36]	; (8001414 <MX_USART3_UART_Init+0x58>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013f2:	4b08      	ldr	r3, [pc, #32]	; (8001414 <MX_USART3_UART_Init+0x58>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <MX_USART3_UART_Init+0x58>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013fe:	4805      	ldr	r0, [pc, #20]	; (8001414 <MX_USART3_UART_Init+0x58>)
 8001400:	f002 fbf4 	bl	8003bec <HAL_UART_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800140a:	f000 f8d7 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20005274 	.word	0x20005274
 8001418:	40004800 	.word	0x40004800

0800141c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001420:	4b14      	ldr	r3, [pc, #80]	; (8001474 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001422:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001426:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800142a:	2206      	movs	r2, #6
 800142c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800142e:	4b11      	ldr	r3, [pc, #68]	; (8001474 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001430:	2202      	movs	r2, #2
 8001432:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001436:	2200      	movs	r2, #0
 8001438:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800143c:	2202      	movs	r2, #2
 800143e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001442:	2201      	movs	r2, #1
 8001444:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001448:	2200      	movs	r2, #0
 800144a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800144c:	4b09      	ldr	r3, [pc, #36]	; (8001474 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800144e:	2200      	movs	r2, #0
 8001450:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001452:	4b08      	ldr	r3, [pc, #32]	; (8001474 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001454:	2201      	movs	r2, #1
 8001456:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800145a:	2200      	movs	r2, #0
 800145c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800145e:	4805      	ldr	r0, [pc, #20]	; (8001474 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001460:	f001 f91f 	bl	80026a2 <HAL_PCD_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800146a:	f000 f8a7 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	200052fc 	.word	0x200052fc

08001478 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08c      	sub	sp, #48	; 0x30
 800147c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147e:	f107 031c 	add.w	r3, r7, #28
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
 800148c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800148e:	4b47      	ldr	r3, [pc, #284]	; (80015ac <MX_GPIO_Init+0x134>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a46      	ldr	r2, [pc, #280]	; (80015ac <MX_GPIO_Init+0x134>)
 8001494:	f043 0304 	orr.w	r3, r3, #4
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b44      	ldr	r3, [pc, #272]	; (80015ac <MX_GPIO_Init+0x134>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	61bb      	str	r3, [r7, #24]
 80014a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014a6:	4b41      	ldr	r3, [pc, #260]	; (80015ac <MX_GPIO_Init+0x134>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a40      	ldr	r2, [pc, #256]	; (80015ac <MX_GPIO_Init+0x134>)
 80014ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b3e      	ldr	r3, [pc, #248]	; (80015ac <MX_GPIO_Init+0x134>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014be:	4b3b      	ldr	r3, [pc, #236]	; (80015ac <MX_GPIO_Init+0x134>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a3a      	ldr	r2, [pc, #232]	; (80015ac <MX_GPIO_Init+0x134>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b38      	ldr	r3, [pc, #224]	; (80015ac <MX_GPIO_Init+0x134>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d6:	4b35      	ldr	r3, [pc, #212]	; (80015ac <MX_GPIO_Init+0x134>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a34      	ldr	r2, [pc, #208]	; (80015ac <MX_GPIO_Init+0x134>)
 80014dc:	f043 0302 	orr.w	r3, r3, #2
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b32      	ldr	r3, [pc, #200]	; (80015ac <MX_GPIO_Init+0x134>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ee:	4b2f      	ldr	r3, [pc, #188]	; (80015ac <MX_GPIO_Init+0x134>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a2e      	ldr	r2, [pc, #184]	; (80015ac <MX_GPIO_Init+0x134>)
 80014f4:	f043 0308 	orr.w	r3, r3, #8
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b2c      	ldr	r3, [pc, #176]	; (80015ac <MX_GPIO_Init+0x134>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0308 	and.w	r3, r3, #8
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001506:	4b29      	ldr	r3, [pc, #164]	; (80015ac <MX_GPIO_Init+0x134>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	4a28      	ldr	r2, [pc, #160]	; (80015ac <MX_GPIO_Init+0x134>)
 800150c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
 8001512:	4b26      	ldr	r3, [pc, #152]	; (80015ac <MX_GPIO_Init+0x134>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800151e:	2200      	movs	r2, #0
 8001520:	f244 0181 	movw	r1, #16513	; 0x4081
 8001524:	4822      	ldr	r0, [pc, #136]	; (80015b0 <MX_GPIO_Init+0x138>)
 8001526:	f001 f8a3 	bl	8002670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800152a:	2200      	movs	r2, #0
 800152c:	2140      	movs	r1, #64	; 0x40
 800152e:	4821      	ldr	r0, [pc, #132]	; (80015b4 <MX_GPIO_Init+0x13c>)
 8001530:	f001 f89e 	bl	8002670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001534:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001538:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800153a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800153e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001544:	f107 031c 	add.w	r3, r7, #28
 8001548:	4619      	mov	r1, r3
 800154a:	481b      	ldr	r0, [pc, #108]	; (80015b8 <MX_GPIO_Init+0x140>)
 800154c:	f000 fee4 	bl	8002318 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001550:	f244 0381 	movw	r3, #16513	; 0x4081
 8001554:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001556:	2301      	movs	r3, #1
 8001558:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001562:	f107 031c 	add.w	r3, r7, #28
 8001566:	4619      	mov	r1, r3
 8001568:	4811      	ldr	r0, [pc, #68]	; (80015b0 <MX_GPIO_Init+0x138>)
 800156a:	f000 fed5 	bl	8002318 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800156e:	2340      	movs	r3, #64	; 0x40
 8001570:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001572:	2301      	movs	r3, #1
 8001574:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2300      	movs	r3, #0
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800157e:	f107 031c 	add.w	r3, r7, #28
 8001582:	4619      	mov	r1, r3
 8001584:	480b      	ldr	r0, [pc, #44]	; (80015b4 <MX_GPIO_Init+0x13c>)
 8001586:	f000 fec7 	bl	8002318 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800158a:	2380      	movs	r3, #128	; 0x80
 800158c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800158e:	2300      	movs	r3, #0
 8001590:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001596:	f107 031c 	add.w	r3, r7, #28
 800159a:	4619      	mov	r1, r3
 800159c:	4805      	ldr	r0, [pc, #20]	; (80015b4 <MX_GPIO_Init+0x13c>)
 800159e:	f000 febb 	bl	8002318 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015a2:	bf00      	nop
 80015a4:	3730      	adds	r7, #48	; 0x30
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40020400 	.word	0x40020400
 80015b4:	40021800 	.word	0x40021800
 80015b8:	40020800 	.word	0x40020800

080015bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c0:	b672      	cpsid	i
}
 80015c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <Error_Handler+0x8>
	...

080015c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80015ce:	4b0f      	ldr	r3, [pc, #60]	; (800160c <HAL_MspInit+0x44>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	4a0e      	ldr	r2, [pc, #56]	; (800160c <HAL_MspInit+0x44>)
 80015d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d8:	6413      	str	r3, [r2, #64]	; 0x40
 80015da:	4b0c      	ldr	r3, [pc, #48]	; (800160c <HAL_MspInit+0x44>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e6:	4b09      	ldr	r3, [pc, #36]	; (800160c <HAL_MspInit+0x44>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ea:	4a08      	ldr	r2, [pc, #32]	; (800160c <HAL_MspInit+0x44>)
 80015ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f0:	6453      	str	r3, [r2, #68]	; 0x44
 80015f2:	4b06      	ldr	r3, [pc, #24]	; (800160c <HAL_MspInit+0x44>)
 80015f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	40023800 	.word	0x40023800

08001610 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08e      	sub	sp, #56	; 0x38
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a4e      	ldr	r2, [pc, #312]	; (8001768 <HAL_ETH_MspInit+0x158>)
 800162e:	4293      	cmp	r3, r2
 8001630:	f040 8096 	bne.w	8001760 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001634:	4b4d      	ldr	r3, [pc, #308]	; (800176c <HAL_ETH_MspInit+0x15c>)
 8001636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001638:	4a4c      	ldr	r2, [pc, #304]	; (800176c <HAL_ETH_MspInit+0x15c>)
 800163a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800163e:	6313      	str	r3, [r2, #48]	; 0x30
 8001640:	4b4a      	ldr	r3, [pc, #296]	; (800176c <HAL_ETH_MspInit+0x15c>)
 8001642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001648:	623b      	str	r3, [r7, #32]
 800164a:	6a3b      	ldr	r3, [r7, #32]
 800164c:	4b47      	ldr	r3, [pc, #284]	; (800176c <HAL_ETH_MspInit+0x15c>)
 800164e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001650:	4a46      	ldr	r2, [pc, #280]	; (800176c <HAL_ETH_MspInit+0x15c>)
 8001652:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001656:	6313      	str	r3, [r2, #48]	; 0x30
 8001658:	4b44      	ldr	r3, [pc, #272]	; (800176c <HAL_ETH_MspInit+0x15c>)
 800165a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001660:	61fb      	str	r3, [r7, #28]
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	4b41      	ldr	r3, [pc, #260]	; (800176c <HAL_ETH_MspInit+0x15c>)
 8001666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001668:	4a40      	ldr	r2, [pc, #256]	; (800176c <HAL_ETH_MspInit+0x15c>)
 800166a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800166e:	6313      	str	r3, [r2, #48]	; 0x30
 8001670:	4b3e      	ldr	r3, [pc, #248]	; (800176c <HAL_ETH_MspInit+0x15c>)
 8001672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001674:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001678:	61bb      	str	r3, [r7, #24]
 800167a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800167c:	4b3b      	ldr	r3, [pc, #236]	; (800176c <HAL_ETH_MspInit+0x15c>)
 800167e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001680:	4a3a      	ldr	r2, [pc, #232]	; (800176c <HAL_ETH_MspInit+0x15c>)
 8001682:	f043 0304 	orr.w	r3, r3, #4
 8001686:	6313      	str	r3, [r2, #48]	; 0x30
 8001688:	4b38      	ldr	r3, [pc, #224]	; (800176c <HAL_ETH_MspInit+0x15c>)
 800168a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001694:	4b35      	ldr	r3, [pc, #212]	; (800176c <HAL_ETH_MspInit+0x15c>)
 8001696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001698:	4a34      	ldr	r2, [pc, #208]	; (800176c <HAL_ETH_MspInit+0x15c>)
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	6313      	str	r3, [r2, #48]	; 0x30
 80016a0:	4b32      	ldr	r3, [pc, #200]	; (800176c <HAL_ETH_MspInit+0x15c>)
 80016a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ac:	4b2f      	ldr	r3, [pc, #188]	; (800176c <HAL_ETH_MspInit+0x15c>)
 80016ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b0:	4a2e      	ldr	r2, [pc, #184]	; (800176c <HAL_ETH_MspInit+0x15c>)
 80016b2:	f043 0302 	orr.w	r3, r3, #2
 80016b6:	6313      	str	r3, [r2, #48]	; 0x30
 80016b8:	4b2c      	ldr	r3, [pc, #176]	; (800176c <HAL_ETH_MspInit+0x15c>)
 80016ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016c4:	4b29      	ldr	r3, [pc, #164]	; (800176c <HAL_ETH_MspInit+0x15c>)
 80016c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c8:	4a28      	ldr	r2, [pc, #160]	; (800176c <HAL_ETH_MspInit+0x15c>)
 80016ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016ce:	6313      	str	r3, [r2, #48]	; 0x30
 80016d0:	4b26      	ldr	r3, [pc, #152]	; (800176c <HAL_ETH_MspInit+0x15c>)
 80016d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80016dc:	2332      	movs	r3, #50	; 0x32
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e0:	2302      	movs	r3, #2
 80016e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e8:	2303      	movs	r3, #3
 80016ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016ec:	230b      	movs	r3, #11
 80016ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f4:	4619      	mov	r1, r3
 80016f6:	481e      	ldr	r0, [pc, #120]	; (8001770 <HAL_ETH_MspInit+0x160>)
 80016f8:	f000 fe0e 	bl	8002318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80016fc:	2386      	movs	r3, #134	; 0x86
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001700:	2302      	movs	r3, #2
 8001702:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001708:	2303      	movs	r3, #3
 800170a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800170c:	230b      	movs	r3, #11
 800170e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001714:	4619      	mov	r1, r3
 8001716:	4817      	ldr	r0, [pc, #92]	; (8001774 <HAL_ETH_MspInit+0x164>)
 8001718:	f000 fdfe 	bl	8002318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800171c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001722:	2302      	movs	r3, #2
 8001724:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172a:	2303      	movs	r3, #3
 800172c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800172e:	230b      	movs	r3, #11
 8001730:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001736:	4619      	mov	r1, r3
 8001738:	480f      	ldr	r0, [pc, #60]	; (8001778 <HAL_ETH_MspInit+0x168>)
 800173a:	f000 fded 	bl	8002318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800173e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001744:	2302      	movs	r3, #2
 8001746:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174c:	2303      	movs	r3, #3
 800174e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001750:	230b      	movs	r3, #11
 8001752:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001758:	4619      	mov	r1, r3
 800175a:	4808      	ldr	r0, [pc, #32]	; (800177c <HAL_ETH_MspInit+0x16c>)
 800175c:	f000 fddc 	bl	8002318 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001760:	bf00      	nop
 8001762:	3738      	adds	r7, #56	; 0x38
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40028000 	.word	0x40028000
 800176c:	40023800 	.word	0x40023800
 8001770:	40020800 	.word	0x40020800
 8001774:	40020000 	.word	0x40020000
 8001778:	40020400 	.word	0x40020400
 800177c:	40021800 	.word	0x40021800

08001780 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b0ae      	sub	sp, #184	; 0xb8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	2290      	movs	r2, #144	; 0x90
 800179e:	2100      	movs	r1, #0
 80017a0:	4618      	mov	r0, r3
 80017a2:	f003 f9a3 	bl	8004aec <memset>
  if(huart->Instance==USART3)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a22      	ldr	r2, [pc, #136]	; (8001834 <HAL_UART_MspInit+0xb4>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d13c      	bne.n	800182a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80017b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017b4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80017b6:	2300      	movs	r3, #0
 80017b8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	4618      	mov	r0, r3
 80017c0:	f001 fdec 	bl	800339c <HAL_RCCEx_PeriphCLKConfig>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80017ca:	f7ff fef7 	bl	80015bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80017ce:	4b1a      	ldr	r3, [pc, #104]	; (8001838 <HAL_UART_MspInit+0xb8>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	4a19      	ldr	r2, [pc, #100]	; (8001838 <HAL_UART_MspInit+0xb8>)
 80017d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017d8:	6413      	str	r3, [r2, #64]	; 0x40
 80017da:	4b17      	ldr	r3, [pc, #92]	; (8001838 <HAL_UART_MspInit+0xb8>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017e6:	4b14      	ldr	r3, [pc, #80]	; (8001838 <HAL_UART_MspInit+0xb8>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a13      	ldr	r2, [pc, #76]	; (8001838 <HAL_UART_MspInit+0xb8>)
 80017ec:	f043 0308 	orr.w	r3, r3, #8
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b11      	ldr	r3, [pc, #68]	; (8001838 <HAL_UART_MspInit+0xb8>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0308 	and.w	r3, r3, #8
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80017fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001802:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001812:	2303      	movs	r3, #3
 8001814:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001818:	2307      	movs	r3, #7
 800181a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800181e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001822:	4619      	mov	r1, r3
 8001824:	4805      	ldr	r0, [pc, #20]	; (800183c <HAL_UART_MspInit+0xbc>)
 8001826:	f000 fd77 	bl	8002318 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800182a:	bf00      	nop
 800182c:	37b8      	adds	r7, #184	; 0xb8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40004800 	.word	0x40004800
 8001838:	40023800 	.word	0x40023800
 800183c:	40020c00 	.word	0x40020c00

08001840 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b0ae      	sub	sp, #184	; 0xb8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	2290      	movs	r2, #144	; 0x90
 800185e:	2100      	movs	r1, #0
 8001860:	4618      	mov	r0, r3
 8001862:	f003 f943 	bl	8004aec <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800186e:	d159      	bne.n	8001924 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001870:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001874:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001876:	2300      	movs	r3, #0
 8001878:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	4618      	mov	r0, r3
 8001882:	f001 fd8b 	bl	800339c <HAL_RCCEx_PeriphCLKConfig>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800188c:	f7ff fe96 	bl	80015bc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001890:	4b26      	ldr	r3, [pc, #152]	; (800192c <HAL_PCD_MspInit+0xec>)
 8001892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001894:	4a25      	ldr	r2, [pc, #148]	; (800192c <HAL_PCD_MspInit+0xec>)
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	6313      	str	r3, [r2, #48]	; 0x30
 800189c:	4b23      	ldr	r3, [pc, #140]	; (800192c <HAL_PCD_MspInit+0xec>)
 800189e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	613b      	str	r3, [r7, #16]
 80018a6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80018a8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80018ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b0:	2302      	movs	r3, #2
 80018b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018bc:	2303      	movs	r3, #3
 80018be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018c2:	230a      	movs	r3, #10
 80018c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018cc:	4619      	mov	r1, r3
 80018ce:	4818      	ldr	r0, [pc, #96]	; (8001930 <HAL_PCD_MspInit+0xf0>)
 80018d0:	f000 fd22 	bl	8002318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80018d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018dc:	2300      	movs	r3, #0
 80018de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80018e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018ec:	4619      	mov	r1, r3
 80018ee:	4810      	ldr	r0, [pc, #64]	; (8001930 <HAL_PCD_MspInit+0xf0>)
 80018f0:	f000 fd12 	bl	8002318 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80018f4:	4b0d      	ldr	r3, [pc, #52]	; (800192c <HAL_PCD_MspInit+0xec>)
 80018f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f8:	4a0c      	ldr	r2, [pc, #48]	; (800192c <HAL_PCD_MspInit+0xec>)
 80018fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018fe:	6353      	str	r3, [r2, #52]	; 0x34
 8001900:	4b0a      	ldr	r3, [pc, #40]	; (800192c <HAL_PCD_MspInit+0xec>)
 8001902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	4b07      	ldr	r3, [pc, #28]	; (800192c <HAL_PCD_MspInit+0xec>)
 800190e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001910:	4a06      	ldr	r2, [pc, #24]	; (800192c <HAL_PCD_MspInit+0xec>)
 8001912:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001916:	6453      	str	r3, [r2, #68]	; 0x44
 8001918:	4b04      	ldr	r3, [pc, #16]	; (800192c <HAL_PCD_MspInit+0xec>)
 800191a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001924:	bf00      	nop
 8001926:	37b8      	adds	r7, #184	; 0xb8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40023800 	.word	0x40023800
 8001930:	40020000 	.word	0x40020000

08001934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001938:	e7fe      	b.n	8001938 <NMI_Handler+0x4>

0800193a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800193e:	e7fe      	b.n	800193e <HardFault_Handler+0x4>

08001940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001944:	e7fe      	b.n	8001944 <MemManage_Handler+0x4>

08001946 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800194a:	e7fe      	b.n	800194a <BusFault_Handler+0x4>

0800194c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <UsageFault_Handler+0x4>

08001952 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001980:	f000 f87a 	bl	8001a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}

08001988 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <SystemInit+0x20>)
 800198e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001992:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <SystemInit+0x20>)
 8001994:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001998:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019b0:	480d      	ldr	r0, [pc, #52]	; (80019e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019b2:	490e      	ldr	r1, [pc, #56]	; (80019ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019b4:	4a0e      	ldr	r2, [pc, #56]	; (80019f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b8:	e002      	b.n	80019c0 <LoopCopyDataInit>

080019ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019be:	3304      	adds	r3, #4

080019c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c4:	d3f9      	bcc.n	80019ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019c6:	4a0b      	ldr	r2, [pc, #44]	; (80019f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019c8:	4c0b      	ldr	r4, [pc, #44]	; (80019f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019cc:	e001      	b.n	80019d2 <LoopFillZerobss>

080019ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d0:	3204      	adds	r2, #4

080019d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d4:	d3fb      	bcc.n	80019ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019d6:	f7ff ffd7 	bl	8001988 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019da:	f003 f863 	bl	8004aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019de:	f7ff fc18 	bl	8001212 <main>
  bx  lr    
 80019e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019e4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80019e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019ec:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80019f0:	08004b3c 	.word	0x08004b3c
  ldr r2, =_sbss
 80019f4:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 80019f8:	20005810 	.word	0x20005810

080019fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019fc:	e7fe      	b.n	80019fc <ADC_IRQHandler>

080019fe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a02:	2003      	movs	r0, #3
 8001a04:	f000 f92e 	bl	8001c64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a08:	2000      	movs	r0, #0
 8001a0a:	f000 f805 	bl	8001a18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a0e:	f7ff fddb 	bl	80015c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a20:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <HAL_InitTick+0x54>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <HAL_InitTick+0x58>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 f93b 	bl	8001cb2 <HAL_SYSTICK_Config>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e00e      	b.n	8001a64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b0f      	cmp	r3, #15
 8001a4a:	d80a      	bhi.n	8001a62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	f04f 30ff 	mov.w	r0, #4294967295
 8001a54:	f000 f911 	bl	8001c7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a58:	4a06      	ldr	r2, [pc, #24]	; (8001a74 <HAL_InitTick+0x5c>)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	e000      	b.n	8001a64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000004 	.word	0x20000004
 8001a70:	2000000c 	.word	0x2000000c
 8001a74:	20000008 	.word	0x20000008

08001a78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a7c:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <HAL_IncTick+0x20>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	461a      	mov	r2, r3
 8001a82:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_IncTick+0x24>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4413      	add	r3, r2
 8001a88:	4a04      	ldr	r2, [pc, #16]	; (8001a9c <HAL_IncTick+0x24>)
 8001a8a:	6013      	str	r3, [r2, #0]
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	2000000c 	.word	0x2000000c
 8001a9c:	2000580c 	.word	0x2000580c

08001aa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa4:	4b03      	ldr	r3, [pc, #12]	; (8001ab4 <HAL_GetTick+0x14>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	2000580c 	.word	0x2000580c

08001ab8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ac0:	f7ff ffee 	bl	8001aa0 <HAL_GetTick>
 8001ac4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad0:	d005      	beq.n	8001ade <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ad2:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <HAL_Delay+0x44>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4413      	add	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ade:	bf00      	nop
 8001ae0:	f7ff ffde 	bl	8001aa0 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d8f7      	bhi.n	8001ae0 <HAL_Delay+0x28>
  {
  }
}
 8001af0:	bf00      	nop
 8001af2:	bf00      	nop
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	2000000c 	.word	0x2000000c

08001b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b10:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <__NVIC_SetPriorityGrouping+0x40>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b28:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <__NVIC_SetPriorityGrouping+0x44>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b2e:	4a04      	ldr	r2, [pc, #16]	; (8001b40 <__NVIC_SetPriorityGrouping+0x40>)
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	60d3      	str	r3, [r2, #12]
}
 8001b34:	bf00      	nop
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	e000ed00 	.word	0xe000ed00
 8001b44:	05fa0000 	.word	0x05fa0000

08001b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b4c:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <__NVIC_GetPriorityGrouping+0x18>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	0a1b      	lsrs	r3, r3, #8
 8001b52:	f003 0307 	and.w	r3, r3, #7
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	6039      	str	r1, [r7, #0]
 8001b6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	db0a      	blt.n	8001b8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	490c      	ldr	r1, [pc, #48]	; (8001bb0 <__NVIC_SetPriority+0x4c>)
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	0112      	lsls	r2, r2, #4
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	440b      	add	r3, r1
 8001b88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b8c:	e00a      	b.n	8001ba4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	4908      	ldr	r1, [pc, #32]	; (8001bb4 <__NVIC_SetPriority+0x50>)
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	3b04      	subs	r3, #4
 8001b9c:	0112      	lsls	r2, r2, #4
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	761a      	strb	r2, [r3, #24]
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	e000e100 	.word	0xe000e100
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b089      	sub	sp, #36	; 0x24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f1c3 0307 	rsb	r3, r3, #7
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	bf28      	it	cs
 8001bd6:	2304      	movcs	r3, #4
 8001bd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	3304      	adds	r3, #4
 8001bde:	2b06      	cmp	r3, #6
 8001be0:	d902      	bls.n	8001be8 <NVIC_EncodePriority+0x30>
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	3b03      	subs	r3, #3
 8001be6:	e000      	b.n	8001bea <NVIC_EncodePriority+0x32>
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bec:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43da      	mvns	r2, r3
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	401a      	ands	r2, r3
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c00:	f04f 31ff 	mov.w	r1, #4294967295
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0a:	43d9      	mvns	r1, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c10:	4313      	orrs	r3, r2
         );
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3724      	adds	r7, #36	; 0x24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
	...

08001c20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c30:	d301      	bcc.n	8001c36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c32:	2301      	movs	r3, #1
 8001c34:	e00f      	b.n	8001c56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c36:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <SysTick_Config+0x40>)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c3e:	210f      	movs	r1, #15
 8001c40:	f04f 30ff 	mov.w	r0, #4294967295
 8001c44:	f7ff ff8e 	bl	8001b64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c48:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <SysTick_Config+0x40>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c4e:	4b04      	ldr	r3, [pc, #16]	; (8001c60 <SysTick_Config+0x40>)
 8001c50:	2207      	movs	r2, #7
 8001c52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	e000e010 	.word	0xe000e010

08001c64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff ff47 	bl	8001b00 <__NVIC_SetPriorityGrouping>
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b086      	sub	sp, #24
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	4603      	mov	r3, r0
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	607a      	str	r2, [r7, #4]
 8001c86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c8c:	f7ff ff5c 	bl	8001b48 <__NVIC_GetPriorityGrouping>
 8001c90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	68b9      	ldr	r1, [r7, #8]
 8001c96:	6978      	ldr	r0, [r7, #20]
 8001c98:	f7ff ff8e 	bl	8001bb8 <NVIC_EncodePriority>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ff5d 	bl	8001b64 <__NVIC_SetPriority>
}
 8001caa:	bf00      	nop
 8001cac:	3718      	adds	r7, #24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff ffb0 	bl	8001c20 <SysTick_Config>
 8001cc0:	4603      	mov	r3, r0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
	...

08001ccc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e06a      	b.n	8001db4 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d106      	bne.n	8001cf6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2223      	movs	r2, #35	; 0x23
 8001cec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff fc8d 	bl	8001610 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf6:	4b31      	ldr	r3, [pc, #196]	; (8001dbc <HAL_ETH_Init+0xf0>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfa:	4a30      	ldr	r2, [pc, #192]	; (8001dbc <HAL_ETH_Init+0xf0>)
 8001cfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d00:	6453      	str	r3, [r2, #68]	; 0x44
 8001d02:	4b2e      	ldr	r3, [pc, #184]	; (8001dbc <HAL_ETH_Init+0xf0>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001d0e:	4b2c      	ldr	r3, [pc, #176]	; (8001dc0 <HAL_ETH_Init+0xf4>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	4a2b      	ldr	r2, [pc, #172]	; (8001dc0 <HAL_ETH_Init+0xf4>)
 8001d14:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001d18:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001d1a:	4b29      	ldr	r3, [pc, #164]	; (8001dc0 <HAL_ETH_Init+0xf4>)
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	4927      	ldr	r1, [pc, #156]	; (8001dc0 <HAL_ETH_Init+0xf4>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001d28:	4b25      	ldr	r3, [pc, #148]	; (8001dc0 <HAL_ETH_Init+0xf4>)
 8001d2a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6812      	ldr	r2, [r2, #0]
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d42:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d44:	f7ff feac 	bl	8001aa0 <HAL_GetTick>
 8001d48:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001d4a:	e011      	b.n	8001d70 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001d4c:	f7ff fea8 	bl	8001aa0 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d5a:	d909      	bls.n	8001d70 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2204      	movs	r2, #4
 8001d60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	22e0      	movs	r2, #224	; 0xe0
 8001d68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e021      	b.n	8001db4 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1e4      	bne.n	8001d4c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f958 	bl	8002038 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f9ff 	bl	800218c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 fa55 	bl	800223e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 f9bd 	bl	800211c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2210      	movs	r2, #16
 8001dae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40013800 	.word	0x40013800

08001dc4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	4b51      	ldr	r3, [pc, #324]	; (8001f20 <ETH_SetMACConfig+0x15c>)
 8001dda:	4013      	ands	r3, r2
 8001ddc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	7c1b      	ldrb	r3, [r3, #16]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d102      	bne.n	8001dec <ETH_SetMACConfig+0x28>
 8001de6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001dea:	e000      	b.n	8001dee <ETH_SetMACConfig+0x2a>
 8001dec:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	7c5b      	ldrb	r3, [r3, #17]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d102      	bne.n	8001dfc <ETH_SetMACConfig+0x38>
 8001df6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001dfa:	e000      	b.n	8001dfe <ETH_SetMACConfig+0x3a>
 8001dfc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001dfe:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001e04:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	7fdb      	ldrb	r3, [r3, #31]
 8001e0a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001e0c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001e12:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	7f92      	ldrb	r2, [r2, #30]
 8001e18:	2a00      	cmp	r2, #0
 8001e1a:	d102      	bne.n	8001e22 <ETH_SetMACConfig+0x5e>
 8001e1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e20:	e000      	b.n	8001e24 <ETH_SetMACConfig+0x60>
 8001e22:	2200      	movs	r2, #0
                        macconf->Speed |
 8001e24:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	7f1b      	ldrb	r3, [r3, #28]
 8001e2a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001e2c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001e32:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	791b      	ldrb	r3, [r3, #4]
 8001e38:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001e3a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001e42:	2a00      	cmp	r2, #0
 8001e44:	d102      	bne.n	8001e4c <ETH_SetMACConfig+0x88>
 8001e46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e4a:	e000      	b.n	8001e4e <ETH_SetMACConfig+0x8a>
 8001e4c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001e4e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	7bdb      	ldrb	r3, [r3, #15]
 8001e54:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001e56:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001e5c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001e64:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e66:	4313      	orrs	r3, r2
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e7e:	2001      	movs	r0, #1
 8001e80:	f7ff fe1a 	bl	8001ab8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ea2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001eaa:	2a00      	cmp	r2, #0
 8001eac:	d101      	bne.n	8001eb2 <ETH_SetMACConfig+0xee>
 8001eae:	2280      	movs	r2, #128	; 0x80
 8001eb0:	e000      	b.n	8001eb4 <ETH_SetMACConfig+0xf0>
 8001eb2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001eb4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001eba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001ec2:	2a01      	cmp	r2, #1
 8001ec4:	d101      	bne.n	8001eca <ETH_SetMACConfig+0x106>
 8001ec6:	2208      	movs	r2, #8
 8001ec8:	e000      	b.n	8001ecc <ETH_SetMACConfig+0x108>
 8001eca:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001ecc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001ed4:	2a01      	cmp	r2, #1
 8001ed6:	d101      	bne.n	8001edc <ETH_SetMACConfig+0x118>
 8001ed8:	2204      	movs	r2, #4
 8001eda:	e000      	b.n	8001ede <ETH_SetMACConfig+0x11a>
 8001edc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001ede:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001ee6:	2a01      	cmp	r2, #1
 8001ee8:	d101      	bne.n	8001eee <ETH_SetMACConfig+0x12a>
 8001eea:	2202      	movs	r2, #2
 8001eec:	e000      	b.n	8001ef0 <ETH_SetMACConfig+0x12c>
 8001eee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f08:	2001      	movs	r0, #1
 8001f0a:	f7ff fdd5 	bl	8001ab8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	619a      	str	r2, [r3, #24]
}
 8001f16:	bf00      	nop
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	ff20810f 	.word	0xff20810f

08001f24 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	4b3d      	ldr	r3, [pc, #244]	; (8002034 <ETH_SetDMAConfig+0x110>)
 8001f3e:	4013      	ands	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	7b1b      	ldrb	r3, [r3, #12]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d102      	bne.n	8001f50 <ETH_SetDMAConfig+0x2c>
 8001f4a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f4e:	e000      	b.n	8001f52 <ETH_SetDMAConfig+0x2e>
 8001f50:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	7b5b      	ldrb	r3, [r3, #13]
 8001f56:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f58:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	7f52      	ldrb	r2, [r2, #29]
 8001f5e:	2a00      	cmp	r2, #0
 8001f60:	d102      	bne.n	8001f68 <ETH_SetDMAConfig+0x44>
 8001f62:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001f66:	e000      	b.n	8001f6a <ETH_SetDMAConfig+0x46>
 8001f68:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001f6a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	7b9b      	ldrb	r3, [r3, #14]
 8001f70:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001f72:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001f78:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	7f1b      	ldrb	r3, [r3, #28]
 8001f7e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001f80:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	7f9b      	ldrb	r3, [r3, #30]
 8001f86:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001f88:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001f8e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f96:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fa8:	461a      	mov	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fba:	2001      	movs	r0, #1
 8001fbc:	f7ff fd7c 	bl	8001ab8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fc8:	461a      	mov	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	791b      	ldrb	r3, [r3, #4]
 8001fd2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001fd8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001fde:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001fe4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001fec:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001fee:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001ff6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001ffc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6812      	ldr	r2, [r2, #0]
 8002002:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002006:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800200a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002018:	2001      	movs	r0, #1
 800201a:	f7ff fd4d 	bl	8001ab8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002026:	461a      	mov	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6013      	str	r3, [r2, #0]
}
 800202c:	bf00      	nop
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	f8de3f23 	.word	0xf8de3f23

08002038 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b0a6      	sub	sp, #152	; 0x98
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002040:	2301      	movs	r3, #1
 8002042:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002046:	2301      	movs	r3, #1
 8002048:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800204c:	2300      	movs	r3, #0
 800204e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002050:	2300      	movs	r3, #0
 8002052:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002056:	2301      	movs	r3, #1
 8002058:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800205c:	2300      	movs	r3, #0
 800205e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002062:	2301      	movs	r3, #1
 8002064:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002068:	2300      	movs	r3, #0
 800206a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800206e:	2300      	movs	r3, #0
 8002070:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002074:	2300      	movs	r3, #0
 8002076:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002078:	2300      	movs	r3, #0
 800207a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800207e:	2300      	movs	r3, #0
 8002080:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002082:	2300      	movs	r3, #0
 8002084:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002088:	2300      	movs	r3, #0
 800208a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800208e:	2300      	movs	r3, #0
 8002090:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002094:	2300      	movs	r3, #0
 8002096:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800209a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800209e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80020a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80020a6:	2300      	movs	r3, #0
 80020a8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80020ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020b0:	4619      	mov	r1, r3
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff fe86 	bl	8001dc4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80020b8:	2301      	movs	r3, #1
 80020ba:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80020bc:	2301      	movs	r3, #1
 80020be:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80020c0:	2301      	movs	r3, #1
 80020c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80020c6:	2301      	movs	r3, #1
 80020c8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80020ce:	2300      	movs	r3, #0
 80020d0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80020d4:	2300      	movs	r3, #0
 80020d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80020da:	2300      	movs	r3, #0
 80020dc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80020de:	2301      	movs	r3, #1
 80020e0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80020e4:	2301      	movs	r3, #1
 80020e6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80020e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020ec:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80020ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020f2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80020f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020f8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80020fa:	2301      	movs	r3, #1
 80020fc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002100:	2300      	movs	r3, #0
 8002102:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002104:	2300      	movs	r3, #0
 8002106:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002108:	f107 0308 	add.w	r3, r7, #8
 800210c:	4619      	mov	r1, r3
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7ff ff08 	bl	8001f24 <ETH_SetDMAConfig>
}
 8002114:	bf00      	nop
 8002116:	3798      	adds	r7, #152	; 0x98
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800211c:	b480      	push	{r7}
 800211e:	b087      	sub	sp, #28
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3305      	adds	r3, #5
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	021b      	lsls	r3, r3, #8
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	3204      	adds	r2, #4
 8002134:	7812      	ldrb	r2, [r2, #0]
 8002136:	4313      	orrs	r3, r2
 8002138:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	4b11      	ldr	r3, [pc, #68]	; (8002184 <ETH_MACAddressConfig+0x68>)
 800213e:	4413      	add	r3, r2
 8002140:	461a      	mov	r2, r3
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	3303      	adds	r3, #3
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	061a      	lsls	r2, r3, #24
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	3302      	adds	r3, #2
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	041b      	lsls	r3, r3, #16
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3301      	adds	r3, #1
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	021b      	lsls	r3, r3, #8
 8002160:	4313      	orrs	r3, r2
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	7812      	ldrb	r2, [r2, #0]
 8002166:	4313      	orrs	r3, r2
 8002168:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	4b06      	ldr	r3, [pc, #24]	; (8002188 <ETH_MACAddressConfig+0x6c>)
 800216e:	4413      	add	r3, r2
 8002170:	461a      	mov	r2, r3
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	6013      	str	r3, [r2, #0]
}
 8002176:	bf00      	nop
 8002178:	371c      	adds	r7, #28
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	40028040 	.word	0x40028040
 8002188:	40028044 	.word	0x40028044

0800218c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002194:	2300      	movs	r3, #0
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	e03e      	b.n	8002218 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68d9      	ldr	r1, [r3, #12]
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	4613      	mov	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	440b      	add	r3, r1
 80021aa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	2200      	movs	r2, #0
 80021b6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	2200      	movs	r2, #0
 80021bc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	2200      	movs	r2, #0
 80021c2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80021c4:	68b9      	ldr	r1, [r7, #8]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	3206      	adds	r2, #6
 80021cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d80c      	bhi.n	80021fc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68d9      	ldr	r1, [r3, #12]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	1c5a      	adds	r2, r3, #1
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	440b      	add	r3, r1
 80021f4:	461a      	mov	r2, r3
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	60da      	str	r2, [r3, #12]
 80021fa:	e004      	b.n	8002206 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	461a      	mov	r2, r3
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	3301      	adds	r3, #1
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2b03      	cmp	r3, #3
 800221c:	d9bd      	bls.n	800219a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002230:	611a      	str	r2, [r3, #16]
}
 8002232:	bf00      	nop
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800223e:	b480      	push	{r7}
 8002240:	b085      	sub	sp, #20
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002246:	2300      	movs	r3, #0
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	e046      	b.n	80022da <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6919      	ldr	r1, [r3, #16]
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	4613      	mov	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	440b      	add	r3, r1
 800225c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2200      	movs	r2, #0
 8002268:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	2200      	movs	r2, #0
 800226e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	2200      	movs	r2, #0
 8002274:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	2200      	movs	r2, #0
 800227a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	2200      	movs	r2, #0
 8002280:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002288:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002290:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800229e:	68b9      	ldr	r1, [r7, #8]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	3212      	adds	r2, #18
 80022a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d80c      	bhi.n	80022ca <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6919      	ldr	r1, [r3, #16]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	1c5a      	adds	r2, r3, #1
 80022b8:	4613      	mov	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4413      	add	r3, r2
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	440b      	add	r3, r1
 80022c2:	461a      	mov	r2, r3
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	60da      	str	r2, [r3, #12]
 80022c8:	e004      	b.n	80022d4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	461a      	mov	r2, r3
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	3301      	adds	r3, #1
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2b03      	cmp	r3, #3
 80022de:	d9b5      	bls.n	800224c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	691a      	ldr	r2, [r3, #16]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800230a:	60da      	str	r2, [r3, #12]
}
 800230c:	bf00      	nop
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002318:	b480      	push	{r7}
 800231a:	b089      	sub	sp, #36	; 0x24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002322:	2300      	movs	r3, #0
 8002324:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800232a:	2300      	movs	r3, #0
 800232c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800232e:	2300      	movs	r3, #0
 8002330:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002332:	2300      	movs	r3, #0
 8002334:	61fb      	str	r3, [r7, #28]
 8002336:	e175      	b.n	8002624 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002338:	2201      	movs	r2, #1
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	4013      	ands	r3, r2
 800234a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	429a      	cmp	r2, r3
 8002352:	f040 8164 	bne.w	800261e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	2b01      	cmp	r3, #1
 8002360:	d005      	beq.n	800236e <HAL_GPIO_Init+0x56>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d130      	bne.n	80023d0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	2203      	movs	r2, #3
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43db      	mvns	r3, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4013      	ands	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	68da      	ldr	r2, [r3, #12]
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4313      	orrs	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023a4:	2201      	movs	r2, #1
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4013      	ands	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	091b      	lsrs	r3, r3, #4
 80023ba:	f003 0201 	and.w	r2, r3, #1
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 0303 	and.w	r3, r3, #3
 80023d8:	2b03      	cmp	r3, #3
 80023da:	d017      	beq.n	800240c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	2203      	movs	r2, #3
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4013      	ands	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4313      	orrs	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f003 0303 	and.w	r3, r3, #3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d123      	bne.n	8002460 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	08da      	lsrs	r2, r3, #3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3208      	adds	r2, #8
 8002420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	220f      	movs	r2, #15
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	691a      	ldr	r2, [r3, #16]
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4313      	orrs	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	08da      	lsrs	r2, r3, #3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	3208      	adds	r2, #8
 800245a:	69b9      	ldr	r1, [r7, #24]
 800245c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	2203      	movs	r2, #3
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4013      	ands	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 0203 	and.w	r2, r3, #3
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 80be 	beq.w	800261e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a2:	4b66      	ldr	r3, [pc, #408]	; (800263c <HAL_GPIO_Init+0x324>)
 80024a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a6:	4a65      	ldr	r2, [pc, #404]	; (800263c <HAL_GPIO_Init+0x324>)
 80024a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024ac:	6453      	str	r3, [r2, #68]	; 0x44
 80024ae:	4b63      	ldr	r3, [pc, #396]	; (800263c <HAL_GPIO_Init+0x324>)
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80024ba:	4a61      	ldr	r2, [pc, #388]	; (8002640 <HAL_GPIO_Init+0x328>)
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	089b      	lsrs	r3, r3, #2
 80024c0:	3302      	adds	r3, #2
 80024c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	f003 0303 	and.w	r3, r3, #3
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	220f      	movs	r2, #15
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	43db      	mvns	r3, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4013      	ands	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a58      	ldr	r2, [pc, #352]	; (8002644 <HAL_GPIO_Init+0x32c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d037      	beq.n	8002556 <HAL_GPIO_Init+0x23e>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a57      	ldr	r2, [pc, #348]	; (8002648 <HAL_GPIO_Init+0x330>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d031      	beq.n	8002552 <HAL_GPIO_Init+0x23a>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a56      	ldr	r2, [pc, #344]	; (800264c <HAL_GPIO_Init+0x334>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d02b      	beq.n	800254e <HAL_GPIO_Init+0x236>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a55      	ldr	r2, [pc, #340]	; (8002650 <HAL_GPIO_Init+0x338>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d025      	beq.n	800254a <HAL_GPIO_Init+0x232>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a54      	ldr	r2, [pc, #336]	; (8002654 <HAL_GPIO_Init+0x33c>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d01f      	beq.n	8002546 <HAL_GPIO_Init+0x22e>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a53      	ldr	r2, [pc, #332]	; (8002658 <HAL_GPIO_Init+0x340>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d019      	beq.n	8002542 <HAL_GPIO_Init+0x22a>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a52      	ldr	r2, [pc, #328]	; (800265c <HAL_GPIO_Init+0x344>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d013      	beq.n	800253e <HAL_GPIO_Init+0x226>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a51      	ldr	r2, [pc, #324]	; (8002660 <HAL_GPIO_Init+0x348>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d00d      	beq.n	800253a <HAL_GPIO_Init+0x222>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a50      	ldr	r2, [pc, #320]	; (8002664 <HAL_GPIO_Init+0x34c>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d007      	beq.n	8002536 <HAL_GPIO_Init+0x21e>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a4f      	ldr	r2, [pc, #316]	; (8002668 <HAL_GPIO_Init+0x350>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d101      	bne.n	8002532 <HAL_GPIO_Init+0x21a>
 800252e:	2309      	movs	r3, #9
 8002530:	e012      	b.n	8002558 <HAL_GPIO_Init+0x240>
 8002532:	230a      	movs	r3, #10
 8002534:	e010      	b.n	8002558 <HAL_GPIO_Init+0x240>
 8002536:	2308      	movs	r3, #8
 8002538:	e00e      	b.n	8002558 <HAL_GPIO_Init+0x240>
 800253a:	2307      	movs	r3, #7
 800253c:	e00c      	b.n	8002558 <HAL_GPIO_Init+0x240>
 800253e:	2306      	movs	r3, #6
 8002540:	e00a      	b.n	8002558 <HAL_GPIO_Init+0x240>
 8002542:	2305      	movs	r3, #5
 8002544:	e008      	b.n	8002558 <HAL_GPIO_Init+0x240>
 8002546:	2304      	movs	r3, #4
 8002548:	e006      	b.n	8002558 <HAL_GPIO_Init+0x240>
 800254a:	2303      	movs	r3, #3
 800254c:	e004      	b.n	8002558 <HAL_GPIO_Init+0x240>
 800254e:	2302      	movs	r3, #2
 8002550:	e002      	b.n	8002558 <HAL_GPIO_Init+0x240>
 8002552:	2301      	movs	r3, #1
 8002554:	e000      	b.n	8002558 <HAL_GPIO_Init+0x240>
 8002556:	2300      	movs	r3, #0
 8002558:	69fa      	ldr	r2, [r7, #28]
 800255a:	f002 0203 	and.w	r2, r2, #3
 800255e:	0092      	lsls	r2, r2, #2
 8002560:	4093      	lsls	r3, r2
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4313      	orrs	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002568:	4935      	ldr	r1, [pc, #212]	; (8002640 <HAL_GPIO_Init+0x328>)
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	089b      	lsrs	r3, r3, #2
 800256e:	3302      	adds	r3, #2
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002576:	4b3d      	ldr	r3, [pc, #244]	; (800266c <HAL_GPIO_Init+0x354>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	43db      	mvns	r3, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4013      	ands	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800259a:	4a34      	ldr	r2, [pc, #208]	; (800266c <HAL_GPIO_Init+0x354>)
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025a0:	4b32      	ldr	r3, [pc, #200]	; (800266c <HAL_GPIO_Init+0x354>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	43db      	mvns	r3, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4013      	ands	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d003      	beq.n	80025c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025c4:	4a29      	ldr	r2, [pc, #164]	; (800266c <HAL_GPIO_Init+0x354>)
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025ca:	4b28      	ldr	r3, [pc, #160]	; (800266c <HAL_GPIO_Init+0x354>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	43db      	mvns	r3, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4013      	ands	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025ee:	4a1f      	ldr	r2, [pc, #124]	; (800266c <HAL_GPIO_Init+0x354>)
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025f4:	4b1d      	ldr	r3, [pc, #116]	; (800266c <HAL_GPIO_Init+0x354>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	43db      	mvns	r3, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4013      	ands	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	4313      	orrs	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002618:	4a14      	ldr	r2, [pc, #80]	; (800266c <HAL_GPIO_Init+0x354>)
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	3301      	adds	r3, #1
 8002622:	61fb      	str	r3, [r7, #28]
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	2b0f      	cmp	r3, #15
 8002628:	f67f ae86 	bls.w	8002338 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800262c:	bf00      	nop
 800262e:	bf00      	nop
 8002630:	3724      	adds	r7, #36	; 0x24
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	40023800 	.word	0x40023800
 8002640:	40013800 	.word	0x40013800
 8002644:	40020000 	.word	0x40020000
 8002648:	40020400 	.word	0x40020400
 800264c:	40020800 	.word	0x40020800
 8002650:	40020c00 	.word	0x40020c00
 8002654:	40021000 	.word	0x40021000
 8002658:	40021400 	.word	0x40021400
 800265c:	40021800 	.word	0x40021800
 8002660:	40021c00 	.word	0x40021c00
 8002664:	40022000 	.word	0x40022000
 8002668:	40022400 	.word	0x40022400
 800266c:	40013c00 	.word	0x40013c00

08002670 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	460b      	mov	r3, r1
 800267a:	807b      	strh	r3, [r7, #2]
 800267c:	4613      	mov	r3, r2
 800267e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002680:	787b      	ldrb	r3, [r7, #1]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002686:	887a      	ldrh	r2, [r7, #2]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800268c:	e003      	b.n	8002696 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800268e:	887b      	ldrh	r3, [r7, #2]
 8002690:	041a      	lsls	r2, r3, #16
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	619a      	str	r2, [r3, #24]
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026a4:	b08f      	sub	sp, #60	; 0x3c
 80026a6:	af0a      	add	r7, sp, #40	; 0x28
 80026a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e116      	b.n	80028e2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d106      	bne.n	80026d4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7ff f8b6 	bl	8001840 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2203      	movs	r2, #3
 80026d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d102      	bne.n	80026ee <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f001 ff3a 	bl	800456c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	603b      	str	r3, [r7, #0]
 80026fe:	687e      	ldr	r6, [r7, #4]
 8002700:	466d      	mov	r5, sp
 8002702:	f106 0410 	add.w	r4, r6, #16
 8002706:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002708:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800270a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800270c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800270e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002712:	e885 0003 	stmia.w	r5, {r0, r1}
 8002716:	1d33      	adds	r3, r6, #4
 8002718:	cb0e      	ldmia	r3, {r1, r2, r3}
 800271a:	6838      	ldr	r0, [r7, #0]
 800271c:	f001 fece 	bl	80044bc <USB_CoreInit>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d005      	beq.n	8002732 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2202      	movs	r2, #2
 800272a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e0d7      	b.n	80028e2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2100      	movs	r1, #0
 8002738:	4618      	mov	r0, r3
 800273a:	f001 ff28 	bl	800458e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800273e:	2300      	movs	r3, #0
 8002740:	73fb      	strb	r3, [r7, #15]
 8002742:	e04a      	b.n	80027da <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002744:	7bfa      	ldrb	r2, [r7, #15]
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	4413      	add	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	333d      	adds	r3, #61	; 0x3d
 8002754:	2201      	movs	r2, #1
 8002756:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002758:	7bfa      	ldrb	r2, [r7, #15]
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	4413      	add	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	333c      	adds	r3, #60	; 0x3c
 8002768:	7bfa      	ldrb	r2, [r7, #15]
 800276a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800276c:	7bfa      	ldrb	r2, [r7, #15]
 800276e:	7bfb      	ldrb	r3, [r7, #15]
 8002770:	b298      	uxth	r0, r3
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	4613      	mov	r3, r2
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	4413      	add	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	3344      	adds	r3, #68	; 0x44
 8002780:	4602      	mov	r2, r0
 8002782:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002784:	7bfa      	ldrb	r2, [r7, #15]
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	4413      	add	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	3340      	adds	r3, #64	; 0x40
 8002794:	2200      	movs	r2, #0
 8002796:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002798:	7bfa      	ldrb	r2, [r7, #15]
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	4613      	mov	r3, r2
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	4413      	add	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	440b      	add	r3, r1
 80027a6:	3348      	adds	r3, #72	; 0x48
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027ac:	7bfa      	ldrb	r2, [r7, #15]
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	4613      	mov	r3, r2
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	4413      	add	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	334c      	adds	r3, #76	; 0x4c
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80027c0:	7bfa      	ldrb	r2, [r7, #15]
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	4613      	mov	r3, r2
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	4413      	add	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	440b      	add	r3, r1
 80027ce:	3354      	adds	r3, #84	; 0x54
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027d4:	7bfb      	ldrb	r3, [r7, #15]
 80027d6:	3301      	adds	r3, #1
 80027d8:	73fb      	strb	r3, [r7, #15]
 80027da:	7bfa      	ldrb	r2, [r7, #15]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d3af      	bcc.n	8002744 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027e4:	2300      	movs	r3, #0
 80027e6:	73fb      	strb	r3, [r7, #15]
 80027e8:	e044      	b.n	8002874 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027ea:	7bfa      	ldrb	r2, [r7, #15]
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	4413      	add	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	440b      	add	r3, r1
 80027f8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80027fc:	2200      	movs	r2, #0
 80027fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002800:	7bfa      	ldrb	r2, [r7, #15]
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	4613      	mov	r3, r2
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	4413      	add	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002812:	7bfa      	ldrb	r2, [r7, #15]
 8002814:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002816:	7bfa      	ldrb	r2, [r7, #15]
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	4613      	mov	r3, r2
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	4413      	add	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	440b      	add	r3, r1
 8002824:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002828:	2200      	movs	r2, #0
 800282a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800282c:	7bfa      	ldrb	r2, [r7, #15]
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	4613      	mov	r3, r2
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	4413      	add	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002842:	7bfa      	ldrb	r2, [r7, #15]
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	4613      	mov	r3, r2
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	4413      	add	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	440b      	add	r3, r1
 8002850:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002858:	7bfa      	ldrb	r2, [r7, #15]
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	4413      	add	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800286e:	7bfb      	ldrb	r3, [r7, #15]
 8002870:	3301      	adds	r3, #1
 8002872:	73fb      	strb	r3, [r7, #15]
 8002874:	7bfa      	ldrb	r2, [r7, #15]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	429a      	cmp	r2, r3
 800287c:	d3b5      	bcc.n	80027ea <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	603b      	str	r3, [r7, #0]
 8002884:	687e      	ldr	r6, [r7, #4]
 8002886:	466d      	mov	r5, sp
 8002888:	f106 0410 	add.w	r4, r6, #16
 800288c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800288e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002890:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002892:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002894:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002898:	e885 0003 	stmia.w	r5, {r0, r1}
 800289c:	1d33      	adds	r3, r6, #4
 800289e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028a0:	6838      	ldr	r0, [r7, #0]
 80028a2:	f001 fec1 	bl	8004628 <USB_DevInit>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d005      	beq.n	80028b8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2202      	movs	r2, #2
 80028b0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e014      	b.n	80028e2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d102      	bne.n	80028d6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 f80b 	bl	80028ec <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f002 f87f 	bl	80049de <USB_DevDisconnect>

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080028ec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800291a:	4b05      	ldr	r3, [pc, #20]	; (8002930 <HAL_PCDEx_ActivateLPM+0x44>)
 800291c:	4313      	orrs	r3, r2
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	10000003 	.word	0x10000003

08002934 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002938:	4b05      	ldr	r3, [pc, #20]	; (8002950 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a04      	ldr	r2, [pc, #16]	; (8002950 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800293e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002942:	6013      	str	r3, [r2, #0]
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40007000 	.word	0x40007000

08002954 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800295a:	2300      	movs	r3, #0
 800295c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800295e:	4b23      	ldr	r3, [pc, #140]	; (80029ec <HAL_PWREx_EnableOverDrive+0x98>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	4a22      	ldr	r2, [pc, #136]	; (80029ec <HAL_PWREx_EnableOverDrive+0x98>)
 8002964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002968:	6413      	str	r3, [r2, #64]	; 0x40
 800296a:	4b20      	ldr	r3, [pc, #128]	; (80029ec <HAL_PWREx_EnableOverDrive+0x98>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002972:	603b      	str	r3, [r7, #0]
 8002974:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002976:	4b1e      	ldr	r3, [pc, #120]	; (80029f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a1d      	ldr	r2, [pc, #116]	; (80029f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800297c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002980:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002982:	f7ff f88d 	bl	8001aa0 <HAL_GetTick>
 8002986:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002988:	e009      	b.n	800299e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800298a:	f7ff f889 	bl	8001aa0 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002998:	d901      	bls.n	800299e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e022      	b.n	80029e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800299e:	4b14      	ldr	r3, [pc, #80]	; (80029f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029aa:	d1ee      	bne.n	800298a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80029ac:	4b10      	ldr	r3, [pc, #64]	; (80029f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a0f      	ldr	r2, [pc, #60]	; (80029f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029b8:	f7ff f872 	bl	8001aa0 <HAL_GetTick>
 80029bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029be:	e009      	b.n	80029d4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80029c0:	f7ff f86e 	bl	8001aa0 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029ce:	d901      	bls.n	80029d4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e007      	b.n	80029e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029d4:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029e0:	d1ee      	bne.n	80029c0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40023800 	.word	0x40023800
 80029f0:	40007000 	.word	0x40007000

080029f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80029fc:	2300      	movs	r3, #0
 80029fe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e29b      	b.n	8002f42 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 8087 	beq.w	8002b26 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a18:	4b96      	ldr	r3, [pc, #600]	; (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 030c 	and.w	r3, r3, #12
 8002a20:	2b04      	cmp	r3, #4
 8002a22:	d00c      	beq.n	8002a3e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a24:	4b93      	ldr	r3, [pc, #588]	; (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f003 030c 	and.w	r3, r3, #12
 8002a2c:	2b08      	cmp	r3, #8
 8002a2e:	d112      	bne.n	8002a56 <HAL_RCC_OscConfig+0x62>
 8002a30:	4b90      	ldr	r3, [pc, #576]	; (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a3c:	d10b      	bne.n	8002a56 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a3e:	4b8d      	ldr	r3, [pc, #564]	; (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d06c      	beq.n	8002b24 <HAL_RCC_OscConfig+0x130>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d168      	bne.n	8002b24 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e275      	b.n	8002f42 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a5e:	d106      	bne.n	8002a6e <HAL_RCC_OscConfig+0x7a>
 8002a60:	4b84      	ldr	r3, [pc, #528]	; (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a83      	ldr	r2, [pc, #524]	; (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a6a:	6013      	str	r3, [r2, #0]
 8002a6c:	e02e      	b.n	8002acc <HAL_RCC_OscConfig+0xd8>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10c      	bne.n	8002a90 <HAL_RCC_OscConfig+0x9c>
 8002a76:	4b7f      	ldr	r3, [pc, #508]	; (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a7e      	ldr	r2, [pc, #504]	; (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002a7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	4b7c      	ldr	r3, [pc, #496]	; (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a7b      	ldr	r2, [pc, #492]	; (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002a88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	e01d      	b.n	8002acc <HAL_RCC_OscConfig+0xd8>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a98:	d10c      	bne.n	8002ab4 <HAL_RCC_OscConfig+0xc0>
 8002a9a:	4b76      	ldr	r3, [pc, #472]	; (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a75      	ldr	r2, [pc, #468]	; (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002aa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	4b73      	ldr	r3, [pc, #460]	; (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a72      	ldr	r2, [pc, #456]	; (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	e00b      	b.n	8002acc <HAL_RCC_OscConfig+0xd8>
 8002ab4:	4b6f      	ldr	r3, [pc, #444]	; (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a6e      	ldr	r2, [pc, #440]	; (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002abe:	6013      	str	r3, [r2, #0]
 8002ac0:	4b6c      	ldr	r3, [pc, #432]	; (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a6b      	ldr	r2, [pc, #428]	; (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002ac6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d013      	beq.n	8002afc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad4:	f7fe ffe4 	bl	8001aa0 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002adc:	f7fe ffe0 	bl	8001aa0 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b64      	cmp	r3, #100	; 0x64
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e229      	b.n	8002f42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aee:	4b61      	ldr	r3, [pc, #388]	; (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0f0      	beq.n	8002adc <HAL_RCC_OscConfig+0xe8>
 8002afa:	e014      	b.n	8002b26 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afc:	f7fe ffd0 	bl	8001aa0 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b04:	f7fe ffcc 	bl	8001aa0 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b64      	cmp	r3, #100	; 0x64
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e215      	b.n	8002f42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b16:	4b57      	ldr	r3, [pc, #348]	; (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1f0      	bne.n	8002b04 <HAL_RCC_OscConfig+0x110>
 8002b22:	e000      	b.n	8002b26 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d069      	beq.n	8002c06 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b32:	4b50      	ldr	r3, [pc, #320]	; (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 030c 	and.w	r3, r3, #12
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00b      	beq.n	8002b56 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b3e:	4b4d      	ldr	r3, [pc, #308]	; (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 030c 	and.w	r3, r3, #12
 8002b46:	2b08      	cmp	r3, #8
 8002b48:	d11c      	bne.n	8002b84 <HAL_RCC_OscConfig+0x190>
 8002b4a:	4b4a      	ldr	r3, [pc, #296]	; (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d116      	bne.n	8002b84 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b56:	4b47      	ldr	r3, [pc, #284]	; (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d005      	beq.n	8002b6e <HAL_RCC_OscConfig+0x17a>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d001      	beq.n	8002b6e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e1e9      	b.n	8002f42 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b6e:	4b41      	ldr	r3, [pc, #260]	; (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	493d      	ldr	r1, [pc, #244]	; (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b82:	e040      	b.n	8002c06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d023      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b8c:	4b39      	ldr	r3, [pc, #228]	; (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a38      	ldr	r2, [pc, #224]	; (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002b92:	f043 0301 	orr.w	r3, r3, #1
 8002b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b98:	f7fe ff82 	bl	8001aa0 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ba0:	f7fe ff7e 	bl	8001aa0 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e1c7      	b.n	8002f42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb2:	4b30      	ldr	r3, [pc, #192]	; (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d0f0      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bbe:	4b2d      	ldr	r3, [pc, #180]	; (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	4929      	ldr	r1, [pc, #164]	; (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	600b      	str	r3, [r1, #0]
 8002bd2:	e018      	b.n	8002c06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bd4:	4b27      	ldr	r3, [pc, #156]	; (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a26      	ldr	r2, [pc, #152]	; (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002bda:	f023 0301 	bic.w	r3, r3, #1
 8002bde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be0:	f7fe ff5e 	bl	8001aa0 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002be8:	f7fe ff5a 	bl	8001aa0 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e1a3      	b.n	8002f42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bfa:	4b1e      	ldr	r3, [pc, #120]	; (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f0      	bne.n	8002be8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d038      	beq.n	8002c84 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d019      	beq.n	8002c4e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c1a:	4b16      	ldr	r3, [pc, #88]	; (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c1e:	4a15      	ldr	r2, [pc, #84]	; (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002c20:	f043 0301 	orr.w	r3, r3, #1
 8002c24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c26:	f7fe ff3b 	bl	8001aa0 <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c2e:	f7fe ff37 	bl	8001aa0 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e180      	b.n	8002f42 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c40:	4b0c      	ldr	r3, [pc, #48]	; (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002c42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0f0      	beq.n	8002c2e <HAL_RCC_OscConfig+0x23a>
 8002c4c:	e01a      	b.n	8002c84 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c4e:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c52:	4a08      	ldr	r2, [pc, #32]	; (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002c54:	f023 0301 	bic.w	r3, r3, #1
 8002c58:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c5a:	f7fe ff21 	bl	8001aa0 <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c60:	e00a      	b.n	8002c78 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c62:	f7fe ff1d 	bl	8001aa0 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d903      	bls.n	8002c78 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e166      	b.n	8002f42 <HAL_RCC_OscConfig+0x54e>
 8002c74:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c78:	4b92      	ldr	r3, [pc, #584]	; (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002c7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1ee      	bne.n	8002c62 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 80a4 	beq.w	8002dda <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c92:	4b8c      	ldr	r3, [pc, #560]	; (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10d      	bne.n	8002cba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c9e:	4b89      	ldr	r3, [pc, #548]	; (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	4a88      	ldr	r2, [pc, #544]	; (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8002caa:	4b86      	ldr	r3, [pc, #536]	; (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb2:	60bb      	str	r3, [r7, #8]
 8002cb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cba:	4b83      	ldr	r3, [pc, #524]	; (8002ec8 <HAL_RCC_OscConfig+0x4d4>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d118      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002cc6:	4b80      	ldr	r3, [pc, #512]	; (8002ec8 <HAL_RCC_OscConfig+0x4d4>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a7f      	ldr	r2, [pc, #508]	; (8002ec8 <HAL_RCC_OscConfig+0x4d4>)
 8002ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cd2:	f7fe fee5 	bl	8001aa0 <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cd8:	e008      	b.n	8002cec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cda:	f7fe fee1 	bl	8001aa0 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b64      	cmp	r3, #100	; 0x64
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e12a      	b.n	8002f42 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cec:	4b76      	ldr	r3, [pc, #472]	; (8002ec8 <HAL_RCC_OscConfig+0x4d4>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0f0      	beq.n	8002cda <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d106      	bne.n	8002d0e <HAL_RCC_OscConfig+0x31a>
 8002d00:	4b70      	ldr	r3, [pc, #448]	; (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d04:	4a6f      	ldr	r2, [pc, #444]	; (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002d06:	f043 0301 	orr.w	r3, r3, #1
 8002d0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d0c:	e02d      	b.n	8002d6a <HAL_RCC_OscConfig+0x376>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10c      	bne.n	8002d30 <HAL_RCC_OscConfig+0x33c>
 8002d16:	4b6b      	ldr	r3, [pc, #428]	; (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1a:	4a6a      	ldr	r2, [pc, #424]	; (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002d1c:	f023 0301 	bic.w	r3, r3, #1
 8002d20:	6713      	str	r3, [r2, #112]	; 0x70
 8002d22:	4b68      	ldr	r3, [pc, #416]	; (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d26:	4a67      	ldr	r2, [pc, #412]	; (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002d28:	f023 0304 	bic.w	r3, r3, #4
 8002d2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d2e:	e01c      	b.n	8002d6a <HAL_RCC_OscConfig+0x376>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	2b05      	cmp	r3, #5
 8002d36:	d10c      	bne.n	8002d52 <HAL_RCC_OscConfig+0x35e>
 8002d38:	4b62      	ldr	r3, [pc, #392]	; (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3c:	4a61      	ldr	r2, [pc, #388]	; (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002d3e:	f043 0304 	orr.w	r3, r3, #4
 8002d42:	6713      	str	r3, [r2, #112]	; 0x70
 8002d44:	4b5f      	ldr	r3, [pc, #380]	; (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d48:	4a5e      	ldr	r2, [pc, #376]	; (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002d4a:	f043 0301 	orr.w	r3, r3, #1
 8002d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d50:	e00b      	b.n	8002d6a <HAL_RCC_OscConfig+0x376>
 8002d52:	4b5c      	ldr	r3, [pc, #368]	; (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d56:	4a5b      	ldr	r2, [pc, #364]	; (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002d58:	f023 0301 	bic.w	r3, r3, #1
 8002d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d5e:	4b59      	ldr	r3, [pc, #356]	; (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d62:	4a58      	ldr	r2, [pc, #352]	; (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002d64:	f023 0304 	bic.w	r3, r3, #4
 8002d68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d015      	beq.n	8002d9e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d72:	f7fe fe95 	bl	8001aa0 <HAL_GetTick>
 8002d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d78:	e00a      	b.n	8002d90 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d7a:	f7fe fe91 	bl	8001aa0 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e0d8      	b.n	8002f42 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d90:	4b4c      	ldr	r3, [pc, #304]	; (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d0ee      	beq.n	8002d7a <HAL_RCC_OscConfig+0x386>
 8002d9c:	e014      	b.n	8002dc8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9e:	f7fe fe7f 	bl	8001aa0 <HAL_GetTick>
 8002da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002da4:	e00a      	b.n	8002dbc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da6:	f7fe fe7b 	bl	8001aa0 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e0c2      	b.n	8002f42 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dbc:	4b41      	ldr	r3, [pc, #260]	; (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1ee      	bne.n	8002da6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dc8:	7dfb      	ldrb	r3, [r7, #23]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d105      	bne.n	8002dda <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dce:	4b3d      	ldr	r3, [pc, #244]	; (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	4a3c      	ldr	r2, [pc, #240]	; (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002dd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dd8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 80ae 	beq.w	8002f40 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002de4:	4b37      	ldr	r3, [pc, #220]	; (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f003 030c 	and.w	r3, r3, #12
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	d06d      	beq.n	8002ecc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d14b      	bne.n	8002e90 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df8:	4b32      	ldr	r3, [pc, #200]	; (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a31      	ldr	r2, [pc, #196]	; (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002dfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e04:	f7fe fe4c 	bl	8001aa0 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e0c:	f7fe fe48 	bl	8001aa0 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e091      	b.n	8002f42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e1e:	4b29      	ldr	r3, [pc, #164]	; (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1f0      	bne.n	8002e0c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69da      	ldr	r2, [r3, #28]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	431a      	orrs	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	019b      	lsls	r3, r3, #6
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e40:	085b      	lsrs	r3, r3, #1
 8002e42:	3b01      	subs	r3, #1
 8002e44:	041b      	lsls	r3, r3, #16
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4c:	061b      	lsls	r3, r3, #24
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e54:	071b      	lsls	r3, r3, #28
 8002e56:	491b      	ldr	r1, [pc, #108]	; (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e5c:	4b19      	ldr	r3, [pc, #100]	; (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a18      	ldr	r2, [pc, #96]	; (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002e62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e68:	f7fe fe1a 	bl	8001aa0 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e70:	f7fe fe16 	bl	8001aa0 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e05f      	b.n	8002f42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e82:	4b10      	ldr	r3, [pc, #64]	; (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0f0      	beq.n	8002e70 <HAL_RCC_OscConfig+0x47c>
 8002e8e:	e057      	b.n	8002f40 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e90:	4b0c      	ldr	r3, [pc, #48]	; (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a0b      	ldr	r2, [pc, #44]	; (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002e96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9c:	f7fe fe00 	bl	8001aa0 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea4:	f7fe fdfc 	bl	8001aa0 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e045      	b.n	8002f42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb6:	4b03      	ldr	r3, [pc, #12]	; (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1f0      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x4b0>
 8002ec2:	e03d      	b.n	8002f40 <HAL_RCC_OscConfig+0x54c>
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002ecc:	4b1f      	ldr	r3, [pc, #124]	; (8002f4c <HAL_RCC_OscConfig+0x558>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d030      	beq.n	8002f3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d129      	bne.n	8002f3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d122      	bne.n	8002f3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002efc:	4013      	ands	r3, r2
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f02:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d119      	bne.n	8002f3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f12:	085b      	lsrs	r3, r3, #1
 8002f14:	3b01      	subs	r3, #1
 8002f16:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d10f      	bne.n	8002f3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f26:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d107      	bne.n	8002f3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f36:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d001      	beq.n	8002f40 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e000      	b.n	8002f42 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3718      	adds	r7, #24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40023800 	.word	0x40023800

08002f50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e0d0      	b.n	800310a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f68:	4b6a      	ldr	r3, [pc, #424]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 030f 	and.w	r3, r3, #15
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d910      	bls.n	8002f98 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f76:	4b67      	ldr	r3, [pc, #412]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 020f 	bic.w	r2, r3, #15
 8002f7e:	4965      	ldr	r1, [pc, #404]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f86:	4b63      	ldr	r3, [pc, #396]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d001      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e0b8      	b.n	800310a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d020      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d005      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fb0:	4b59      	ldr	r3, [pc, #356]	; (8003118 <HAL_RCC_ClockConfig+0x1c8>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	4a58      	ldr	r2, [pc, #352]	; (8003118 <HAL_RCC_ClockConfig+0x1c8>)
 8002fb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0308 	and.w	r3, r3, #8
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d005      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fc8:	4b53      	ldr	r3, [pc, #332]	; (8003118 <HAL_RCC_ClockConfig+0x1c8>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	4a52      	ldr	r2, [pc, #328]	; (8003118 <HAL_RCC_ClockConfig+0x1c8>)
 8002fce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fd2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fd4:	4b50      	ldr	r3, [pc, #320]	; (8003118 <HAL_RCC_ClockConfig+0x1c8>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	494d      	ldr	r1, [pc, #308]	; (8003118 <HAL_RCC_ClockConfig+0x1c8>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d040      	beq.n	8003074 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d107      	bne.n	800300a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ffa:	4b47      	ldr	r3, [pc, #284]	; (8003118 <HAL_RCC_ClockConfig+0x1c8>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d115      	bne.n	8003032 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e07f      	b.n	800310a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b02      	cmp	r3, #2
 8003010:	d107      	bne.n	8003022 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003012:	4b41      	ldr	r3, [pc, #260]	; (8003118 <HAL_RCC_ClockConfig+0x1c8>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d109      	bne.n	8003032 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e073      	b.n	800310a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003022:	4b3d      	ldr	r3, [pc, #244]	; (8003118 <HAL_RCC_ClockConfig+0x1c8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e06b      	b.n	800310a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003032:	4b39      	ldr	r3, [pc, #228]	; (8003118 <HAL_RCC_ClockConfig+0x1c8>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f023 0203 	bic.w	r2, r3, #3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	4936      	ldr	r1, [pc, #216]	; (8003118 <HAL_RCC_ClockConfig+0x1c8>)
 8003040:	4313      	orrs	r3, r2
 8003042:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003044:	f7fe fd2c 	bl	8001aa0 <HAL_GetTick>
 8003048:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304a:	e00a      	b.n	8003062 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800304c:	f7fe fd28 	bl	8001aa0 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	f241 3288 	movw	r2, #5000	; 0x1388
 800305a:	4293      	cmp	r3, r2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e053      	b.n	800310a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003062:	4b2d      	ldr	r3, [pc, #180]	; (8003118 <HAL_RCC_ClockConfig+0x1c8>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 020c 	and.w	r2, r3, #12
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	429a      	cmp	r2, r3
 8003072:	d1eb      	bne.n	800304c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003074:	4b27      	ldr	r3, [pc, #156]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 030f 	and.w	r3, r3, #15
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	429a      	cmp	r2, r3
 8003080:	d210      	bcs.n	80030a4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003082:	4b24      	ldr	r3, [pc, #144]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f023 020f 	bic.w	r2, r3, #15
 800308a:	4922      	ldr	r1, [pc, #136]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	4313      	orrs	r3, r2
 8003090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003092:	4b20      	ldr	r3, [pc, #128]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	429a      	cmp	r2, r3
 800309e:	d001      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e032      	b.n	800310a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d008      	beq.n	80030c2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030b0:	4b19      	ldr	r3, [pc, #100]	; (8003118 <HAL_RCC_ClockConfig+0x1c8>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	4916      	ldr	r1, [pc, #88]	; (8003118 <HAL_RCC_ClockConfig+0x1c8>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0308 	and.w	r3, r3, #8
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d009      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030ce:	4b12      	ldr	r3, [pc, #72]	; (8003118 <HAL_RCC_ClockConfig+0x1c8>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	490e      	ldr	r1, [pc, #56]	; (8003118 <HAL_RCC_ClockConfig+0x1c8>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030e2:	f000 f821 	bl	8003128 <HAL_RCC_GetSysClockFreq>
 80030e6:	4602      	mov	r2, r0
 80030e8:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <HAL_RCC_ClockConfig+0x1c8>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	091b      	lsrs	r3, r3, #4
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	490a      	ldr	r1, [pc, #40]	; (800311c <HAL_RCC_ClockConfig+0x1cc>)
 80030f4:	5ccb      	ldrb	r3, [r1, r3]
 80030f6:	fa22 f303 	lsr.w	r3, r2, r3
 80030fa:	4a09      	ldr	r2, [pc, #36]	; (8003120 <HAL_RCC_ClockConfig+0x1d0>)
 80030fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030fe:	4b09      	ldr	r3, [pc, #36]	; (8003124 <HAL_RCC_ClockConfig+0x1d4>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f7fe fc88 	bl	8001a18 <HAL_InitTick>

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	40023c00 	.word	0x40023c00
 8003118:	40023800 	.word	0x40023800
 800311c:	08004b14 	.word	0x08004b14
 8003120:	20000004 	.word	0x20000004
 8003124:	20000008 	.word	0x20000008

08003128 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800312c:	b094      	sub	sp, #80	; 0x50
 800312e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003130:	2300      	movs	r3, #0
 8003132:	647b      	str	r3, [r7, #68]	; 0x44
 8003134:	2300      	movs	r3, #0
 8003136:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003138:	2300      	movs	r3, #0
 800313a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800313c:	2300      	movs	r3, #0
 800313e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003140:	4b79      	ldr	r3, [pc, #484]	; (8003328 <HAL_RCC_GetSysClockFreq+0x200>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f003 030c 	and.w	r3, r3, #12
 8003148:	2b08      	cmp	r3, #8
 800314a:	d00d      	beq.n	8003168 <HAL_RCC_GetSysClockFreq+0x40>
 800314c:	2b08      	cmp	r3, #8
 800314e:	f200 80e1 	bhi.w	8003314 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003152:	2b00      	cmp	r3, #0
 8003154:	d002      	beq.n	800315c <HAL_RCC_GetSysClockFreq+0x34>
 8003156:	2b04      	cmp	r3, #4
 8003158:	d003      	beq.n	8003162 <HAL_RCC_GetSysClockFreq+0x3a>
 800315a:	e0db      	b.n	8003314 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800315c:	4b73      	ldr	r3, [pc, #460]	; (800332c <HAL_RCC_GetSysClockFreq+0x204>)
 800315e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003160:	e0db      	b.n	800331a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003162:	4b73      	ldr	r3, [pc, #460]	; (8003330 <HAL_RCC_GetSysClockFreq+0x208>)
 8003164:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003166:	e0d8      	b.n	800331a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003168:	4b6f      	ldr	r3, [pc, #444]	; (8003328 <HAL_RCC_GetSysClockFreq+0x200>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003170:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003172:	4b6d      	ldr	r3, [pc, #436]	; (8003328 <HAL_RCC_GetSysClockFreq+0x200>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d063      	beq.n	8003246 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800317e:	4b6a      	ldr	r3, [pc, #424]	; (8003328 <HAL_RCC_GetSysClockFreq+0x200>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	099b      	lsrs	r3, r3, #6
 8003184:	2200      	movs	r2, #0
 8003186:	63bb      	str	r3, [r7, #56]	; 0x38
 8003188:	63fa      	str	r2, [r7, #60]	; 0x3c
 800318a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800318c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003190:	633b      	str	r3, [r7, #48]	; 0x30
 8003192:	2300      	movs	r3, #0
 8003194:	637b      	str	r3, [r7, #52]	; 0x34
 8003196:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800319a:	4622      	mov	r2, r4
 800319c:	462b      	mov	r3, r5
 800319e:	f04f 0000 	mov.w	r0, #0
 80031a2:	f04f 0100 	mov.w	r1, #0
 80031a6:	0159      	lsls	r1, r3, #5
 80031a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031ac:	0150      	lsls	r0, r2, #5
 80031ae:	4602      	mov	r2, r0
 80031b0:	460b      	mov	r3, r1
 80031b2:	4621      	mov	r1, r4
 80031b4:	1a51      	subs	r1, r2, r1
 80031b6:	6139      	str	r1, [r7, #16]
 80031b8:	4629      	mov	r1, r5
 80031ba:	eb63 0301 	sbc.w	r3, r3, r1
 80031be:	617b      	str	r3, [r7, #20]
 80031c0:	f04f 0200 	mov.w	r2, #0
 80031c4:	f04f 0300 	mov.w	r3, #0
 80031c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031cc:	4659      	mov	r1, fp
 80031ce:	018b      	lsls	r3, r1, #6
 80031d0:	4651      	mov	r1, sl
 80031d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031d6:	4651      	mov	r1, sl
 80031d8:	018a      	lsls	r2, r1, #6
 80031da:	4651      	mov	r1, sl
 80031dc:	ebb2 0801 	subs.w	r8, r2, r1
 80031e0:	4659      	mov	r1, fp
 80031e2:	eb63 0901 	sbc.w	r9, r3, r1
 80031e6:	f04f 0200 	mov.w	r2, #0
 80031ea:	f04f 0300 	mov.w	r3, #0
 80031ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031fa:	4690      	mov	r8, r2
 80031fc:	4699      	mov	r9, r3
 80031fe:	4623      	mov	r3, r4
 8003200:	eb18 0303 	adds.w	r3, r8, r3
 8003204:	60bb      	str	r3, [r7, #8]
 8003206:	462b      	mov	r3, r5
 8003208:	eb49 0303 	adc.w	r3, r9, r3
 800320c:	60fb      	str	r3, [r7, #12]
 800320e:	f04f 0200 	mov.w	r2, #0
 8003212:	f04f 0300 	mov.w	r3, #0
 8003216:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800321a:	4629      	mov	r1, r5
 800321c:	024b      	lsls	r3, r1, #9
 800321e:	4621      	mov	r1, r4
 8003220:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003224:	4621      	mov	r1, r4
 8003226:	024a      	lsls	r2, r1, #9
 8003228:	4610      	mov	r0, r2
 800322a:	4619      	mov	r1, r3
 800322c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800322e:	2200      	movs	r2, #0
 8003230:	62bb      	str	r3, [r7, #40]	; 0x28
 8003232:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003234:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003238:	f7fc fffe 	bl	8000238 <__aeabi_uldivmod>
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4613      	mov	r3, r2
 8003242:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003244:	e058      	b.n	80032f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003246:	4b38      	ldr	r3, [pc, #224]	; (8003328 <HAL_RCC_GetSysClockFreq+0x200>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	099b      	lsrs	r3, r3, #6
 800324c:	2200      	movs	r2, #0
 800324e:	4618      	mov	r0, r3
 8003250:	4611      	mov	r1, r2
 8003252:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003256:	623b      	str	r3, [r7, #32]
 8003258:	2300      	movs	r3, #0
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
 800325c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003260:	4642      	mov	r2, r8
 8003262:	464b      	mov	r3, r9
 8003264:	f04f 0000 	mov.w	r0, #0
 8003268:	f04f 0100 	mov.w	r1, #0
 800326c:	0159      	lsls	r1, r3, #5
 800326e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003272:	0150      	lsls	r0, r2, #5
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	4641      	mov	r1, r8
 800327a:	ebb2 0a01 	subs.w	sl, r2, r1
 800327e:	4649      	mov	r1, r9
 8003280:	eb63 0b01 	sbc.w	fp, r3, r1
 8003284:	f04f 0200 	mov.w	r2, #0
 8003288:	f04f 0300 	mov.w	r3, #0
 800328c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003290:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003294:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003298:	ebb2 040a 	subs.w	r4, r2, sl
 800329c:	eb63 050b 	sbc.w	r5, r3, fp
 80032a0:	f04f 0200 	mov.w	r2, #0
 80032a4:	f04f 0300 	mov.w	r3, #0
 80032a8:	00eb      	lsls	r3, r5, #3
 80032aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032ae:	00e2      	lsls	r2, r4, #3
 80032b0:	4614      	mov	r4, r2
 80032b2:	461d      	mov	r5, r3
 80032b4:	4643      	mov	r3, r8
 80032b6:	18e3      	adds	r3, r4, r3
 80032b8:	603b      	str	r3, [r7, #0]
 80032ba:	464b      	mov	r3, r9
 80032bc:	eb45 0303 	adc.w	r3, r5, r3
 80032c0:	607b      	str	r3, [r7, #4]
 80032c2:	f04f 0200 	mov.w	r2, #0
 80032c6:	f04f 0300 	mov.w	r3, #0
 80032ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032ce:	4629      	mov	r1, r5
 80032d0:	028b      	lsls	r3, r1, #10
 80032d2:	4621      	mov	r1, r4
 80032d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032d8:	4621      	mov	r1, r4
 80032da:	028a      	lsls	r2, r1, #10
 80032dc:	4610      	mov	r0, r2
 80032de:	4619      	mov	r1, r3
 80032e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032e2:	2200      	movs	r2, #0
 80032e4:	61bb      	str	r3, [r7, #24]
 80032e6:	61fa      	str	r2, [r7, #28]
 80032e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032ec:	f7fc ffa4 	bl	8000238 <__aeabi_uldivmod>
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	4613      	mov	r3, r2
 80032f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80032f8:	4b0b      	ldr	r3, [pc, #44]	; (8003328 <HAL_RCC_GetSysClockFreq+0x200>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	0c1b      	lsrs	r3, r3, #16
 80032fe:	f003 0303 	and.w	r3, r3, #3
 8003302:	3301      	adds	r3, #1
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003308:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800330a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800330c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003310:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003312:	e002      	b.n	800331a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003314:	4b05      	ldr	r3, [pc, #20]	; (800332c <HAL_RCC_GetSysClockFreq+0x204>)
 8003316:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003318:	bf00      	nop
    }
  }
  return sysclockfreq;
 800331a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800331c:	4618      	mov	r0, r3
 800331e:	3750      	adds	r7, #80	; 0x50
 8003320:	46bd      	mov	sp, r7
 8003322:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003326:	bf00      	nop
 8003328:	40023800 	.word	0x40023800
 800332c:	00f42400 	.word	0x00f42400
 8003330:	007a1200 	.word	0x007a1200

08003334 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003338:	4b03      	ldr	r3, [pc, #12]	; (8003348 <HAL_RCC_GetHCLKFreq+0x14>)
 800333a:	681b      	ldr	r3, [r3, #0]
}
 800333c:	4618      	mov	r0, r3
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	20000004 	.word	0x20000004

0800334c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003350:	f7ff fff0 	bl	8003334 <HAL_RCC_GetHCLKFreq>
 8003354:	4602      	mov	r2, r0
 8003356:	4b05      	ldr	r3, [pc, #20]	; (800336c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	0a9b      	lsrs	r3, r3, #10
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	4903      	ldr	r1, [pc, #12]	; (8003370 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003362:	5ccb      	ldrb	r3, [r1, r3]
 8003364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003368:	4618      	mov	r0, r3
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40023800 	.word	0x40023800
 8003370:	08004b24 	.word	0x08004b24

08003374 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003378:	f7ff ffdc 	bl	8003334 <HAL_RCC_GetHCLKFreq>
 800337c:	4602      	mov	r2, r0
 800337e:	4b05      	ldr	r3, [pc, #20]	; (8003394 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	0b5b      	lsrs	r3, r3, #13
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	4903      	ldr	r1, [pc, #12]	; (8003398 <HAL_RCC_GetPCLK2Freq+0x24>)
 800338a:	5ccb      	ldrb	r3, [r1, r3]
 800338c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003390:	4618      	mov	r0, r3
 8003392:	bd80      	pop	{r7, pc}
 8003394:	40023800 	.word	0x40023800
 8003398:	08004b24 	.word	0x08004b24

0800339c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b088      	sub	sp, #32
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80033a4:	2300      	movs	r3, #0
 80033a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80033a8:	2300      	movs	r3, #0
 80033aa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80033ac:	2300      	movs	r3, #0
 80033ae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80033b0:	2300      	movs	r3, #0
 80033b2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80033b4:	2300      	movs	r3, #0
 80033b6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d012      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80033c4:	4b69      	ldr	r3, [pc, #420]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	4a68      	ldr	r2, [pc, #416]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80033ce:	6093      	str	r3, [r2, #8]
 80033d0:	4b66      	ldr	r3, [pc, #408]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d8:	4964      	ldr	r1, [pc, #400]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80033e6:	2301      	movs	r3, #1
 80033e8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d017      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033f6:	4b5d      	ldr	r3, [pc, #372]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003404:	4959      	ldr	r1, [pc, #356]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003406:	4313      	orrs	r3, r2
 8003408:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003410:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003414:	d101      	bne.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003416:	2301      	movs	r3, #1
 8003418:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003422:	2301      	movs	r3, #1
 8003424:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d017      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003432:	4b4e      	ldr	r3, [pc, #312]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003434:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003438:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	494a      	ldr	r1, [pc, #296]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003442:	4313      	orrs	r3, r2
 8003444:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003450:	d101      	bne.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003452:	2301      	movs	r3, #1
 8003454:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800345e:	2301      	movs	r3, #1
 8003460:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800346e:	2301      	movs	r3, #1
 8003470:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0320 	and.w	r3, r3, #32
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 808b 	beq.w	8003596 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003480:	4b3a      	ldr	r3, [pc, #232]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003484:	4a39      	ldr	r2, [pc, #228]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003486:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800348a:	6413      	str	r3, [r2, #64]	; 0x40
 800348c:	4b37      	ldr	r3, [pc, #220]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003494:	60bb      	str	r3, [r7, #8]
 8003496:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003498:	4b35      	ldr	r3, [pc, #212]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a34      	ldr	r2, [pc, #208]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800349e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034a4:	f7fe fafc 	bl	8001aa0 <HAL_GetTick>
 80034a8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ac:	f7fe faf8 	bl	8001aa0 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b64      	cmp	r3, #100	; 0x64
 80034b8:	d901      	bls.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e38f      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80034be:	4b2c      	ldr	r3, [pc, #176]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0f0      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034ca:	4b28      	ldr	r3, [pc, #160]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034d2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d035      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d02e      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034e8:	4b20      	ldr	r3, [pc, #128]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034f0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034f2:	4b1e      	ldr	r3, [pc, #120]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f6:	4a1d      	ldr	r2, [pc, #116]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034fc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034fe:	4b1b      	ldr	r3, [pc, #108]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003502:	4a1a      	ldr	r2, [pc, #104]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003508:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800350a:	4a18      	ldr	r2, [pc, #96]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003510:	4b16      	ldr	r3, [pc, #88]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	2b01      	cmp	r3, #1
 800351a:	d114      	bne.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351c:	f7fe fac0 	bl	8001aa0 <HAL_GetTick>
 8003520:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003522:	e00a      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003524:	f7fe fabc 	bl	8001aa0 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003532:	4293      	cmp	r3, r2
 8003534:	d901      	bls.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e351      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800353a:	4b0c      	ldr	r3, [pc, #48]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800353c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d0ee      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800354e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003552:	d111      	bne.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003554:	4b05      	ldr	r3, [pc, #20]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003560:	4b04      	ldr	r3, [pc, #16]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003562:	400b      	ands	r3, r1
 8003564:	4901      	ldr	r1, [pc, #4]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003566:	4313      	orrs	r3, r2
 8003568:	608b      	str	r3, [r1, #8]
 800356a:	e00b      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800356c:	40023800 	.word	0x40023800
 8003570:	40007000 	.word	0x40007000
 8003574:	0ffffcff 	.word	0x0ffffcff
 8003578:	4bac      	ldr	r3, [pc, #688]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	4aab      	ldr	r2, [pc, #684]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800357e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003582:	6093      	str	r3, [r2, #8]
 8003584:	4ba9      	ldr	r3, [pc, #676]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003586:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003590:	49a6      	ldr	r1, [pc, #664]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003592:	4313      	orrs	r3, r2
 8003594:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0310 	and.w	r3, r3, #16
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d010      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80035a2:	4ba2      	ldr	r3, [pc, #648]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035a8:	4aa0      	ldr	r2, [pc, #640]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80035b2:	4b9e      	ldr	r3, [pc, #632]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035b4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035bc:	499b      	ldr	r1, [pc, #620]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00a      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035d0:	4b96      	ldr	r3, [pc, #600]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035de:	4993      	ldr	r1, [pc, #588]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00a      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035f2:	4b8e      	ldr	r3, [pc, #568]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003600:	498a      	ldr	r1, [pc, #552]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003602:	4313      	orrs	r3, r2
 8003604:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00a      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003614:	4b85      	ldr	r3, [pc, #532]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003622:	4982      	ldr	r1, [pc, #520]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003624:	4313      	orrs	r3, r2
 8003626:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00a      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003636:	4b7d      	ldr	r3, [pc, #500]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003644:	4979      	ldr	r1, [pc, #484]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003646:	4313      	orrs	r3, r2
 8003648:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00a      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003658:	4b74      	ldr	r3, [pc, #464]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800365a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800365e:	f023 0203 	bic.w	r2, r3, #3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003666:	4971      	ldr	r1, [pc, #452]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003668:	4313      	orrs	r3, r2
 800366a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00a      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800367a:	4b6c      	ldr	r3, [pc, #432]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800367c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003680:	f023 020c 	bic.w	r2, r3, #12
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003688:	4968      	ldr	r1, [pc, #416]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800368a:	4313      	orrs	r3, r2
 800368c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00a      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800369c:	4b63      	ldr	r3, [pc, #396]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800369e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036aa:	4960      	ldr	r1, [pc, #384]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00a      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036be:	4b5b      	ldr	r3, [pc, #364]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036cc:	4957      	ldr	r1, [pc, #348]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00a      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036e0:	4b52      	ldr	r3, [pc, #328]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ee:	494f      	ldr	r1, [pc, #316]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00a      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003702:	4b4a      	ldr	r3, [pc, #296]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003708:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003710:	4946      	ldr	r1, [pc, #280]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003712:	4313      	orrs	r3, r2
 8003714:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00a      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003724:	4b41      	ldr	r3, [pc, #260]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003732:	493e      	ldr	r1, [pc, #248]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003734:	4313      	orrs	r3, r2
 8003736:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00a      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003746:	4b39      	ldr	r3, [pc, #228]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003754:	4935      	ldr	r1, [pc, #212]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003756:	4313      	orrs	r3, r2
 8003758:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00a      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003768:	4b30      	ldr	r3, [pc, #192]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800376a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003776:	492d      	ldr	r1, [pc, #180]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003778:	4313      	orrs	r3, r2
 800377a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d011      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800378a:	4b28      	ldr	r3, [pc, #160]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800378c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003790:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003798:	4924      	ldr	r1, [pc, #144]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800379a:	4313      	orrs	r3, r2
 800379c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037a8:	d101      	bne.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80037aa:	2301      	movs	r3, #1
 80037ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80037ba:	2301      	movs	r3, #1
 80037bc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00a      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037ca:	4b18      	ldr	r3, [pc, #96]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037d8:	4914      	ldr	r1, [pc, #80]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00b      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037ec:	4b0f      	ldr	r3, [pc, #60]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037fc:	490b      	ldr	r1, [pc, #44]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00f      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003810:	4b06      	ldr	r3, [pc, #24]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003816:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003820:	4902      	ldr	r1, [pc, #8]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003822:	4313      	orrs	r3, r2
 8003824:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003828:	e002      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800382a:	bf00      	nop
 800382c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00b      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800383c:	4b8a      	ldr	r3, [pc, #552]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800383e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003842:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384c:	4986      	ldr	r1, [pc, #536]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800384e:	4313      	orrs	r3, r2
 8003850:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00b      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003860:	4b81      	ldr	r3, [pc, #516]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003862:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003866:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003870:	497d      	ldr	r1, [pc, #500]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003872:	4313      	orrs	r3, r2
 8003874:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d006      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 80d6 	beq.w	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800388c:	4b76      	ldr	r3, [pc, #472]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a75      	ldr	r2, [pc, #468]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003892:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003896:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003898:	f7fe f902 	bl	8001aa0 <HAL_GetTick>
 800389c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800389e:	e008      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80038a0:	f7fe f8fe 	bl	8001aa0 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b64      	cmp	r3, #100	; 0x64
 80038ac:	d901      	bls.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e195      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038b2:	4b6d      	ldr	r3, [pc, #436]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1f0      	bne.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d021      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d11d      	bne.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80038d2:	4b65      	ldr	r3, [pc, #404]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038d8:	0c1b      	lsrs	r3, r3, #16
 80038da:	f003 0303 	and.w	r3, r3, #3
 80038de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80038e0:	4b61      	ldr	r3, [pc, #388]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038e6:	0e1b      	lsrs	r3, r3, #24
 80038e8:	f003 030f 	and.w	r3, r3, #15
 80038ec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	019a      	lsls	r2, r3, #6
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	041b      	lsls	r3, r3, #16
 80038f8:	431a      	orrs	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	061b      	lsls	r3, r3, #24
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	071b      	lsls	r3, r3, #28
 8003906:	4958      	ldr	r1, [pc, #352]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003908:	4313      	orrs	r3, r2
 800390a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d004      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003922:	d00a      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800392c:	2b00      	cmp	r3, #0
 800392e:	d02e      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003938:	d129      	bne.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800393a:	4b4b      	ldr	r3, [pc, #300]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800393c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003940:	0c1b      	lsrs	r3, r3, #16
 8003942:	f003 0303 	and.w	r3, r3, #3
 8003946:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003948:	4b47      	ldr	r3, [pc, #284]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800394a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800394e:	0f1b      	lsrs	r3, r3, #28
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	019a      	lsls	r2, r3, #6
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	041b      	lsls	r3, r3, #16
 8003960:	431a      	orrs	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	061b      	lsls	r3, r3, #24
 8003968:	431a      	orrs	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	071b      	lsls	r3, r3, #28
 800396e:	493e      	ldr	r1, [pc, #248]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003970:	4313      	orrs	r3, r2
 8003972:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003976:	4b3c      	ldr	r3, [pc, #240]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003978:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800397c:	f023 021f 	bic.w	r2, r3, #31
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	3b01      	subs	r3, #1
 8003986:	4938      	ldr	r1, [pc, #224]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003988:	4313      	orrs	r3, r2
 800398a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d01d      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800399a:	4b33      	ldr	r3, [pc, #204]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800399c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039a0:	0e1b      	lsrs	r3, r3, #24
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80039a8:	4b2f      	ldr	r3, [pc, #188]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039ae:	0f1b      	lsrs	r3, r3, #28
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	019a      	lsls	r2, r3, #6
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	041b      	lsls	r3, r3, #16
 80039c2:	431a      	orrs	r2, r3
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	061b      	lsls	r3, r3, #24
 80039c8:	431a      	orrs	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	071b      	lsls	r3, r3, #28
 80039ce:	4926      	ldr	r1, [pc, #152]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d011      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	019a      	lsls	r2, r3, #6
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	041b      	lsls	r3, r3, #16
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	061b      	lsls	r3, r3, #24
 80039f6:	431a      	orrs	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	071b      	lsls	r3, r3, #28
 80039fe:	491a      	ldr	r1, [pc, #104]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003a06:	4b18      	ldr	r3, [pc, #96]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a17      	ldr	r2, [pc, #92]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a12:	f7fe f845 	bl	8001aa0 <HAL_GetTick>
 8003a16:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a18:	e008      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a1a:	f7fe f841 	bl	8001aa0 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b64      	cmp	r3, #100	; 0x64
 8003a26:	d901      	bls.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e0d8      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a2c:	4b0e      	ldr	r3, [pc, #56]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0f0      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	f040 80ce 	bne.w	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003a40:	4b09      	ldr	r3, [pc, #36]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a08      	ldr	r2, [pc, #32]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a4c:	f7fe f828 	bl	8001aa0 <HAL_GetTick>
 8003a50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a52:	e00b      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a54:	f7fe f824 	bl	8001aa0 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b64      	cmp	r3, #100	; 0x64
 8003a60:	d904      	bls.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e0bb      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003a66:	bf00      	nop
 8003a68:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a6c:	4b5e      	ldr	r3, [pc, #376]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a78:	d0ec      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d009      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d02e      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d12a      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003aa2:	4b51      	ldr	r3, [pc, #324]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa8:	0c1b      	lsrs	r3, r3, #16
 8003aaa:	f003 0303 	and.w	r3, r3, #3
 8003aae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ab0:	4b4d      	ldr	r3, [pc, #308]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab6:	0f1b      	lsrs	r3, r3, #28
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	019a      	lsls	r2, r3, #6
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	041b      	lsls	r3, r3, #16
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	061b      	lsls	r3, r3, #24
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	071b      	lsls	r3, r3, #28
 8003ad6:	4944      	ldr	r1, [pc, #272]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003ade:	4b42      	ldr	r3, [pc, #264]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ae4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aec:	3b01      	subs	r3, #1
 8003aee:	021b      	lsls	r3, r3, #8
 8003af0:	493d      	ldr	r1, [pc, #244]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d022      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b0c:	d11d      	bne.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b0e:	4b36      	ldr	r3, [pc, #216]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b14:	0e1b      	lsrs	r3, r3, #24
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b1c:	4b32      	ldr	r3, [pc, #200]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b22:	0f1b      	lsrs	r3, r3, #28
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	019a      	lsls	r2, r3, #6
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	041b      	lsls	r3, r3, #16
 8003b36:	431a      	orrs	r2, r3
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	061b      	lsls	r3, r3, #24
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	071b      	lsls	r3, r3, #28
 8003b42:	4929      	ldr	r1, [pc, #164]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0308 	and.w	r3, r3, #8
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d028      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b56:	4b24      	ldr	r3, [pc, #144]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5c:	0e1b      	lsrs	r3, r3, #24
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b64:	4b20      	ldr	r3, [pc, #128]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b6a:	0c1b      	lsrs	r3, r3, #16
 8003b6c:	f003 0303 	and.w	r3, r3, #3
 8003b70:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	019a      	lsls	r2, r3, #6
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	041b      	lsls	r3, r3, #16
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	061b      	lsls	r3, r3, #24
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	071b      	lsls	r3, r3, #28
 8003b8a:	4917      	ldr	r1, [pc, #92]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003b92:	4b15      	ldr	r3, [pc, #84]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba0:	4911      	ldr	r1, [pc, #68]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ba8:	4b0f      	ldr	r3, [pc, #60]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a0e      	ldr	r2, [pc, #56]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bb4:	f7fd ff74 	bl	8001aa0 <HAL_GetTick>
 8003bb8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003bba:	e008      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003bbc:	f7fd ff70 	bl	8001aa0 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b64      	cmp	r3, #100	; 0x64
 8003bc8:	d901      	bls.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e007      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003bce:	4b06      	ldr	r3, [pc, #24]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bda:	d1ef      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3720      	adds	r7, #32
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	40023800 	.word	0x40023800

08003bec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e040      	b.n	8003c80 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d106      	bne.n	8003c14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7fd fdb6 	bl	8001780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2224      	movs	r2, #36	; 0x24
 8003c18:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 0201 	bic.w	r2, r2, #1
 8003c28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f82c 	bl	8003c88 <UART_SetConfig>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d101      	bne.n	8003c3a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e022      	b.n	8003c80 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d002      	beq.n	8003c48 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 fa84 	bl	8004150 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689a      	ldr	r2, [r3, #8]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0201 	orr.w	r2, r2, #1
 8003c76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 fb0b 	bl	8004294 <UART_CheckIdleState>
 8003c7e:	4603      	mov	r3, r0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3708      	adds	r7, #8
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b088      	sub	sp, #32
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c90:	2300      	movs	r3, #0
 8003c92:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	69db      	ldr	r3, [r3, #28]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	4ba6      	ldr	r3, [pc, #664]	; (8003f4c <UART_SetConfig+0x2c4>)
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6812      	ldr	r2, [r2, #0]
 8003cba:	6979      	ldr	r1, [r7, #20]
 8003cbc:	430b      	orrs	r3, r1
 8003cbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a94      	ldr	r2, [pc, #592]	; (8003f50 <UART_SetConfig+0x2c8>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d120      	bne.n	8003d46 <UART_SetConfig+0xbe>
 8003d04:	4b93      	ldr	r3, [pc, #588]	; (8003f54 <UART_SetConfig+0x2cc>)
 8003d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0a:	f003 0303 	and.w	r3, r3, #3
 8003d0e:	2b03      	cmp	r3, #3
 8003d10:	d816      	bhi.n	8003d40 <UART_SetConfig+0xb8>
 8003d12:	a201      	add	r2, pc, #4	; (adr r2, 8003d18 <UART_SetConfig+0x90>)
 8003d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d18:	08003d29 	.word	0x08003d29
 8003d1c:	08003d35 	.word	0x08003d35
 8003d20:	08003d2f 	.word	0x08003d2f
 8003d24:	08003d3b 	.word	0x08003d3b
 8003d28:	2301      	movs	r3, #1
 8003d2a:	77fb      	strb	r3, [r7, #31]
 8003d2c:	e150      	b.n	8003fd0 <UART_SetConfig+0x348>
 8003d2e:	2302      	movs	r3, #2
 8003d30:	77fb      	strb	r3, [r7, #31]
 8003d32:	e14d      	b.n	8003fd0 <UART_SetConfig+0x348>
 8003d34:	2304      	movs	r3, #4
 8003d36:	77fb      	strb	r3, [r7, #31]
 8003d38:	e14a      	b.n	8003fd0 <UART_SetConfig+0x348>
 8003d3a:	2308      	movs	r3, #8
 8003d3c:	77fb      	strb	r3, [r7, #31]
 8003d3e:	e147      	b.n	8003fd0 <UART_SetConfig+0x348>
 8003d40:	2310      	movs	r3, #16
 8003d42:	77fb      	strb	r3, [r7, #31]
 8003d44:	e144      	b.n	8003fd0 <UART_SetConfig+0x348>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a83      	ldr	r2, [pc, #524]	; (8003f58 <UART_SetConfig+0x2d0>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d132      	bne.n	8003db6 <UART_SetConfig+0x12e>
 8003d50:	4b80      	ldr	r3, [pc, #512]	; (8003f54 <UART_SetConfig+0x2cc>)
 8003d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d56:	f003 030c 	and.w	r3, r3, #12
 8003d5a:	2b0c      	cmp	r3, #12
 8003d5c:	d828      	bhi.n	8003db0 <UART_SetConfig+0x128>
 8003d5e:	a201      	add	r2, pc, #4	; (adr r2, 8003d64 <UART_SetConfig+0xdc>)
 8003d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d64:	08003d99 	.word	0x08003d99
 8003d68:	08003db1 	.word	0x08003db1
 8003d6c:	08003db1 	.word	0x08003db1
 8003d70:	08003db1 	.word	0x08003db1
 8003d74:	08003da5 	.word	0x08003da5
 8003d78:	08003db1 	.word	0x08003db1
 8003d7c:	08003db1 	.word	0x08003db1
 8003d80:	08003db1 	.word	0x08003db1
 8003d84:	08003d9f 	.word	0x08003d9f
 8003d88:	08003db1 	.word	0x08003db1
 8003d8c:	08003db1 	.word	0x08003db1
 8003d90:	08003db1 	.word	0x08003db1
 8003d94:	08003dab 	.word	0x08003dab
 8003d98:	2300      	movs	r3, #0
 8003d9a:	77fb      	strb	r3, [r7, #31]
 8003d9c:	e118      	b.n	8003fd0 <UART_SetConfig+0x348>
 8003d9e:	2302      	movs	r3, #2
 8003da0:	77fb      	strb	r3, [r7, #31]
 8003da2:	e115      	b.n	8003fd0 <UART_SetConfig+0x348>
 8003da4:	2304      	movs	r3, #4
 8003da6:	77fb      	strb	r3, [r7, #31]
 8003da8:	e112      	b.n	8003fd0 <UART_SetConfig+0x348>
 8003daa:	2308      	movs	r3, #8
 8003dac:	77fb      	strb	r3, [r7, #31]
 8003dae:	e10f      	b.n	8003fd0 <UART_SetConfig+0x348>
 8003db0:	2310      	movs	r3, #16
 8003db2:	77fb      	strb	r3, [r7, #31]
 8003db4:	e10c      	b.n	8003fd0 <UART_SetConfig+0x348>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a68      	ldr	r2, [pc, #416]	; (8003f5c <UART_SetConfig+0x2d4>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d120      	bne.n	8003e02 <UART_SetConfig+0x17a>
 8003dc0:	4b64      	ldr	r3, [pc, #400]	; (8003f54 <UART_SetConfig+0x2cc>)
 8003dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003dca:	2b30      	cmp	r3, #48	; 0x30
 8003dcc:	d013      	beq.n	8003df6 <UART_SetConfig+0x16e>
 8003dce:	2b30      	cmp	r3, #48	; 0x30
 8003dd0:	d814      	bhi.n	8003dfc <UART_SetConfig+0x174>
 8003dd2:	2b20      	cmp	r3, #32
 8003dd4:	d009      	beq.n	8003dea <UART_SetConfig+0x162>
 8003dd6:	2b20      	cmp	r3, #32
 8003dd8:	d810      	bhi.n	8003dfc <UART_SetConfig+0x174>
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d002      	beq.n	8003de4 <UART_SetConfig+0x15c>
 8003dde:	2b10      	cmp	r3, #16
 8003de0:	d006      	beq.n	8003df0 <UART_SetConfig+0x168>
 8003de2:	e00b      	b.n	8003dfc <UART_SetConfig+0x174>
 8003de4:	2300      	movs	r3, #0
 8003de6:	77fb      	strb	r3, [r7, #31]
 8003de8:	e0f2      	b.n	8003fd0 <UART_SetConfig+0x348>
 8003dea:	2302      	movs	r3, #2
 8003dec:	77fb      	strb	r3, [r7, #31]
 8003dee:	e0ef      	b.n	8003fd0 <UART_SetConfig+0x348>
 8003df0:	2304      	movs	r3, #4
 8003df2:	77fb      	strb	r3, [r7, #31]
 8003df4:	e0ec      	b.n	8003fd0 <UART_SetConfig+0x348>
 8003df6:	2308      	movs	r3, #8
 8003df8:	77fb      	strb	r3, [r7, #31]
 8003dfa:	e0e9      	b.n	8003fd0 <UART_SetConfig+0x348>
 8003dfc:	2310      	movs	r3, #16
 8003dfe:	77fb      	strb	r3, [r7, #31]
 8003e00:	e0e6      	b.n	8003fd0 <UART_SetConfig+0x348>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a56      	ldr	r2, [pc, #344]	; (8003f60 <UART_SetConfig+0x2d8>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d120      	bne.n	8003e4e <UART_SetConfig+0x1c6>
 8003e0c:	4b51      	ldr	r3, [pc, #324]	; (8003f54 <UART_SetConfig+0x2cc>)
 8003e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e16:	2bc0      	cmp	r3, #192	; 0xc0
 8003e18:	d013      	beq.n	8003e42 <UART_SetConfig+0x1ba>
 8003e1a:	2bc0      	cmp	r3, #192	; 0xc0
 8003e1c:	d814      	bhi.n	8003e48 <UART_SetConfig+0x1c0>
 8003e1e:	2b80      	cmp	r3, #128	; 0x80
 8003e20:	d009      	beq.n	8003e36 <UART_SetConfig+0x1ae>
 8003e22:	2b80      	cmp	r3, #128	; 0x80
 8003e24:	d810      	bhi.n	8003e48 <UART_SetConfig+0x1c0>
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d002      	beq.n	8003e30 <UART_SetConfig+0x1a8>
 8003e2a:	2b40      	cmp	r3, #64	; 0x40
 8003e2c:	d006      	beq.n	8003e3c <UART_SetConfig+0x1b4>
 8003e2e:	e00b      	b.n	8003e48 <UART_SetConfig+0x1c0>
 8003e30:	2300      	movs	r3, #0
 8003e32:	77fb      	strb	r3, [r7, #31]
 8003e34:	e0cc      	b.n	8003fd0 <UART_SetConfig+0x348>
 8003e36:	2302      	movs	r3, #2
 8003e38:	77fb      	strb	r3, [r7, #31]
 8003e3a:	e0c9      	b.n	8003fd0 <UART_SetConfig+0x348>
 8003e3c:	2304      	movs	r3, #4
 8003e3e:	77fb      	strb	r3, [r7, #31]
 8003e40:	e0c6      	b.n	8003fd0 <UART_SetConfig+0x348>
 8003e42:	2308      	movs	r3, #8
 8003e44:	77fb      	strb	r3, [r7, #31]
 8003e46:	e0c3      	b.n	8003fd0 <UART_SetConfig+0x348>
 8003e48:	2310      	movs	r3, #16
 8003e4a:	77fb      	strb	r3, [r7, #31]
 8003e4c:	e0c0      	b.n	8003fd0 <UART_SetConfig+0x348>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a44      	ldr	r2, [pc, #272]	; (8003f64 <UART_SetConfig+0x2dc>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d125      	bne.n	8003ea4 <UART_SetConfig+0x21c>
 8003e58:	4b3e      	ldr	r3, [pc, #248]	; (8003f54 <UART_SetConfig+0x2cc>)
 8003e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e66:	d017      	beq.n	8003e98 <UART_SetConfig+0x210>
 8003e68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e6c:	d817      	bhi.n	8003e9e <UART_SetConfig+0x216>
 8003e6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e72:	d00b      	beq.n	8003e8c <UART_SetConfig+0x204>
 8003e74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e78:	d811      	bhi.n	8003e9e <UART_SetConfig+0x216>
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <UART_SetConfig+0x1fe>
 8003e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e82:	d006      	beq.n	8003e92 <UART_SetConfig+0x20a>
 8003e84:	e00b      	b.n	8003e9e <UART_SetConfig+0x216>
 8003e86:	2300      	movs	r3, #0
 8003e88:	77fb      	strb	r3, [r7, #31]
 8003e8a:	e0a1      	b.n	8003fd0 <UART_SetConfig+0x348>
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	77fb      	strb	r3, [r7, #31]
 8003e90:	e09e      	b.n	8003fd0 <UART_SetConfig+0x348>
 8003e92:	2304      	movs	r3, #4
 8003e94:	77fb      	strb	r3, [r7, #31]
 8003e96:	e09b      	b.n	8003fd0 <UART_SetConfig+0x348>
 8003e98:	2308      	movs	r3, #8
 8003e9a:	77fb      	strb	r3, [r7, #31]
 8003e9c:	e098      	b.n	8003fd0 <UART_SetConfig+0x348>
 8003e9e:	2310      	movs	r3, #16
 8003ea0:	77fb      	strb	r3, [r7, #31]
 8003ea2:	e095      	b.n	8003fd0 <UART_SetConfig+0x348>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a2f      	ldr	r2, [pc, #188]	; (8003f68 <UART_SetConfig+0x2e0>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d125      	bne.n	8003efa <UART_SetConfig+0x272>
 8003eae:	4b29      	ldr	r3, [pc, #164]	; (8003f54 <UART_SetConfig+0x2cc>)
 8003eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003eb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ebc:	d017      	beq.n	8003eee <UART_SetConfig+0x266>
 8003ebe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ec2:	d817      	bhi.n	8003ef4 <UART_SetConfig+0x26c>
 8003ec4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ec8:	d00b      	beq.n	8003ee2 <UART_SetConfig+0x25a>
 8003eca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ece:	d811      	bhi.n	8003ef4 <UART_SetConfig+0x26c>
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d003      	beq.n	8003edc <UART_SetConfig+0x254>
 8003ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ed8:	d006      	beq.n	8003ee8 <UART_SetConfig+0x260>
 8003eda:	e00b      	b.n	8003ef4 <UART_SetConfig+0x26c>
 8003edc:	2301      	movs	r3, #1
 8003ede:	77fb      	strb	r3, [r7, #31]
 8003ee0:	e076      	b.n	8003fd0 <UART_SetConfig+0x348>
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	77fb      	strb	r3, [r7, #31]
 8003ee6:	e073      	b.n	8003fd0 <UART_SetConfig+0x348>
 8003ee8:	2304      	movs	r3, #4
 8003eea:	77fb      	strb	r3, [r7, #31]
 8003eec:	e070      	b.n	8003fd0 <UART_SetConfig+0x348>
 8003eee:	2308      	movs	r3, #8
 8003ef0:	77fb      	strb	r3, [r7, #31]
 8003ef2:	e06d      	b.n	8003fd0 <UART_SetConfig+0x348>
 8003ef4:	2310      	movs	r3, #16
 8003ef6:	77fb      	strb	r3, [r7, #31]
 8003ef8:	e06a      	b.n	8003fd0 <UART_SetConfig+0x348>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a1b      	ldr	r2, [pc, #108]	; (8003f6c <UART_SetConfig+0x2e4>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d138      	bne.n	8003f76 <UART_SetConfig+0x2ee>
 8003f04:	4b13      	ldr	r3, [pc, #76]	; (8003f54 <UART_SetConfig+0x2cc>)
 8003f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f0a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003f0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f12:	d017      	beq.n	8003f44 <UART_SetConfig+0x2bc>
 8003f14:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f18:	d82a      	bhi.n	8003f70 <UART_SetConfig+0x2e8>
 8003f1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f1e:	d00b      	beq.n	8003f38 <UART_SetConfig+0x2b0>
 8003f20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f24:	d824      	bhi.n	8003f70 <UART_SetConfig+0x2e8>
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <UART_SetConfig+0x2aa>
 8003f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f2e:	d006      	beq.n	8003f3e <UART_SetConfig+0x2b6>
 8003f30:	e01e      	b.n	8003f70 <UART_SetConfig+0x2e8>
 8003f32:	2300      	movs	r3, #0
 8003f34:	77fb      	strb	r3, [r7, #31]
 8003f36:	e04b      	b.n	8003fd0 <UART_SetConfig+0x348>
 8003f38:	2302      	movs	r3, #2
 8003f3a:	77fb      	strb	r3, [r7, #31]
 8003f3c:	e048      	b.n	8003fd0 <UART_SetConfig+0x348>
 8003f3e:	2304      	movs	r3, #4
 8003f40:	77fb      	strb	r3, [r7, #31]
 8003f42:	e045      	b.n	8003fd0 <UART_SetConfig+0x348>
 8003f44:	2308      	movs	r3, #8
 8003f46:	77fb      	strb	r3, [r7, #31]
 8003f48:	e042      	b.n	8003fd0 <UART_SetConfig+0x348>
 8003f4a:	bf00      	nop
 8003f4c:	efff69f3 	.word	0xefff69f3
 8003f50:	40011000 	.word	0x40011000
 8003f54:	40023800 	.word	0x40023800
 8003f58:	40004400 	.word	0x40004400
 8003f5c:	40004800 	.word	0x40004800
 8003f60:	40004c00 	.word	0x40004c00
 8003f64:	40005000 	.word	0x40005000
 8003f68:	40011400 	.word	0x40011400
 8003f6c:	40007800 	.word	0x40007800
 8003f70:	2310      	movs	r3, #16
 8003f72:	77fb      	strb	r3, [r7, #31]
 8003f74:	e02c      	b.n	8003fd0 <UART_SetConfig+0x348>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a72      	ldr	r2, [pc, #456]	; (8004144 <UART_SetConfig+0x4bc>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d125      	bne.n	8003fcc <UART_SetConfig+0x344>
 8003f80:	4b71      	ldr	r3, [pc, #452]	; (8004148 <UART_SetConfig+0x4c0>)
 8003f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f86:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003f8a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f8e:	d017      	beq.n	8003fc0 <UART_SetConfig+0x338>
 8003f90:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f94:	d817      	bhi.n	8003fc6 <UART_SetConfig+0x33e>
 8003f96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f9a:	d00b      	beq.n	8003fb4 <UART_SetConfig+0x32c>
 8003f9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fa0:	d811      	bhi.n	8003fc6 <UART_SetConfig+0x33e>
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d003      	beq.n	8003fae <UART_SetConfig+0x326>
 8003fa6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003faa:	d006      	beq.n	8003fba <UART_SetConfig+0x332>
 8003fac:	e00b      	b.n	8003fc6 <UART_SetConfig+0x33e>
 8003fae:	2300      	movs	r3, #0
 8003fb0:	77fb      	strb	r3, [r7, #31]
 8003fb2:	e00d      	b.n	8003fd0 <UART_SetConfig+0x348>
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	77fb      	strb	r3, [r7, #31]
 8003fb8:	e00a      	b.n	8003fd0 <UART_SetConfig+0x348>
 8003fba:	2304      	movs	r3, #4
 8003fbc:	77fb      	strb	r3, [r7, #31]
 8003fbe:	e007      	b.n	8003fd0 <UART_SetConfig+0x348>
 8003fc0:	2308      	movs	r3, #8
 8003fc2:	77fb      	strb	r3, [r7, #31]
 8003fc4:	e004      	b.n	8003fd0 <UART_SetConfig+0x348>
 8003fc6:	2310      	movs	r3, #16
 8003fc8:	77fb      	strb	r3, [r7, #31]
 8003fca:	e001      	b.n	8003fd0 <UART_SetConfig+0x348>
 8003fcc:	2310      	movs	r3, #16
 8003fce:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	69db      	ldr	r3, [r3, #28]
 8003fd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fd8:	d15b      	bne.n	8004092 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003fda:	7ffb      	ldrb	r3, [r7, #31]
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d828      	bhi.n	8004032 <UART_SetConfig+0x3aa>
 8003fe0:	a201      	add	r2, pc, #4	; (adr r2, 8003fe8 <UART_SetConfig+0x360>)
 8003fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe6:	bf00      	nop
 8003fe8:	0800400d 	.word	0x0800400d
 8003fec:	08004015 	.word	0x08004015
 8003ff0:	0800401d 	.word	0x0800401d
 8003ff4:	08004033 	.word	0x08004033
 8003ff8:	08004023 	.word	0x08004023
 8003ffc:	08004033 	.word	0x08004033
 8004000:	08004033 	.word	0x08004033
 8004004:	08004033 	.word	0x08004033
 8004008:	0800402b 	.word	0x0800402b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800400c:	f7ff f99e 	bl	800334c <HAL_RCC_GetPCLK1Freq>
 8004010:	61b8      	str	r0, [r7, #24]
        break;
 8004012:	e013      	b.n	800403c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004014:	f7ff f9ae 	bl	8003374 <HAL_RCC_GetPCLK2Freq>
 8004018:	61b8      	str	r0, [r7, #24]
        break;
 800401a:	e00f      	b.n	800403c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800401c:	4b4b      	ldr	r3, [pc, #300]	; (800414c <UART_SetConfig+0x4c4>)
 800401e:	61bb      	str	r3, [r7, #24]
        break;
 8004020:	e00c      	b.n	800403c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004022:	f7ff f881 	bl	8003128 <HAL_RCC_GetSysClockFreq>
 8004026:	61b8      	str	r0, [r7, #24]
        break;
 8004028:	e008      	b.n	800403c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800402a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800402e:	61bb      	str	r3, [r7, #24]
        break;
 8004030:	e004      	b.n	800403c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004032:	2300      	movs	r3, #0
 8004034:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	77bb      	strb	r3, [r7, #30]
        break;
 800403a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d074      	beq.n	800412c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	005a      	lsls	r2, r3, #1
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	085b      	lsrs	r3, r3, #1
 800404c:	441a      	add	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	fbb2 f3f3 	udiv	r3, r2, r3
 8004056:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	2b0f      	cmp	r3, #15
 800405c:	d916      	bls.n	800408c <UART_SetConfig+0x404>
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004064:	d212      	bcs.n	800408c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	b29b      	uxth	r3, r3
 800406a:	f023 030f 	bic.w	r3, r3, #15
 800406e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	085b      	lsrs	r3, r3, #1
 8004074:	b29b      	uxth	r3, r3
 8004076:	f003 0307 	and.w	r3, r3, #7
 800407a:	b29a      	uxth	r2, r3
 800407c:	89fb      	ldrh	r3, [r7, #14]
 800407e:	4313      	orrs	r3, r2
 8004080:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	89fa      	ldrh	r2, [r7, #14]
 8004088:	60da      	str	r2, [r3, #12]
 800408a:	e04f      	b.n	800412c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	77bb      	strb	r3, [r7, #30]
 8004090:	e04c      	b.n	800412c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004092:	7ffb      	ldrb	r3, [r7, #31]
 8004094:	2b08      	cmp	r3, #8
 8004096:	d828      	bhi.n	80040ea <UART_SetConfig+0x462>
 8004098:	a201      	add	r2, pc, #4	; (adr r2, 80040a0 <UART_SetConfig+0x418>)
 800409a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800409e:	bf00      	nop
 80040a0:	080040c5 	.word	0x080040c5
 80040a4:	080040cd 	.word	0x080040cd
 80040a8:	080040d5 	.word	0x080040d5
 80040ac:	080040eb 	.word	0x080040eb
 80040b0:	080040db 	.word	0x080040db
 80040b4:	080040eb 	.word	0x080040eb
 80040b8:	080040eb 	.word	0x080040eb
 80040bc:	080040eb 	.word	0x080040eb
 80040c0:	080040e3 	.word	0x080040e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040c4:	f7ff f942 	bl	800334c <HAL_RCC_GetPCLK1Freq>
 80040c8:	61b8      	str	r0, [r7, #24]
        break;
 80040ca:	e013      	b.n	80040f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040cc:	f7ff f952 	bl	8003374 <HAL_RCC_GetPCLK2Freq>
 80040d0:	61b8      	str	r0, [r7, #24]
        break;
 80040d2:	e00f      	b.n	80040f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040d4:	4b1d      	ldr	r3, [pc, #116]	; (800414c <UART_SetConfig+0x4c4>)
 80040d6:	61bb      	str	r3, [r7, #24]
        break;
 80040d8:	e00c      	b.n	80040f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040da:	f7ff f825 	bl	8003128 <HAL_RCC_GetSysClockFreq>
 80040de:	61b8      	str	r0, [r7, #24]
        break;
 80040e0:	e008      	b.n	80040f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040e6:	61bb      	str	r3, [r7, #24]
        break;
 80040e8:	e004      	b.n	80040f4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	77bb      	strb	r3, [r7, #30]
        break;
 80040f2:	bf00      	nop
    }

    if (pclk != 0U)
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d018      	beq.n	800412c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	085a      	lsrs	r2, r3, #1
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	441a      	add	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	fbb2 f3f3 	udiv	r3, r2, r3
 800410c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	2b0f      	cmp	r3, #15
 8004112:	d909      	bls.n	8004128 <UART_SetConfig+0x4a0>
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800411a:	d205      	bcs.n	8004128 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	b29a      	uxth	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	60da      	str	r2, [r3, #12]
 8004126:	e001      	b.n	800412c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004138:	7fbb      	ldrb	r3, [r7, #30]
}
 800413a:	4618      	mov	r0, r3
 800413c:	3720      	adds	r7, #32
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	40007c00 	.word	0x40007c00
 8004148:	40023800 	.word	0x40023800
 800414c:	00f42400 	.word	0x00f42400

08004150 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00a      	beq.n	800417a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00a      	beq.n	800419c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	430a      	orrs	r2, r1
 800419a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	f003 0304 	and.w	r3, r3, #4
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00a      	beq.n	80041be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	f003 0308 	and.w	r3, r3, #8
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00a      	beq.n	80041e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	430a      	orrs	r2, r1
 80041de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	f003 0310 	and.w	r3, r3, #16
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00a      	beq.n	8004202 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	430a      	orrs	r2, r1
 8004200:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	f003 0320 	and.w	r3, r3, #32
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00a      	beq.n	8004224 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422c:	2b00      	cmp	r3, #0
 800422e:	d01a      	beq.n	8004266 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	430a      	orrs	r2, r1
 8004244:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800424e:	d10a      	bne.n	8004266 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	430a      	orrs	r2, r1
 8004264:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00a      	beq.n	8004288 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	430a      	orrs	r2, r1
 8004286:	605a      	str	r2, [r3, #4]
  }
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af02      	add	r7, sp, #8
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042a4:	f7fd fbfc 	bl	8001aa0 <HAL_GetTick>
 80042a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0308 	and.w	r3, r3, #8
 80042b4:	2b08      	cmp	r3, #8
 80042b6:	d10e      	bne.n	80042d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f831 	bl	800432e <UART_WaitOnFlagUntilTimeout>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e027      	b.n	8004326 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	2b04      	cmp	r3, #4
 80042e2:	d10e      	bne.n	8004302 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f81b 	bl	800432e <UART_WaitOnFlagUntilTimeout>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e011      	b.n	8004326 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2220      	movs	r2, #32
 8004306:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2220      	movs	r2, #32
 800430c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b09c      	sub	sp, #112	; 0x70
 8004332:	af00      	add	r7, sp, #0
 8004334:	60f8      	str	r0, [r7, #12]
 8004336:	60b9      	str	r1, [r7, #8]
 8004338:	603b      	str	r3, [r7, #0]
 800433a:	4613      	mov	r3, r2
 800433c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800433e:	e0a7      	b.n	8004490 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004340:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004346:	f000 80a3 	beq.w	8004490 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800434a:	f7fd fba9 	bl	8001aa0 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004356:	429a      	cmp	r2, r3
 8004358:	d302      	bcc.n	8004360 <UART_WaitOnFlagUntilTimeout+0x32>
 800435a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800435c:	2b00      	cmp	r3, #0
 800435e:	d13f      	bne.n	80043e0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004368:	e853 3f00 	ldrex	r3, [r3]
 800436c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800436e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004370:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004374:	667b      	str	r3, [r7, #100]	; 0x64
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	461a      	mov	r2, r3
 800437c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800437e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004380:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004382:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004384:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004386:	e841 2300 	strex	r3, r2, [r1]
 800438a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800438c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1e6      	bne.n	8004360 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	3308      	adds	r3, #8
 8004398:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800439c:	e853 3f00 	ldrex	r3, [r3]
 80043a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a4:	f023 0301 	bic.w	r3, r3, #1
 80043a8:	663b      	str	r3, [r7, #96]	; 0x60
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	3308      	adds	r3, #8
 80043b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80043b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80043b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80043b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043ba:	e841 2300 	strex	r3, r2, [r1]
 80043be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80043c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1e5      	bne.n	8004392 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2220      	movs	r2, #32
 80043ca:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e068      	b.n	80044b2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0304 	and.w	r3, r3, #4
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d050      	beq.n	8004490 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043fc:	d148      	bne.n	8004490 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004406:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004410:	e853 3f00 	ldrex	r3, [r3]
 8004414:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800441c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	461a      	mov	r2, r3
 8004424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004426:	637b      	str	r3, [r7, #52]	; 0x34
 8004428:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800442c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800442e:	e841 2300 	strex	r3, r2, [r1]
 8004432:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1e6      	bne.n	8004408 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	3308      	adds	r3, #8
 8004440:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	e853 3f00 	ldrex	r3, [r3]
 8004448:	613b      	str	r3, [r7, #16]
   return(result);
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	f023 0301 	bic.w	r3, r3, #1
 8004450:	66bb      	str	r3, [r7, #104]	; 0x68
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	3308      	adds	r3, #8
 8004458:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800445a:	623a      	str	r2, [r7, #32]
 800445c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445e:	69f9      	ldr	r1, [r7, #28]
 8004460:	6a3a      	ldr	r2, [r7, #32]
 8004462:	e841 2300 	strex	r3, r2, [r1]
 8004466:	61bb      	str	r3, [r7, #24]
   return(result);
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1e5      	bne.n	800443a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2220      	movs	r2, #32
 8004472:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2220      	movs	r2, #32
 8004478:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2220      	movs	r2, #32
 8004480:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e010      	b.n	80044b2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	69da      	ldr	r2, [r3, #28]
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	4013      	ands	r3, r2
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	429a      	cmp	r2, r3
 800449e:	bf0c      	ite	eq
 80044a0:	2301      	moveq	r3, #1
 80044a2:	2300      	movne	r3, #0
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	461a      	mov	r2, r3
 80044a8:	79fb      	ldrb	r3, [r7, #7]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	f43f af48 	beq.w	8004340 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3770      	adds	r7, #112	; 0x70
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
	...

080044bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044bc:	b084      	sub	sp, #16
 80044be:	b580      	push	{r7, lr}
 80044c0:	b084      	sub	sp, #16
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
 80044c6:	f107 001c 	add.w	r0, r7, #28
 80044ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d120      	bne.n	8004516 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68da      	ldr	r2, [r3, #12]
 80044e4:	4b20      	ldr	r3, [pc, #128]	; (8004568 <USB_CoreInit+0xac>)
 80044e6:	4013      	ands	r3, r2
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80044f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d105      	bne.n	800450a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 fa96 	bl	8004a3c <USB_CoreReset>
 8004510:	4603      	mov	r3, r0
 8004512:	73fb      	strb	r3, [r7, #15]
 8004514:	e010      	b.n	8004538 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 fa8a 	bl	8004a3c <USB_CoreReset>
 8004528:	4603      	mov	r3, r0
 800452a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004530:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453a:	2b01      	cmp	r3, #1
 800453c:	d10b      	bne.n	8004556 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f043 0206 	orr.w	r2, r3, #6
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f043 0220 	orr.w	r2, r3, #32
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004556:	7bfb      	ldrb	r3, [r7, #15]
}
 8004558:	4618      	mov	r0, r3
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004562:	b004      	add	sp, #16
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	ffbdffbf 	.word	0xffbdffbf

0800456c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f023 0201 	bic.w	r2, r3, #1
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b084      	sub	sp, #16
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
 8004596:	460b      	mov	r3, r1
 8004598:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800459a:	2300      	movs	r3, #0
 800459c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045aa:	78fb      	ldrb	r3, [r7, #3]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d115      	bne.n	80045dc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80045bc:	2001      	movs	r0, #1
 80045be:	f7fd fa7b 	bl	8001ab8 <HAL_Delay>
      ms++;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	3301      	adds	r3, #1
 80045c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 fa29 	bl	8004a20 <USB_GetMode>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d01e      	beq.n	8004612 <USB_SetCurrentMode+0x84>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2b31      	cmp	r3, #49	; 0x31
 80045d8:	d9f0      	bls.n	80045bc <USB_SetCurrentMode+0x2e>
 80045da:	e01a      	b.n	8004612 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80045dc:	78fb      	ldrb	r3, [r7, #3]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d115      	bne.n	800460e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80045ee:	2001      	movs	r0, #1
 80045f0:	f7fd fa62 	bl	8001ab8 <HAL_Delay>
      ms++;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	3301      	adds	r3, #1
 80045f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 fa10 	bl	8004a20 <USB_GetMode>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d005      	beq.n	8004612 <USB_SetCurrentMode+0x84>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2b31      	cmp	r3, #49	; 0x31
 800460a:	d9f0      	bls.n	80045ee <USB_SetCurrentMode+0x60>
 800460c:	e001      	b.n	8004612 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e005      	b.n	800461e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2b32      	cmp	r3, #50	; 0x32
 8004616:	d101      	bne.n	800461c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e000      	b.n	800461e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
	...

08004628 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004628:	b084      	sub	sp, #16
 800462a:	b580      	push	{r7, lr}
 800462c:	b086      	sub	sp, #24
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
 8004632:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004636:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004642:	2300      	movs	r3, #0
 8004644:	613b      	str	r3, [r7, #16]
 8004646:	e009      	b.n	800465c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	3340      	adds	r3, #64	; 0x40
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	2200      	movs	r2, #0
 8004654:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	3301      	adds	r3, #1
 800465a:	613b      	str	r3, [r7, #16]
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	2b0e      	cmp	r3, #14
 8004660:	d9f2      	bls.n	8004648 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004664:	2b00      	cmp	r3, #0
 8004666:	d11c      	bne.n	80046a2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004676:	f043 0302 	orr.w	r3, r3, #2
 800467a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004680:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	e005      	b.n	80046ae <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046b4:	461a      	mov	r2, r3
 80046b6:	2300      	movs	r3, #0
 80046b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c0:	4619      	mov	r1, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c8:	461a      	mov	r2, r3
 80046ca:	680b      	ldr	r3, [r1, #0]
 80046cc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d10c      	bne.n	80046ee <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80046d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d104      	bne.n	80046e4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80046da:	2100      	movs	r1, #0
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f965 	bl	80049ac <USB_SetDevSpeed>
 80046e2:	e008      	b.n	80046f6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80046e4:	2101      	movs	r1, #1
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f960 	bl	80049ac <USB_SetDevSpeed>
 80046ec:	e003      	b.n	80046f6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80046ee:	2103      	movs	r1, #3
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 f95b 	bl	80049ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80046f6:	2110      	movs	r1, #16
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 f8f3 	bl	80048e4 <USB_FlushTxFifo>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 f91f 	bl	800494c <USB_FlushRxFifo>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800471e:	461a      	mov	r2, r3
 8004720:	2300      	movs	r3, #0
 8004722:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800472a:	461a      	mov	r2, r3
 800472c:	2300      	movs	r3, #0
 800472e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004736:	461a      	mov	r2, r3
 8004738:	2300      	movs	r3, #0
 800473a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800473c:	2300      	movs	r3, #0
 800473e:	613b      	str	r3, [r7, #16]
 8004740:	e043      	b.n	80047ca <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	015a      	lsls	r2, r3, #5
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	4413      	add	r3, r2
 800474a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004754:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004758:	d118      	bne.n	800478c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d10a      	bne.n	8004776 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	015a      	lsls	r2, r3, #5
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4413      	add	r3, r2
 8004768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800476c:	461a      	mov	r2, r3
 800476e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004772:	6013      	str	r3, [r2, #0]
 8004774:	e013      	b.n	800479e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	015a      	lsls	r2, r3, #5
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	4413      	add	r3, r2
 800477e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004782:	461a      	mov	r2, r3
 8004784:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004788:	6013      	str	r3, [r2, #0]
 800478a:	e008      	b.n	800479e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	015a      	lsls	r2, r3, #5
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	4413      	add	r3, r2
 8004794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004798:	461a      	mov	r2, r3
 800479a:	2300      	movs	r3, #0
 800479c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	015a      	lsls	r2, r3, #5
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	4413      	add	r3, r2
 80047a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047aa:	461a      	mov	r2, r3
 80047ac:	2300      	movs	r3, #0
 80047ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	015a      	lsls	r2, r3, #5
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047bc:	461a      	mov	r2, r3
 80047be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	3301      	adds	r3, #1
 80047c8:	613b      	str	r3, [r7, #16]
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d3b7      	bcc.n	8004742 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047d2:	2300      	movs	r3, #0
 80047d4:	613b      	str	r3, [r7, #16]
 80047d6:	e043      	b.n	8004860 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	015a      	lsls	r2, r3, #5
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4413      	add	r3, r2
 80047e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047ee:	d118      	bne.n	8004822 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10a      	bne.n	800480c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004802:	461a      	mov	r2, r3
 8004804:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004808:	6013      	str	r3, [r2, #0]
 800480a:	e013      	b.n	8004834 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	015a      	lsls	r2, r3, #5
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4413      	add	r3, r2
 8004814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004818:	461a      	mov	r2, r3
 800481a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800481e:	6013      	str	r3, [r2, #0]
 8004820:	e008      	b.n	8004834 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	015a      	lsls	r2, r3, #5
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	4413      	add	r3, r2
 800482a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800482e:	461a      	mov	r2, r3
 8004830:	2300      	movs	r3, #0
 8004832:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	015a      	lsls	r2, r3, #5
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4413      	add	r3, r2
 800483c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004840:	461a      	mov	r2, r3
 8004842:	2300      	movs	r3, #0
 8004844:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	015a      	lsls	r2, r3, #5
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	4413      	add	r3, r2
 800484e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004852:	461a      	mov	r2, r3
 8004854:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004858:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	3301      	adds	r3, #1
 800485e:	613b      	str	r3, [r7, #16]
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	429a      	cmp	r2, r3
 8004866:	d3b7      	bcc.n	80047d8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004876:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800487a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004888:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800488a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488c:	2b00      	cmp	r3, #0
 800488e:	d105      	bne.n	800489c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	f043 0210 	orr.w	r2, r3, #16
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	699a      	ldr	r2, [r3, #24]
 80048a0:	4b0e      	ldr	r3, [pc, #56]	; (80048dc <USB_DevInit+0x2b4>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80048a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d005      	beq.n	80048ba <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	f043 0208 	orr.w	r2, r3, #8
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80048ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d105      	bne.n	80048cc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	699a      	ldr	r2, [r3, #24]
 80048c4:	4b06      	ldr	r3, [pc, #24]	; (80048e0 <USB_DevInit+0x2b8>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80048cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3718      	adds	r7, #24
 80048d2:	46bd      	mov	sp, r7
 80048d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048d8:	b004      	add	sp, #16
 80048da:	4770      	bx	lr
 80048dc:	803c3800 	.word	0x803c3800
 80048e0:	40000004 	.word	0x40000004

080048e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80048ee:	2300      	movs	r3, #0
 80048f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	3301      	adds	r3, #1
 80048f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4a13      	ldr	r2, [pc, #76]	; (8004948 <USB_FlushTxFifo+0x64>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d901      	bls.n	8004904 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e01b      	b.n	800493c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	2b00      	cmp	r3, #0
 800490a:	daf2      	bge.n	80048f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800490c:	2300      	movs	r3, #0
 800490e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	019b      	lsls	r3, r3, #6
 8004914:	f043 0220 	orr.w	r2, r3, #32
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	3301      	adds	r3, #1
 8004920:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	4a08      	ldr	r2, [pc, #32]	; (8004948 <USB_FlushTxFifo+0x64>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d901      	bls.n	800492e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e006      	b.n	800493c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	f003 0320 	and.w	r3, r3, #32
 8004936:	2b20      	cmp	r3, #32
 8004938:	d0f0      	beq.n	800491c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3714      	adds	r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr
 8004948:	00030d40 	.word	0x00030d40

0800494c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004954:	2300      	movs	r3, #0
 8004956:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	3301      	adds	r3, #1
 800495c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	4a11      	ldr	r2, [pc, #68]	; (80049a8 <USB_FlushRxFifo+0x5c>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d901      	bls.n	800496a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e018      	b.n	800499c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	2b00      	cmp	r3, #0
 8004970:	daf2      	bge.n	8004958 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004972:	2300      	movs	r3, #0
 8004974:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2210      	movs	r2, #16
 800497a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	3301      	adds	r3, #1
 8004980:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	4a08      	ldr	r2, [pc, #32]	; (80049a8 <USB_FlushRxFifo+0x5c>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d901      	bls.n	800498e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e006      	b.n	800499c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	f003 0310 	and.w	r3, r3, #16
 8004996:	2b10      	cmp	r3, #16
 8004998:	d0f0      	beq.n	800497c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	00030d40 	.word	0x00030d40

080049ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	460b      	mov	r3, r1
 80049b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	78fb      	ldrb	r3, [r7, #3]
 80049c6:	68f9      	ldr	r1, [r7, #12]
 80049c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049cc:	4313      	orrs	r3, r2
 80049ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3714      	adds	r7, #20
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80049de:	b480      	push	{r7}
 80049e0:	b085      	sub	sp, #20
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80049f8:	f023 0303 	bic.w	r3, r3, #3
 80049fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a0c:	f043 0302 	orr.w	r3, r3, #2
 8004a10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3714      	adds	r7, #20
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	f003 0301 	and.w	r3, r3, #1
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a44:	2300      	movs	r3, #0
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	4a13      	ldr	r2, [pc, #76]	; (8004aa0 <USB_CoreReset+0x64>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d901      	bls.n	8004a5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e01b      	b.n	8004a92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	daf2      	bge.n	8004a48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a62:	2300      	movs	r3, #0
 8004a64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	f043 0201 	orr.w	r2, r3, #1
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	3301      	adds	r3, #1
 8004a76:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	4a09      	ldr	r2, [pc, #36]	; (8004aa0 <USB_CoreReset+0x64>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d901      	bls.n	8004a84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e006      	b.n	8004a92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d0f0      	beq.n	8004a72 <USB_CoreReset+0x36>

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	00030d40 	.word	0x00030d40

08004aa4 <__libc_init_array>:
 8004aa4:	b570      	push	{r4, r5, r6, lr}
 8004aa6:	4d0d      	ldr	r5, [pc, #52]	; (8004adc <__libc_init_array+0x38>)
 8004aa8:	4c0d      	ldr	r4, [pc, #52]	; (8004ae0 <__libc_init_array+0x3c>)
 8004aaa:	1b64      	subs	r4, r4, r5
 8004aac:	10a4      	asrs	r4, r4, #2
 8004aae:	2600      	movs	r6, #0
 8004ab0:	42a6      	cmp	r6, r4
 8004ab2:	d109      	bne.n	8004ac8 <__libc_init_array+0x24>
 8004ab4:	4d0b      	ldr	r5, [pc, #44]	; (8004ae4 <__libc_init_array+0x40>)
 8004ab6:	4c0c      	ldr	r4, [pc, #48]	; (8004ae8 <__libc_init_array+0x44>)
 8004ab8:	f000 f820 	bl	8004afc <_init>
 8004abc:	1b64      	subs	r4, r4, r5
 8004abe:	10a4      	asrs	r4, r4, #2
 8004ac0:	2600      	movs	r6, #0
 8004ac2:	42a6      	cmp	r6, r4
 8004ac4:	d105      	bne.n	8004ad2 <__libc_init_array+0x2e>
 8004ac6:	bd70      	pop	{r4, r5, r6, pc}
 8004ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004acc:	4798      	blx	r3
 8004ace:	3601      	adds	r6, #1
 8004ad0:	e7ee      	b.n	8004ab0 <__libc_init_array+0xc>
 8004ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ad6:	4798      	blx	r3
 8004ad8:	3601      	adds	r6, #1
 8004ada:	e7f2      	b.n	8004ac2 <__libc_init_array+0x1e>
 8004adc:	08004b34 	.word	0x08004b34
 8004ae0:	08004b34 	.word	0x08004b34
 8004ae4:	08004b34 	.word	0x08004b34
 8004ae8:	08004b38 	.word	0x08004b38

08004aec <memset>:
 8004aec:	4402      	add	r2, r0
 8004aee:	4603      	mov	r3, r0
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d100      	bne.n	8004af6 <memset+0xa>
 8004af4:	4770      	bx	lr
 8004af6:	f803 1b01 	strb.w	r1, [r3], #1
 8004afa:	e7f9      	b.n	8004af0 <memset+0x4>

08004afc <_init>:
 8004afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004afe:	bf00      	nop
 8004b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b02:	bc08      	pop	{r3}
 8004b04:	469e      	mov	lr, r3
 8004b06:	4770      	bx	lr

08004b08 <_fini>:
 8004b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b0a:	bf00      	nop
 8004b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b0e:	bc08      	pop	{r3}
 8004b10:	469e      	mov	lr, r3
 8004b12:	4770      	bx	lr
